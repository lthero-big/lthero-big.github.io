<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lthero</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://blog.lthero.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.lthero.cn/"/>
  <updated>2025-08-06T16:14:41.488Z</updated>
  <id>https://blog.lthero.cn/</id>
  
  <author>
    <name>lthero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCodeCampsDay43动态规划part10</title>
    <link href="https://blog.lthero.cn/2025/08/07/LeetCodeCampsDay43/"/>
    <id>https://blog.lthero.cn/2025/08/07/LeetCodeCampsDay43/</id>
    <published>2025-08-06T16:13:37.000Z</published>
    <updated>2025-08-06T16:14:41.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday43动态规划part10">LeetCodeCampsDay43动态规划part10</h1><h1 id="300-最长递增子序列">300. 最长递增子序列</h1><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">https://leetcode.cn/problems/longest-increasing-subsequence/</a></p><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,7,7,7,7,7,7]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能将算法的时间复杂度降低到 <code>O(n log(n))</code> 吗?</li></ul><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def lengthOfLIS(self, nums: List[int]) -&gt; int:</span><br><span class="line">        # 使用dp数组做</span><br><span class="line">        # dp数组下标与含义：dp[i][0]表示将字符i装入的最长长度，dp[i][1]表示将字符i不装入的最长长度</span><br><span class="line">        </span><br><span class="line">        # 递推公式</span><br><span class="line">        # dp[i] = max(dp[i], dp[j] + 1)</span><br><span class="line">        L = len(nums)</span><br><span class="line">        if L &lt;= 1:</span><br><span class="line">            return L</span><br><span class="line">        dp = [1] * L</span><br><span class="line">        res = 0</span><br><span class="line">        for i in range(1, L):</span><br><span class="line">            for j in range(i):</span><br><span class="line">                if nums[i] &gt; nums[j]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + 1)</span><br><span class="line">            if dp[i] &gt; res:</span><br><span class="line">                res = dp[i]</span><br><span class="line">        </span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday43动态规划part10&quot;&gt;LeetCodeCampsDay43动态规划part10&lt;/h1&gt;
&lt;h1 id=&quot;300-最长递增子序列&quot;&gt;300. 最长递增子序列&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay42动态规划part09</title>
    <link href="https://blog.lthero.cn/2025/08/06/LeetCodeCampsDay42/"/>
    <id>https://blog.lthero.cn/2025/08/06/LeetCodeCampsDay42/</id>
    <published>2025-08-06T09:26:37.000Z</published>
    <updated>2025-08-06T12:40:34.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday42动态规划part09">LeetCodeCampsDay42动态规划part09</h1><blockquote><p>买卖股票的另类问题</p></blockquote><h1 id="309-买卖股票的最佳时机含冷冻期">309. 买卖股票的最佳时机含冷冻期</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a></p><p>给定一个整数数组<code>prices</code>，其中第 <code>prices[i]</code> 表示第 <code>i</code> 天的股票价格 。</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><ul><li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li></ul><p>**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: prices = [1,2,3,0,2]</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: prices = [1]</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><ol><li>dp定义与含义</li></ol><p>根据状态转移图，需要定义一个包含四个状态的dp数组</p><p>状态0：表示买入</p><p>状态1：表示已经卖出，但还没买入</p><p>状态2：表示当天卖出</p><p>状态3：冷冻期</p><p>dp[i][j]表示在第i天的状态j下的最多金额数</p><p>状态转移表如下</p><p><img src="https://cdn.lthero.cn/post_images/course/ML518d5baaf33f4b2698064f8efb42edbf.png" alt="img"></p><p><img src="https://file1.kamacoder.com/i/algo/518d5baaf33f4b2698064f8efb42edbf.png" alt="img"></p><ol start="2"><li>递推公式</li></ol><p>状态0：有三种状态可以转移到状态0</p><p>如果不买入新股票</p><p>​        如果是从状态0（买入当天），则dp[i][0] = dp[i - 1][0]</p><p>如果买入新股票</p><p>​        如果是从状态1（当天卖出），则dp[i][0] = dp[i - 1][1] - prices[i]</p><p>​        如果是从状态3（冷冻期），则dp[i][0] = dp[i - 1][3] - prices[i]</p><p>状态1：有两种状态可以转移到状态1</p><p>​        如果从状态1：dp[i][1] = dp[i - 1][1]</p><p>​        如果从状态3：dp[i][1] = dp[i - 1][3]</p><p>状态2：只有一种状态可以转移到状态2</p><p>​        dp[i][2] = dp[i - 1][0] + prices[i]</p><p>状态3：只有一种状态可以转移到状态3</p><p>​        dp[i][3] = dp[i - 1][2]</p><ol start="3"><li>dp初始化</li></ol><p>​        dp[0][0]初始化为-prices[0], dp[0][1]初始化为0， dp[0][2]初始化为0（dp[0][0] + prices[0]），dp[0][3]初始化为0</p><ol start="4"><li>遍历顺序</li></ol><p>​        i范围(1, n) 遍历每天</p><ol start="5"><li>举例</li></ol><p><img src="https://cdn.lthero.cn/post_images/course/ML2021032317451040.png" alt="img"></p><p><img src="https://file1.kamacoder.com/i/algo/2021032317451040.png" alt="img"></p><p>最后结果是取 状态二，状态三，和状态四的最大值，不少同学会把状态四忘了，状态四是冷冻期，最后一天如果是冷冻期也可能是最大值。</p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        dp = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>((dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">3</span>] - prices[i]))</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>] )</span><br><span class="line">            dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]</span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回最后一天里最大利润，因为不确定哪个值会是最大的，所以直接返回状态1，2，3里最大的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[-<span class="number">1</span>][<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h1 id="714-买卖股票的最佳时机含手续费">714. 买卖股票的最佳时机含手续费</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p>**注意：**这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1, 3, 2, 8, 4, 9], fee = 2</span><br><span class="line">输出：8</span><br><span class="line">解释：能够达到的最大利润:  </span><br><span class="line">在此处买入 prices[0] = 1</span><br><span class="line">在此处卖出 prices[3] = 8</span><br><span class="line">在此处买入 prices[4] = 4</span><br><span class="line">在此处卖出 prices[5] = 9</span><br><span class="line">总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,3,7,5,10,3], fee = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5 * 104</code></li><li><code>1 &lt;= prices[i] &lt; 5 * 104</code></li><li><code>0 &lt;= fee &lt; 5 * 104</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>本题在<code>122. 买卖股票最佳时机II</code> 基础上实现，<strong>只要在卖出时减去fee即可</strong></p><ol><li>dp下标与含义</li></ol><p>dp[i][0]表示买入</p><p>dp[i][1]表示卖出</p><ol start="2"><li>递推公式</li></ol><p>第i天， <strong>考虑</strong>买入</p><p>​如果不买入第i天的股票，则dp[i][0] = dp[i - 1][0]</p><p>​如果买入第i天的股票， 则dp[i][0] = dp[i - 1][1] - prices[i]</p><p>​所以dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])</p><p>第i天，<strong>考虑</strong>卖出</p><p>​如果不卖出持有的股票，则dp[i][1] = dp[i - 1][1]</p><p>​如果卖出持有的股票，则dp[i][1] = dp[i - 1][0] + prices[i]（或者dp[i][0] + prices[i] )</p><p>​所以dp[i][1] = max(dp[i - 1][1], dp[i][0] + prices[i])</p><ol start="3"><li>初始化</li></ol><p>将第一天的dp[0][0]初始化为-prices[0]，因为先买第一支股票，并且第一次买初始化资金为0</p><ol start="4"><li>遍历顺序</li></ol><p>i从第1天到第n天</p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>], fee: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 每次在卖的时候把手续费算上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每次只能卖一只股票，但不限制次数，使用两个状态即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp下标与含义，dp[i][0]表示买入，dp[i][1]表示卖出</span></span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line"></span><br><span class="line">        dp = [[<span class="number">0</span>] * <span class="number">2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="comment"># 买入</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i])</span><br><span class="line">            <span class="comment"># 卖出时需要减去费用</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i][<span class="number">0</span>] + prices[i]  - fee)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="股票问题总结">股票问题总结</h1><ul><li><a href="https://programmercarl.com/0121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.html">动态规划：121.买卖股票的最佳时机</a></li><li><a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II</a></li><li><a href="https://programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.html">动态规划：123.买卖股票的最佳时机III</a></li><li><a href="https://programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html">动态规划：188.买卖股票的最佳时机IV</a></li><li><a href="https://programmercarl.com/0309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F.html">动态规划：309.最佳买卖股票时机含冷冻期</a></li><li><a href="https://programmercarl.com/0714.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：714.买卖股票的最佳时机含手续费</a></li></ul><h2 id="卖股票的最佳时机">卖股票的最佳时机</h2><p>动态规划：121.买卖股票的最佳时机，<strong>股票只能买卖一次，问最大利润</strong>。</p><p>【贪心解法】</p><p>取最左最小值，取最右最大值，那么得到的差值就是最大利润，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = INT_MAX;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            low = <span class="built_in">min</span>(low, prices[i]);  <span class="comment">// 取最左最小价格</span></span><br><span class="line">            result = <span class="built_in">max</span>(result, prices[i] - low); <span class="comment">// 直接取最大区间利润</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【动态规划】</p><ul><li>dp[i][0] 表示第i天持有股票所得现金。</li><li>dp[i][1] 表示第i天不持有股票所得现金。</li></ul><p>如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来</p><ul><li>第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]</li><li>第i天买入股票，所得现金就是买入今天的股票后所得现金即：-prices[i] 所以dp[i][0] = max(dp[i - 1][0], -prices[i]);</li></ul><p>如果第i天不持有股票即dp[i][1]， 也可以由两个状态推出来</p><ul><li>第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]</li><li>第i天卖出股票，所得现金就是按照今天股票佳价格卖出后所得现金即：prices[i] + dp[i - 1][0] 所以dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0]);</li></ul><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], prices[i] + dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><p>使用滚动数组，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>)); <span class="comment">// 注意这里只开辟了一个2 * 2大小的二维数组</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">0</span>] = <span class="built_in">max</span>(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">            dp[i % <span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">max</span>(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>], prices[i] + dp[(i - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(len - <span class="number">1</span>) % <span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="买卖股票的最佳时机ii">买卖股票的最佳时机II</h2><p><a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II </a>可以多次买卖股票，问最大收益。</p><p>【贪心解法】</p><p>收集每天的正利润便可，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            result += <span class="built_in">max</span>(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>【动态规划】</p><p>dp数组定义：</p><ul><li>dp[i][0] 表示第i天持有股票所得现金</li><li>dp[i][1] 表示第i天不持有股票所得最多现金</li></ul><p>如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来</p><ul><li>第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]</li><li>第i天买入股票，所得现金就是昨天不持有股票的所得现金减去 今天的股票价格 即：dp[i - 1][1] - prices[i]</li></ul><p><strong>注意这里和 121. 买卖股票的最佳时机 唯一不同的地方，就是推导dp[i][0]的时候，第i天买入股票的情况</strong>。</p><p>在121. 买卖股票的最佳时机 中，因为股票全程只能买卖一次，所以如果买入股票，那么第i天持有股票即dp[i][0]一定就是 -prices[i]。</p><p>而本题，因为一只股票可以买卖多次，所以当第i天买入股票的时候，<code>所持有的现金可能有之前买卖过的利润</code>。</p><p>代码如下：（注意代码中的注释，标记了和121.买卖股票的最佳时机唯一不同的地方）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]); <span class="comment">// 注意这里是和121. 买卖股票的最佳时机唯一不同的地方。</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><h2 id="买卖股票的最佳时机iii">买卖股票的最佳时机III</h2><p><a href="https://programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.html">动态规划：123.买卖股票的最佳时机III </a>最多买卖两次，问最大收益。</p><p>【动态规划】</p><p>一天一共就有五个状态，</p><ol><li>没有操作</li><li>第一次买入</li><li>第一次卖出</li><li>第二次买入</li><li>第二次卖出</li></ol><p>dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。</p><p>达到dp[i][1]状态，有两个具体操作：</p><ul><li>操作一：第i天买入股票了，那么dp[i][1] = dp[i-1][0] - prices[i]</li><li>操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]</li></ul><p>dp[i][1] = max(dp[i-1][0] - prices[i], dp[i - 1][1]);</p><p>同理dp[i][2]也有两个操作：</p><ul><li>操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]</li><li>操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]</li></ul><p>所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])</p><p>同理可推出剩下状态部分：</p><p>dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);</p><p>dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">4</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>() - <span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n × 5)</li></ul><p>当然，大家可以看到力扣官方题解里的一种优化空间写法，我这里给出对应的C++版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">5</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>], dp[<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[<span class="number">2</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>], dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">3</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>], dp[<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[<span class="number">4</span>] = <span class="built_in">max</span>(dp[<span class="number">4</span>], dp[<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p><strong>这种写法看上去简单，其实思路很绕，不建议大家这么写，这么思考，很容易把自己绕进去！</strong> 对于本题，把版本一的写法研究明白，足以！</p><h2 id="买卖股票的最佳时机iv">买卖股票的最佳时机IV</h2><p><a href="https://programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html">动态规划：188.买卖股票的最佳时机IV </a>最多买卖k笔交易，问最大收益。</p><p>使用二维数组 dp[i][j] ：第i天的状态为j，所剩下的最大现金是dp[i][j]</p><p>j的状态表示为：</p><ul><li>0 表示不操作</li><li>1 第一次买入</li><li>2 第一次卖出</li><li>3 第二次买入</li><li>4 第二次卖出</li><li>…</li></ul><p><strong>除了0以外，偶数就是卖出，奇数就是买入</strong>。</p><ol><li>确定递推公式</li></ol><p>达到dp[i][1]状态，有两个具体操作：</p><ul><li>操作一：第i天买入股票了，那么dp[i][1] = dp[i - 1][0] - prices[i]</li><li>操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]</li></ul><p>dp[i][1] = max(dp[i - 1][0] - prices[i], dp[i - 1][1]);</p><p>同理dp[i][2]也有两个操作：</p><ul><li>操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]</li><li>操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]</li></ul><p>dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])</p><p>同理可以类比剩下的状态，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * k - <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">    dp[i][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i - <span class="number">1</span>][j] - prices[i]);</span><br><span class="line">    dp[i][j + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j + <span class="number">2</span>], dp[i - <span class="number">1</span>][j + <span class="number">1</span>] + prices[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prices.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span> * k + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * k - <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i - <span class="number">1</span>][j] - prices[i]);</span><br><span class="line">                dp[i][j + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j + <span class="number">2</span>], dp[i - <span class="number">1</span>][j + <span class="number">1</span>] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>() - <span class="number">1</span>][<span class="number">2</span> * k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然有的解法是定义一个三维数组dp[i][j][k]，第i天，第j次买卖，k表示买还是卖的状态，从定义上来讲是比较直观。但感觉三维数组操作起来有些麻烦，直接用二维数组来模拟三维数组的情况，代码看起来也清爽一些。</p><h2 id="最佳买卖股票时机含冷冻期">最佳买卖股票时机含冷冻期</h2><p><a href="https://programmercarl.com/0309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F.html">动态规划：309.最佳买卖股票时机含冷冻期 </a>可以多次买卖但每次卖出有冷冻期1天。</p><p>相对于<a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II </a>，本题加上了一个冷冻期。</p><p>在<a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II </a>中有两个状态，持有股票后的最多现金，和不持有股票的最多现金。本题则可以花费为四个状态</p><p>dp[i][j]：第i天状态为j，所剩的最多现金为dp[i][j]。</p><p>具体可以区分出如下四个状态：</p><ul><li>状态一：买入股票状态（今天买入股票，或者是之前就买入了股票然后没有操作）</li><li>卖出股票状态，这里就有两种卖出股票状态<ul><li>状态二：两天前就卖出了股票，度过了冷冻期，一直没操作，今天保持卖出股票状态</li><li>状态三：今天卖出了股票</li></ul></li><li>状态四：今天为冷冻期状态，但冷冻期状态不可持续，只有一天！</li></ul><p>达到买入股票状态（状态一）即：dp[i][0]，有两个具体操作：</p><ul><li>操作一：前一天就是持有股票状态（状态一），dp[i][0] = dp[i - 1][0]</li><li>操作二：今天买入了，有两种情况<ul><li>前一天是冷冻期（状态四），dp[i - 1][3] - prices[i]</li><li>前一天是保持卖出股票状态（状态二），dp[i - 1][1] - prices[i]</li></ul></li></ul><p>所以操作二取最大值，即：max(dp[i - 1][3], dp[i - 1][1]) - prices[i]</p><p>那么dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i]);</p><p>达到保持卖出股票状态（状态二）即：dp[i][1]，有两个具体操作：</p><ul><li>操作一：前一天就是状态二</li><li>操作二：前一天是冷冻期（状态四）</li></ul><p>dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);</p><p>达到今天就卖出股票状态（状态三），即：dp[i][2] ，只有一个操作：</p><ul><li>操作一：昨天一定是买入股票状态（状态一），今天卖出</li></ul><p>即：dp[i][2] = dp[i - 1][0] + prices[i];</p><p>达到冷冻期状态（状态四），即：dp[i][3]，只有一个操作：</p><ul><li>操作一：昨天卖出了股票（状态三）</li></ul><p>p[i][3] = dp[i - 1][2];</p><p>综上分析，递推代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">3</span>]- prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]) - prices[i];</span><br><span class="line">dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line">dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>]; <span class="comment">// 持股票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">3</span>],<span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><h2 id="买卖股票的最佳时机含手续费">买卖股票的最佳时机含手续费</h2><p><a href="https://programmercarl.com/0714.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：714.买卖股票的最佳时机含手续费 </a>可以多次买卖，但每次有手续费。</p><p>相对于<a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II </a>，本题只需要在计算卖出操作的时候减去手续费就可以了，代码几乎是一样的。</p><p>唯一差别在于递推公式部分，所以本篇也就不按照动规五部曲详细讲解了，主要讲解一下递推公式部分。</p><p>这里重申一下dp数组的含义：</p><p>dp[i][0] 表示第i天持有股票所省最多现金。 dp[i][1] 表示第i天不持有股票所得最多现金</p><p>如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来</p><ul><li>第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]</li><li>第i天买入股票，所得现金就是昨天不持有股票的所得现金减去 今天的股票价格 即：dp[i - 1][1] - prices[i]</li></ul><p>所以：dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);</p><p>在来看看如果第i天不持有股票即dp[i][1]的情况， 依然可以由两个状态推出来</p><ul><li>第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]</li><li>第i天卖出股票，所得现金就是按照今天股票价格卖出后所得现金，<strong>注意这里需要有手续费了</strong>即：dp[i - 1][0] + prices[i] - fee</li></ul><p>所以：dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i] - fee);</p><p><strong>本题和<a href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html">动态规划：122.买卖股票的最佳时机II </a>的区别就是这里需要多一个减去手续费的操作</strong>。</p><p>以上分析完毕，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>]; <span class="comment">// 持股票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">0</span>], dp[n - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday42动态规划part09&quot;&gt;LeetCodeCampsDay42动态规划part09&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;买卖股票的另类问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;309-买卖股票的最佳时机含冷冻</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay41动态规划part08</title>
    <link href="https://blog.lthero.cn/2025/08/06/LeetCodeCampsDay41/"/>
    <id>https://blog.lthero.cn/2025/08/06/LeetCodeCampsDay41/</id>
    <published>2025-08-06T03:27:48.000Z</published>
    <updated>2025-08-06T12:27:56.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday41动态规划part08">LeetCodeCampsDay41动态规划part08</h1><blockquote><p>股票问题从入门到通关</p></blockquote><h1 id="121-买卖股票的最佳时机">121. 买卖股票的最佳时机</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/</a></p><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 105</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><ol><li>dp数组含义</li></ol><p>dp[i][0]表示第i天<strong>持有股票</strong>所得最多现金</p><p>dp[i][1]表示第i天<strong>没有股票</strong>所得最多现金</p><ol start="2"><li>递推公式</li></ol><p>如果第i天持有股票，则需要判断持有的股票是否有更低的买入价格（其中-prices[i]就是成本价格dp[i][0]）</p><p><code>dp[i][0] = max(dp[i - 1][0], -prices[i])  </code></p><ul><li>dp[i - 1][0]是之前买了股票后剩下的钱，-prices[i]是买了当日股票剩下的钱</li></ul><p>如果第i天没有股票，则那天要卖股票</p><p><code>dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]) </code></p><ul><li>dp[i - 1][1] 是之前卖股票更挣钱，而dp[i - 1][0] + prices[i] 今天的行情不错，股票卖掉，血赚prices[i]块钱, dp[i-1][0]是我用低价买入花的钱（这里将dp[i - 1][0]换成dp[i][0]也可以，并且可能更好理解）</li></ul><ol start="3"><li>初始化</li></ol><p>仅将第0天的持有股票初始化为-prices[0]，表示无论如何一定要买一支股票</p><ol start="4"><li>遍历顺序</li></ol><p>遍历顺序，i遍历卖出时间（范围1到n）</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i])</span><br><span class="line">            <span class="comment"># 这里将dp[i - 1][0] + prices[i]改成dp[i][0]也可以，可以把dp[i][0]理解成当天的投入成本、prices[i]是当天卖价，dp[i][1]是当天利润</span></span><br><span class="line">            <span class="comment"># 为了将当天利润最大化，比较前一天利润与当天利润，取最大值</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i][<span class="number">0</span>] + prices[i])</span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="122-买卖股票的最佳时机-ii">122. 买卖股票的最佳时机 II</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/</a></p><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,1,5,3,6,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。</span><br><span class="line">随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。</span><br><span class="line">最大总利润为 4 + 3 = 7 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。</span><br><span class="line">最大总利润为 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h2 id="动态规划思路一">动态规划思路一</h2><p>需要有双指针，一个j指向某支股票买入天数，另一个i遍历所有售出天数；</p><h2 id="动态规划代码一">动态规划代码一</h2><p>通过 200 / 202 个通过的测试用例</p><p>超时了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># dp[i] = max(dp[i - 1], dp[j] + prices[i] - prices[j])</span></span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        dp = [<span class="number">0</span>] * (L + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[j] + prices[i] - prices[j])</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="动态规划思路二">动态规划思路二</h2><p>本题和[121. 买卖股票的最佳时机的唯一区别是本题股票可以<code>买卖多次了</code>（注意只有一只股票，所以再次购买前要出售掉之前的股票）</p><p><strong>在动规五部曲中，这个区别主要是体现在递推公式上，其他都和<a href="https://programmercarl.com/0121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.html">121. 买卖股票的最佳时机</a>一样的</strong>。</p><ol><li>dp数组含义</li></ol><p>dp[i][0]表示第i天<strong>持有股票</strong>所得最多现金</p><p>dp[i][1]表示第i天<strong>没有股票</strong>所得最多现金</p><ol start="2"><li>递推公式</li></ol><p>如果第i天持有股票，则需要判断持有的股票是否有更低的买入价格（其中-prices[i]就是成本价格dp[i][0]）</p><p><code>dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])</code></p><ul><li>dp[i - 1][0]是之前买了股票后剩下的钱，dp[i - 1][1] - prices[i]是前一次卖了股票后剩下的钱，去买当日股票剩下的钱，还是看哪次剩下的钱更多</li></ul><p>如果第i天没有股票，则那天要卖股票</p><p><code>dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])</code></p><ul><li>dp[i - 1][1] 是之前卖股票更挣钱，而dp[i - 1][0] + prices[i] 今天的行情不错，股票卖掉，血赚prices[i]块钱, dp[i-1][0]是我用低价买入花的钱（这里将dp[i - 1][0]换成dp[i][0]也可以，并且可能更好理解）</li></ul><ol start="3"><li>初始化</li></ol><p>仅将第0天的持有股票初始化为-prices[0]，表示无论如何一定要买一支股票</p><p>dp[0][0] = -prices[0]</p><p>dp[0][1] = 0 (表示第一天剩下0元)</p><ol start="4"><li>遍历顺序</li></ol><p>遍历顺序，i遍历卖出时间（范围1到n）</p><h2 id="动态规划代码二">动态规划代码二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="comment"># 因为一只股票可以买卖多次，所以当第i天买入股票的时候，所持有的现金可能有之前买卖过的利润。</span></span><br><span class="line">            <span class="comment"># 那么第i天持有股票即dp[i][0]，如果是第i天买入股票，所得现金就是 &quot;昨天不持有股票的所得现金 减去 今天的股票价格&quot; 即：dp[i - 1][1] - prices[i]。</span></span><br><span class="line">            <span class="comment"># dp[i - 1][1]理解成前一天卖出股票后剩下的所有钱</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i])</span><br><span class="line">            <span class="comment"># 这里的dp[i][0]理解成第i天买入股票后剩下的所有钱</span></span><br><span class="line">            <span class="comment"># 使用dp[i - 1][0]也是可以的</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i][<span class="number">0</span>] + prices[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>把这里的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0] = max(dp[i - 1][0], 0 - prices[i])</span><br></pre></td></tr></table></figure><p>则变成了只能一只股票只买卖一次的情况</p><h1 id="123-买卖股票的最佳时机-iii">123. 买卖股票的最佳时机 III</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/</a></p><p>给定一个数组，它的第 <code>i</code> 个元素是一支给定的股票在第 <code>i</code> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易。</p><p>**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [3,3,5,0,0,3,1,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。</span><br><span class="line">     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   </span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   </span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1] </span><br><span class="line">输出：0 </span><br><span class="line">解释：在这个情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 105</code></li><li><code>0 &lt;= prices[i] &lt;= 105</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>本题和[121. 买卖股票的最佳时机的唯一区别是本题股票可以最多操作两次，指可以买两支不同的股票</p><p>在动规五部曲中，这个区别主要是体现在递推公式上</p><ol><li>dp数组含义</li></ol><p>dp[i][0]表示第i天<strong>第一次操作持有股票</strong>所得最多现金，<code>表示第i天才开始第一次操作，在此之前的天不进行任何操作！</code></p><p>dp[i][1]表示第i天<strong>第一次操作没有股票</strong>所得最多现金</p><p>dp[i][2]表示第i天<strong>第二次操作持有股票</strong>所得最多现金</p><p>dp[i][3]表示第i天<strong>第二次操作没有股票</strong>所得最多现金</p><ol start="2"><li>递推公式</li></ol><p>第i天，第一次买入，则需要判断持有的股票是否有更低的买入价格（其中-prices[i]就是成本价格dp[i][0]）</p><p><code>dp[i][0] = max(dp[i - 1][1], - prices[i])</code></p><ul><li>dp[i - 1][0]是之前买了股票后剩下的钱，- prices[i]是买当日股票剩下的钱，不管是第几天，只要是第一次操作，初始的钱一定为0啊</li></ul><p>第i天，第一次卖出</p><p><code>dp[i][1] = max(dp[i - 1][2], dp[i][0] + prices[i])</code></p><ul><li>dp[i - 1][2] 是之前的i-1天卖股票挣的钱</li><li>dp[i - 1][1] + prices[i] 表示今天的行情不错，股票卖掉，血赚prices[i]块钱, dp[i-1][0]是我用低价买入花的钱（这里将dp[i - 1][0]换成dp[i][0]也可以，并且可能更好理解，表示当天买了股票后剩下的钱）</li></ul><p>第i天，第二次买入，</p><p><code>dp[i][2] = max(dp[i - 1][3], dp[i - 1][1] - prices[i])</code></p><ul><li>dp[i - 1][3]是之前买了股票后剩下的钱</li><li>dp[i - 1][1] - prices[i]是买当日股票剩下的钱，其中dp[i - 1][1]为第i-1天的第二次操作后剩下的钱</li></ul><p>第i天，第二次卖出</p><p><code>dp[i][3] = max(dp[i - 1][4], dp[i][2] + prices[i])</code></p><ul><li>dp[i - 1][4] 是之前的i-1天第二次操作后挣的钱</li><li>dp[i - 1][2] + prices[i] 表示今天的行情不错，股票卖掉，血赚prices[i]块钱, dp[i-1][2]是我用低价买入花的钱（这里将dp[i - 1][2]换成dp[i][2]也可以，并且可能更好理解，表示当天买了股票后剩下的钱）</li></ul><ol start="3"><li>初始化</li></ol><p>仅将第0天的持有股票初始化为-prices[0]，表示无论如何一定要买一支股票</p><ol start="4"><li>遍历顺序</li></ol><p>遍历顺序，i遍历卖出时间（范围1到n）</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 和前两题目相比，本题一共可以买、卖再次</span></span><br><span class="line">        <span class="comment"># 所以dp数组的状态则不是只有一次买入&amp;卖出两种状态</span></span><br><span class="line">        <span class="comment"># 而dp数组应该有4种状态</span></span><br><span class="line">        <span class="comment">#  1 第一次买入  2、第一次卖出   3、 第二次买入   4、 第二次不卖出</span></span><br><span class="line">        <span class="comment"># 而dp[i][j] 的i表示第i天而j表示上面提到的四种状态，而dp[i][j]表示第i天第j状态的最大现金</span></span><br><span class="line"></span><br><span class="line">        dp = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递推公式</span></span><br><span class="line">        <span class="comment"># 第i天第一次买入, </span></span><br><span class="line">        <span class="comment">#  dp[i][0] = max(dp[i - 1][0], - prices[i])</span></span><br><span class="line">        <span class="comment"># 第i天第一次卖出，</span></span><br><span class="line">        <span class="comment">#  dp[i][1] = max(dp[i - 1][1], dp[i][0] + prices[i])</span></span><br><span class="line">        <span class="comment"># 第i天第二次买入</span></span><br><span class="line">        <span class="comment">#  dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] - prices[i])</span></span><br><span class="line">        <span class="comment"># 第i天第二次卖出</span></span><br><span class="line">        <span class="comment">#  dp[i][3] = max(dp[i - 1][3], dp[i][2] + prices[i])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化</span></span><br><span class="line">        <span class="comment"># dp[0][0]为-prices[0]，dp[0][1]为0，dp[0][2]为-prices[0]，dp[0][3]为0，</span></span><br><span class="line">        <span class="comment"># 这里的-prices也可以认为刚开始剩下的钱是0，</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = -prices[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(prices)):</span><br><span class="line">            <span class="comment"># 表示是买入状态</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], - prices[i])</span><br><span class="line">            <span class="comment"># 表示为卖出状态</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i][<span class="number">0</span>] + prices[i])</span><br><span class="line">            <span class="comment"># </span></span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i])</span><br><span class="line">            dp[i][<span class="number">3</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i][<span class="number">2</span>] + prices[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="188-买卖股票的最佳时机-iv">188. 买卖股票的最佳时机 IV</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/</a></p><p>给你一个整数数组 <code>prices</code> 和一个整数 <code>k</code> ，其中 <code>prices[i]</code> 是某支给定的股票在第 <code>i</code> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <code>k</code> 笔交易。也就是说，你最多可以买 <code>k</code> 次，卖 <code>k</code> 次。</p><p>**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：k = 2, prices = [2,4,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：k = 2, prices = [3,2,6,5,0,3]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。</span><br><span class="line">     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= 100</code></li><li><code>1 &lt;= prices.length &lt;= 1000</code></li><li><code>0 &lt;= prices[i] &lt;= 1000</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>在动规五部曲中，这个区别主要是体现在递推公式上</p><ol><li>dp数组含义</li></ol><p>dp[i][0]表示第i天<strong>第一次操作持有股票</strong>所得最多现金，<code>表示第i天才开始第一次操作，在此之前的天不进行任何操作！</code></p><p>dp[i][1]表示第i天<strong>第一次操作没有股票</strong>所得最多现金</p><p>dp[i][2]表示第i天<strong>第二次操作持有股票</strong>所得最多现金</p><p>dp[i][3]表示第i天<strong>第二次操作没有股票</strong>所得最多现金</p><p>dp[i][4]表示第i天<strong>第三次操作持有股票</strong>所得最多现金</p><p>……</p><p>数组开的大小为dp[len(prices)][ 2 * k]， 因为每次操作都有买入与卖出两种类型</p><ol start="2"><li>递推公式</li></ol><p>第i天，第一次<strong>考虑</strong>买入</p><p><code>dp[i][j] = max(dp[i - 1][j], - prices[i])</code></p><ul><li>dp[i - 1][j]是上一次买了股票后剩下的钱</li><li>-prices[i]是买当日股票剩下的钱，不管是第几天，如果是第一次买入，则初始资金一定为0</li><li>只要比较下两者剩下的钱，就知道第i天是否适合作为第一次买入</li></ul><p>第i天，非第一次<strong>考虑</strong>买入</p><p><code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i])</code></p><ul><li>dp[i - 1][0]是上一次买了股票后剩下的钱</li><li>dp[i - 1][j - 1] - prices[i]是买当日股票剩下的钱，如果不是第一次买入，则初始资金为上一次卖出后的钱dp[i - 1][j - 1（i-1为上一次，j-1为卖出）</li><li>只要比较下两者剩下的钱，就知道第i天是否适合作为非第一次买入</li></ul><p>第i天，<strong>考虑</strong>卖出</p><p><code>dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + prices[i])</code></p><ul><li>dp[i-1][j]为上一次卖出剩下的钱</li><li>dp[i][j - 1] + prices[i]为本次卖出剩下的钱，这里换成dp[i - 1][j - 1] 也是正确的，则表示用上一次买入后剩下的钱加上这次卖出，得到了第i天第j次卖出后剩下的钱</li><li>只要比较下两者剩下的钱，就知道第i天是否适合卖出，如果不卖出则继续保持dp[i-1][j]的金额</li></ul><ol start="3"><li>初始化</li></ol><p>仅将第0天的持有股票初始化为-prices[0]，表示无论如何一定要买一支股票</p><ol start="4"><li>遍历顺序</li></ol><p>遍历顺序，i遍历卖出时间（范围1到n），j遍历操作的次数（范围从0到2k-1）</p><p>如果j是偶数则是买入操作，再判断是否是第一次买入</p><p>如果j是奇数则是卖出操作，</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, k: <span class="built_in">int</span>, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        dp = [[<span class="number">0</span>] * <span class="number">2</span> * k <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * k):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = -prices[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * k):</span><br><span class="line">                <span class="comment"># 买入操作</span></span><br><span class="line">                <span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                  <span class="comment"># 如果是第一次买入，则初始资金一定为0</span></span><br><span class="line">                    <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                      <span class="comment"># dp[i-1][j]为上一次买入剩下的钱，-prices[i]为本次买入剩下的钱</span></span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], -prices[i])</span><br><span class="line">                    <span class="comment"># 如果不是第一次买入，则初始资金为上一次卖出后的钱（i-1为上一次，j-1为卖出）</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                      <span class="comment"># dp[i-1][j]为上一次买入剩下的钱，dp[i - 1][j - 1]-prices[i]为本次买入剩下的钱</span></span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] - prices[i])</span><br><span class="line">                <span class="comment"># 卖出操作</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                  <span class="comment"># dp[i-1][j]为上一次卖出剩下的钱， dp[i][j - 1] + prices[i]为本次卖出剩下的钱</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>] + prices[i])</span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday41动态规划part08&quot;&gt;LeetCodeCampsDay41动态规划part08&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;股票问题从入门到通关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;121-买卖股票的最佳时机&quot;&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay39动态规划part07</title>
    <link href="https://blog.lthero.cn/2025/08/05/LeetCodeCampsDay39/"/>
    <id>https://blog.lthero.cn/2025/08/05/LeetCodeCampsDay39/</id>
    <published>2025-08-05T14:34:09.000Z</published>
    <updated>2025-08-06T02:37:43.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday39动态规划part07">LeetCodeCampsDay39动态规划part07</h1><blockquote></blockquote><h1 id="198-打家劫舍">198. 打家劫舍</h1><p><a href="https://leetcode.cn/problems/house-robber/">https://leetcode.cn/problems/house-robber/</a></p><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>明显是个01背包问题</p><ol><li><p>dp数组[i]表示拿到第i家后一共有dp[i]金额</p></li><li><p>递推公式：每家只有能拿和不能拿，如果能拿，则dp[i]=dp[i - 2] + val[i]；如果不能拿则dp[i]=dp[i-1]；所以需要判断拿与不拿的最大值</p></li><li><p>初始化，dp[n + 1]全初始化为0，但dp[1]初始化为nums[0]，因为至少需要抢一家吧；（其实可以把dp[2]也初始化了，赋值为nums[1]，但也可以不做，在遍历时会自动赋值的）</p></li><li><p>遍历顺序，只用一层循环，只遍历每家</p></li><li><p>举例：</p></li><li><p>nums = [   2, 7, 9,  3,  1]</p><p>dp   = [0, 2, 0, 0,  0,  0]</p><p>dp   = [0, 2, 7, 11, 11, 12]</p></li></ol><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 01背包问题，</span></span><br><span class="line">        <span class="comment"># dp数组[i]表示拿到第i家后一共有dp[i]金额</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递推公式：</span></span><br><span class="line">        <span class="comment"># 每家只有能拿和不能拿，如果能拿，则dp[i]=max(dp[i-1], dp[i - 2] + val[i])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化</span></span><br><span class="line">        <span class="comment"># dp[n + 1]，刚开始全部初始化为0</span></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp = [<span class="number">0</span>] * (L + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 遍历顺序: 只遍历物品就可以了吧</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, L + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 注意i-1才对应nums的下标</span></span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 举例</span></span><br><span class="line">        <span class="comment"># nums = [   2, 7, 9,  3,  1]</span></span><br><span class="line">        <span class="comment"># dp   = [0, 2, 0, 0,  0,  0]</span></span><br><span class="line">        <span class="comment"># dp   = [0, 2, 7, 11, 11, 12]</span></span><br></pre></td></tr></table></figure><h1 id="213-打家劫舍-ii">213. 打家劫舍 II</h1><p><a href="https://leetcode.cn/problems/house-robber-ii/">https://leetcode.cn/problems/house-robber-ii/</a></p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>这道题目和<a href="https://programmercarl.com/0198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html">198.打家劫舍 (opens new window)</a>是差不多的，唯一区别就是成环了。</p><p>对于一个数组，成环的话主要有如下三种情况：</p><ul><li>情况一：考虑不包含首尾元素</li></ul><p><img src="https://cdn.lthero.cn/post_images/course/ML20210129160748643-20230310134000692.jpg" alt="213.打家劫舍II"></p><p><img src="https://file1.kamacoder.com/i/algo/20210129160748643-20230310134000692.jpg" alt="213.打家劫舍II"></p><ul><li>情况二：考虑包含首元素，不包含尾元素</li></ul><p><img src="https://cdn.lthero.cn/post_images/course/ML20210129160821374-20230310134003961.jpg" alt="213.打家劫舍II1"></p><p><img src="https://file1.kamacoder.com/i/algo/20210129160821374-20230310134003961.jpg" alt="213.打家劫舍II1"></p><ul><li>情况三：考虑包含尾元素，不包含首元素</li></ul><p><img src="https://cdn.lthero.cn/post_images/course/ML20210129160842491-20230310134008133.jpg" alt="213.打家劫舍II2"></p><p><img src="https://file1.kamacoder.com/i/algo/20210129160842491-20230310134008133.jpg" alt="213.打家劫舍II2"></p><p><strong>注意我这里用的是&quot;考虑&quot;</strong>，例如情况三，虽然是考虑包含尾元素，但不一定要选尾部元素！ 对于情况三，取nums[1] 和 nums[3]就是最大的。</p><blockquote><p>而情况二 和 情况三 都包含了情况一了，所以只考虑情况二和情况三就可以了。</p></blockquote><p>分析到这里，本题其实比较简单了。</p><p>剩下的和<a href="https://programmercarl.com/0198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html">198.打家劫舍</a>就是一样的了。</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 本题注意是围成一圈表示首尾相接，例如nums=[1, 2, 3]如果拿了3则不能拿1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 本题可以套用普通的打家I</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">            L = <span class="built_in">len</span>(nums)</span><br><span class="line">            dp = [<span class="number">0</span>] * (L + <span class="number">1</span>)</span><br><span class="line">            dp[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 遍历顺序: 只遍历物品就可以了吧</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, L + <span class="number">1</span>):</span><br><span class="line">                <span class="comment"># 注意i-1才对应nums的下标</span></span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        res1 = foo(nums[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">        res2 = foo(nums[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res1, res2)</span><br></pre></td></tr></table></figure><h1 id="337-打家劫舍-iii">337. 打家劫舍 III</h1><p><a href="https://leetcode.cn/problems/house-robber-iii/">https://leetcode.cn/problems/house-robber-iii/</a></p><p>小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 <code>root</code> 。</p><p>除了 <code>root</code> 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 <strong>两个直接相连的房子在同一天晚上被打劫</strong> ，房屋将自动报警。</p><p>给定二叉树的 <code>root</code> 。返回 <em><strong>在不触动警报的情况下</strong> ，小偷能够盗取的最高金额</em> 。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [3,2,3,null,3,null,1]</span><br><span class="line">输出: 7 </span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 3 + 3 + 1 = 7</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [3,4,5,1,3,null,1]</span><br><span class="line">输出: 9</span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 4 + 5 = 9</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树的节点数在 <code>[1, 104]</code> 范围内</li><li><code>0 &lt;= Node.val &lt;= 104</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><blockquote><p>这道题目算是树形dp的入门题目，因为是在树上进行状态转移，我们在讲解二叉树的时候说过递归三部曲，那么下面我以递归三部曲为框架，其中融合动规五部曲的内容来进行讲解</p></blockquote><ol><li>确定递归函数的参数和返回值</li></ol><p>这里我们要求一个节点 偷与不偷的两个状态所得到的金钱，那么返回值就是一个长度为2的数组。</p><p>参数为当前节点，代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">robTree</span> (node: TreeNode) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>]:</span><br></pre></td></tr></table></figure><p>其实这里的返回数组就是dp数组。</p><p>所以dp数组（dp table）以及下标的含义：<code>下标为0记录不偷该节点所得到的的最大金钱，下标为1记录偷该节点所得到的的最大金钱。</code></p><p>长度为2的数组怎么标记树中每个节点的状态呢？</p><p><strong>别忘了在递归的过程中，系统栈会保存每一层递归的参数</strong>。</p><ol start="2"><li>确定终止条件</li></ol><p>在遍历的过程中，如果遇到空节点的话，很明显，无论偷还是不偷都是0，所以就返回</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (cur == NULL) return vector&lt;int&gt;&#123;0, 0&#125;;</span><br></pre></td></tr></table></figure><p>这也相当于dp数组的初始化</p><ol start="3"><li>确定遍历顺序</li></ol><p>首先明确的是使用后序遍历。 因为要通过递归函数的返回值来做下一步计算。</p><p>通过递归左节点，得到左节点偷与不偷的金钱。</p><p>通过递归右节点，得到右节点偷与不偷的金钱。</p><p>代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下标0：不偷，下标1：偷</span></span><br><span class="line"><span class="comment"># 先遍历左、右子树</span></span><br><span class="line">resLeft = self.foo(node.left)</span><br><span class="line">resRight = self.foo(node.right)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>确定单层递归的逻辑</li></ol><p>如果是偷当前节点，那么左右孩子就不能偷，val1 = cur-&gt;val + left[0] + right[0]; （<strong>如果对下标含义不理解就再回顾一下dp数组的含义</strong>）</p><p>如果不偷当前节点，那么左右孩子就可以偷，至于到底偷不偷一定是选一个最大的，所以：val2 = max(left[0], left[1]) + max(right[0], right[1]);</p><p>最后当前节点的状态就是(val1, val2); 即：{不偷当前节点得到的最大金钱，偷当前节点得到的最大金钱}</p><p>代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再遍历中节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不偷root节点，则再考虑左、右子树分别的最大值</span></span><br><span class="line">val1 = <span class="built_in">max</span>(resLeft[<span class="number">0</span>], resLeft[<span class="number">1</span>]) + <span class="built_in">max</span>(resRight[<span class="number">0</span>], resRight[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#  偷root节点，则不偷左、右子树</span></span><br><span class="line">val2 = node.val + resLeft[<span class="number">0</span>] + resRight[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (val1, val2)</span><br></pre></td></tr></table></figure><ol start="5"><li>举例推导dp数组</li></ol><p>以示例1为例，dp数组状态如下：（<strong>注意用后序遍历的方式推导</strong>）</p><p><img src="https://file1.kamacoder.com/i/algo/20230203110031.png" alt="img"></p><p><strong>最后头结点就是 取下标0 和 下标1的最大值就是偷得的最大金钱</strong>。</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, node: TreeNode</span>) -&gt; (<span class="built_in">int</span>):</span><br><span class="line">        <span class="comment"># 空节点则返回金额（0， 0）表示偷或不偷都是0</span></span><br><span class="line">        <span class="comment"># 定义dp[0]为不偷，dp[1]为偷</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用后序遍历</span></span><br><span class="line">        resLeft = self.foo(node.left)</span><br><span class="line">        resRight = self.foo(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># root节点处理子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 不偷root节点，则再考虑左、右子树分别的最大值</span></span><br><span class="line">        val1 = <span class="built_in">max</span>(resLeft[<span class="number">0</span>], resLeft[<span class="number">1</span>]) + <span class="built_in">max</span>(resRight[<span class="number">0</span>], resRight[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 偷root节点，则不偷左、右子树</span></span><br><span class="line">        val2 = node.val + resLeft[<span class="number">0</span>] + resRight[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (val1, val2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = self.foo(root)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday39动态规划part07&quot;&gt;LeetCodeCampsDay39动态规划part07&lt;/h1&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;198-打家劫舍&quot;&gt;198. 打家劫舍&lt;/h1&gt;
&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay38动态规划part06</title>
    <link href="https://blog.lthero.cn/2025/08/05/LeetCodeCampsDay38/"/>
    <id>https://blog.lthero.cn/2025/08/05/LeetCodeCampsDay38/</id>
    <published>2025-08-05T13:25:37.000Z</published>
    <updated>2025-08-05T14:35:53.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday38动态规划part06">LeetCodeCampsDay38动态规划part06</h1><blockquote><p>最小个数问题：零钱兑换、完全平方数</p><p>求排列问题：单词拆分</p></blockquote><h1 id="322-零钱兑换">322. 零钱兑换</h1><p><a href="https://leetcode.cn/problems/coin-change/">https://leetcode.cn/problems/coin-change/</a></p><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [1, 2, 5], amount = 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [2], amount = 3</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [1], amount = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>完全背包、装满到target的最小物品数量的问题</p><ol><li><p>dp定义与下标含义，dp[i][j]表示用物品0~i装满到j的最少物品个数</p></li><li><p>递推公式：凑足总额为j - coins[i]的最少个数为dp[j - coins[i]]，那么只需要加上一个钱币coins[i]即dp[j - coins[i]] + 1就是dp[j]（考虑coins[i]）所以dp[j] 要取所有 dp[j - coins[i]] + 1 中最小的。</p><p>递推公式：dp[i][j] = min(dp[i - 1][j], dp[i][j - coins[i]] + 1)</p></li><li><p>初始化：dp的大小：dp[len(coins)][amount + 1]，并且全部初始化为无穷大；再对第一行、第一列进行初始化； 第一行，如果j能整除coins[0]，则需要j//coins[0]个，否则初始化为0；第一列，全部为0</p></li><li><p>遍历顺序：先物品再容量，如果coins[i] &gt; j，则dp[i][j] = dp[i - 1][j]；否则dp[i][j] = min(dp[i - 1][j], dp[i][j - coins[i]] + 1)</p></li><li><p>举例</p><p>0, 1, 2, 3, 4, 5, 6</p><p>1  0, 1, 2, 3, 4, 5, 6</p><p>2  0, 1, 1, 2, 2, 3, 3</p></li></ol><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度: O(n * amount)，其中 n 为 coins 的长度</li><li>空间复杂度: O(amount)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 完全背包、装满到target的最小物品数量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp定义与下标含义，dp[i][j]表示用物品0~i装满到j的最少物品个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递推公式：</span></span><br><span class="line">        <span class="comment"># 1，2，5， target = 11</span></span><br><span class="line">        <span class="comment"># 原始：dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + val[i])</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment"># 刚开始的想法，错误的</span></span><br><span class="line">        <span class="comment"># val = j // coins[i]</span></span><br><span class="line">        <span class="comment"># remain = j % coins[i]</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i - 1][j], dp[i][remain] + val)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 纠正后的想法，正确的</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i - 1][j], dp[i][j - coins[i]] + 1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="comment"># dp的大小：dp[len(coins)][amount + 1]</span></span><br><span class="line">        Lc = <span class="built_in">len</span>(coins)</span><br><span class="line">        dp = [[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (amount + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Lc)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对第一行，第一列进行初始化，其它位置初始化为0</span></span><br><span class="line">        <span class="comment"># 第一行，如果j能整除coins[0]，则需要j//coins[0]个，否则初始化为0</span></span><br><span class="line">        <span class="comment"># 第一列，全部为0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(amount + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> coins[<span class="number">0</span>] &lt;= j <span class="keyword">and</span>  j % coins[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = j // coins[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Lc):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历顺序，先物品再容量</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, Lc):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(amount + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> coins[i] &gt; j:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - coins[i]] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dp[-<span class="number">1</span>][-<span class="number">1</span>] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 举例</span></span><br><span class="line">        <span class="comment">#    0, 1, 2, 3, 4, 5, 6</span></span><br><span class="line">        <span class="comment"># 1  0, 1, 2, 3, 4, 5, 6</span></span><br><span class="line">        <span class="comment"># 2  0, 1, 1, 2, 2, 3, 3</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 本题也可以使用贪心算法</span></span><br></pre></td></tr></table></figure><h1 id="279-完全平方数">279. 完全平方数</h1><p><a href="https://leetcode.cn/problems/perfect-squares/">https://leetcode.cn/problems/perfect-squares/</a></p><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：3 </span><br><span class="line">解释：12 = 4 + 4 + 4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：2</span><br><span class="line">解释：13 = 4 + 9</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>和题目和322. 零钱兑换基本一样，完全平方数就是物品（可以无限件使用），凑个正整数n就是背包，问凑满这个<strong>背包最少有多少物品</strong></p><p>物品应该只遍历完全平方数（我这里先求出了完全平方数的物品列表item）</p><ol><li><p>数组与下标定义，dp[i][j]表示物品（完全平方数) 从0到i，构成完全平方数j的最小数量</p></li><li><p>递推公式：dp[i][j] = min(dp[i - 1][j], dp[i][j - item(i)] + 1);  卡哥说：dp[j] 可以由dp[j - i * i]推出， dp[j - i * i] + 1 便可以凑成dp[j]。 此时我们要选择最小的dp[j]，所以递推公式：dp[j] = min(dp[j - i * i] + 1, dp[j]);</p></li><li><p>初始化：dp[n][n + 1]全初始化为float(‘inf’)， 第一行（数字1），构成从0到n，如果j大于数字1则为j//i，第一列全是0</p></li><li><p>遍历顺序，先物品再容量</p></li><li><p>0, 1, 2, 3, 4, 5, 6, 7, 8,</p></li></ol><p>1  0, 1, 2, 3, 4, 5, 6, 7, 8</p><p>4  0, 1, 2, 3, 1, 2, 3, 4, 2</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numSquares</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 完全平方数就是物品（可以无限件使用），凑个正整数n就是背包，问凑满这个背包最少有多少物品？</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp数组与下标定义，dp[i][j]表示物品（完全平方数) 从0到i，构成完全平方数j的最小数量</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 完全背包问题递推公式</span></span><br><span class="line">        <span class="comment"># 原公式：dp[i][j] = max(dp[i - 1][j] , dp[i][j - weight[i]] + val[i])</span></span><br><span class="line">        <span class="comment"># 本题公式</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i - 1][j], dp[i][j - i] + 1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化</span></span><br><span class="line">        <span class="comment"># dp[n][n + 1]全初始化为float(&#x27;inf&#x27;)</span></span><br><span class="line">        <span class="comment"># 第一行（数字1），构成从0到n，如果j大于数字1则为j//i</span></span><br><span class="line">        <span class="comment"># 第一列全是0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#    0, 1, 2, 3, 4, 5, 6, 7, 8, </span></span><br><span class="line">        <span class="comment"># 1  0, 1, 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line">        <span class="comment"># 4  0, 1, 2, 3, 1, 2, 3, 4, 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 物品应该只遍历完全平方数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">getSquartList</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">            res = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">                res.append(i * i)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        items = getSquartList(n)</span><br><span class="line">        L = <span class="built_in">len</span>(items)</span><br><span class="line"></span><br><span class="line">        dp = [[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 行初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 列初始化</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j &gt;= <span class="number">1</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &lt; items[i]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - items[i]] + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="动态规划代码精简">动态规划代码精简</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numSquares</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):  <span class="comment"># 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, n + <span class="number">1</span>):  <span class="comment"># 遍历背包</span></span><br><span class="line">                <span class="comment"># 更新凑成数字 j 所需的最少完全平方数数量</span></span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j - i * i] + <span class="number">1</span>, dp[j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h1 id="139-单词拆分">139. 单词拆分</h1><p><a href="https://leetcode.cn/problems/word-break/">https://leetcode.cn/problems/word-break/</a></p><p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code> 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 <code>s</code> 则返回 <code>true</code>。</p><p>**注意：**不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以由 &quot;leet&quot; 和 &quot;code&quot; 拼接成。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以由 &quot;apple&quot; &quot;pen&quot; &quot;apple&quot; 拼接成。</span><br><span class="line">     注意，你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 300</code></li><li><code>1 &lt;= wordDict.length &lt;= 1000</code></li><li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li><li><code>s</code> 和 <code>wordDict[i]</code> 仅由小写英文字母组成</li><li><code>wordDict</code> 中的所有字符串 <strong>互不相同</strong></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>把字符串s当成一个背包，wordDict就是物品，看能否刚好装满这个背包（每个物品可以使用多次），<code>完全背包能否装满的问题</code></p><ol><li>dp含义与下标：dp[i][j]，使用物品0~i组成一个长度为j的字符串，如果能组成就是true；如果使用一维dp，则dp[j]组成一个长度为j的字符串，如果能组成就是true</li><li>递推公式：本题里被遍历的对象是s里的每个字符，如s=applepenapple，则遍历：a, ap, app, appl, apple, applep…；需要双指针，一个i用来遍历每个字符，另一个j用来记录一个完整单词的起点；比如当前遍历到i='e’而j='p’即pe，再判断当前字段是否在wordDict中，而pe不在wordDict里；当遍历到i='n’而j='p’即pen，但pen在wordDict里，此时再判断dp[j]是否也是True，如果dp[j]为True表示j前面的词是可以被wordDict表示的，随后再令dp[i]=True；否则dp[i]=False</li></ol><table><thead><tr><th></th><th>a</th><th>p</th><th>p</th><th>l</th><th>e</th><th>p</th><th>e</th><th>n</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>j</td><td>i</td><td></td></tr></tbody></table><p>此时的当前字段为’pe’并不在wordDict中，令dp[i]为False</p><table><thead><tr><th></th><th>a</th><th>p</th><th>p</th><th>l</th><th>e</th><th>p</th><th>e</th><th>n</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>j</td><td></td><td>i</td></tr></tbody></table><p>此时的字段’pen’在wordDict中，并且dp[j]为True（指的是p前面的apple词，通常情况下可能是appleapple等词是可以使用wordDict表达的），此时再令dp[i]=True；如果dp[j]为False，令dp[i]为False，表示哪怕pen可以被wordDict表示但前面的词不可以</p><ol start="3"><li><p>dp初始化, dp大小为[False] * (len(s) + 1)，其中第一个为空字符串；而令dp[0]=True，表示空字符串是一定可以被表示的</p></li><li><p>遍历顺序：前面也有题目是<code>组合数/排列数</code></p><ol><li><p>如果问能否是否装满，还有两个子问题：</p><p>1、排列数  – 先遍历背包再遍历物品</p><p>2、组合数  – 先遍历物品再遍历背包</p></li><li><p>求组合数：<a href="https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html">动态规划：518.零钱兑换II</a></p></li><li><p>求排列数：<a href="https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html">动态规划：377. 组合总和 Ⅳ</a>、<a href="https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.html">动态规划：70. 爬楼梯进阶版（完全背包）</a></p></li><li><p>求最小数：<a href="https://programmercarl.com/0322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html">动态规划：322. 零钱兑换 </a>、<a href="https://programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html">动态规划：279.完全平方数</a></p></li></ol></li></ol><h3 id="举例">举例</h3><p>输入</p><p>s =“leetcode”</p><p>wordDict = [“leet”,“code”]</p><p>标准输出</p><p>[True, False, False, False, False, False, False, False, False]</p><p>l</p><p>le</p><p>e</p><p>lee</p><p>ee</p><p>e</p><p>leet 找到第一个词</p><p>[True, False, False, False, True, False, False, False, False]</p><p>eet</p><p>et</p><p>t</p><p>leetc</p><p>eetc</p><p>etc</p><p>tc</p><p>c</p><p>leetco</p><p>eetco</p><p>etco</p><p>tco</p><p>co</p><p>o</p><p>leetcod</p><p>eetcod</p><p>etcod</p><p>tcod</p><p>cod</p><p>od</p><p>d</p><p>leetcode</p><p>eetcode</p><p>etcode</p><p>tcode</p><p>code 找到了第二个词</p><p>[True, False, False, False, True, False, False, False, True]</p><p>ode</p><p>de</p><p>e</p><p>最终输出</p><p>[True, False, False, False, True, False, False, False, True]</p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度：O(n^3)，最差情况n^3，最好n^2</li><li>空间复杂度：O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 把字符串s当成一个背包，wordDict就是物品，看能否刚好装满这个背包（每个物品可以使用多次），完全背包能否装满的问题</span></span><br><span class="line">        <span class="comment"># dp含义与下标，dp[i][j]，使用物品0~i组成一个长度为j的字符串，如果能组成就是true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递推公式</span></span><br><span class="line">        <span class="comment"># 原公式 dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + val[i])</span></span><br><span class="line">        <span class="comment"># if </span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="comment"># dp[0][0] 一定为True</span></span><br><span class="line">        <span class="comment"># 其它值都为False</span></span><br><span class="line">        dp = [<span class="literal">False</span>] * (<span class="built_in">len</span>(s) + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 遍历顺序</span></span><br><span class="line">        <span class="comment"># 如果问能否是否装满，还有两个子问题：</span></span><br><span class="line">        <span class="comment"># 1、排列数  -- 先遍历背包再遍历物品</span></span><br><span class="line">        <span class="comment"># 2、组合数  -- 先遍历物品再遍历背包</span></span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这也可以看成一个双指针？</span></span><br><span class="line">        <span class="comment"># sIndex指针指向新单词起点，fast指针遍历每个字符， fast - sIndex就是一个可能的单词长度</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s) + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># j其实是一个新单词的起点</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                word = s[j: i]</span><br><span class="line">                <span class="built_in">print</span>(word)</span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">in</span> wordDict <span class="keyword">and</span> dp[j] == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(word, j, i)</span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#         &quot;&quot;  a , ap, app, appl, apple, applep, applepe, applepen</span></span><br><span class="line">        <span class="comment"># apple    1  0   0   0     0      1     </span></span><br><span class="line">        <span class="comment"># pen</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday38动态规划part06&quot;&gt;LeetCodeCampsDay38动态规划part06&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;最小个数问题：零钱兑换、完全平方数&lt;/p&gt;
&lt;p&gt;求排列问题：单词拆分&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay37动态规划part05</title>
    <link href="https://blog.lthero.cn/2025/07/31/LeetCodeCampsDay37/"/>
    <id>https://blog.lthero.cn/2025/07/31/LeetCodeCampsDay37/</id>
    <published>2025-07-31T02:40:41.000Z</published>
    <updated>2025-07-31T13:09:20.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday37动态规划part05">LeetCodeCampsDay37动态规划part05</h1><blockquote><p>完全背包问题</p></blockquote><h1 id="完全背包">完全背包</h1><blockquote><p>01背包：每个物品最多只能被拿一次</p><p>完全背包：每个物品可被拿无限次数</p></blockquote><p>举例，背包最大重量为4，物品为：</p><table><thead><tr><th></th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td></tr><tr><td>物品1</td><td>3</td><td>20</td></tr><tr><td>物品2</td><td>4</td><td>30</td></tr></tbody></table><p><strong>每件商品都有无限个！</strong></p><p>问背包能背的物品最大价值是多少？</p><ol><li>确定dp数组与下标含义</li></ol><p>先使用较好理解的二维dp数组：dp[i][j]表示从下标为从0到i的物品，每个物品可以取无限次，放进容量为j的背包，价值总和最大是多少</p><ol start="2"><li>确定递推公式</li></ol><p>以dp[1][4]为例，有两种情况，1）放物品1；2）不放物品1</p><p><strong>如果装不下物品1</strong>，那背包的价值是dp[0][4]吗？即 只放物品0 并且容量为4的情况？如下图所示</p><p><img src="https://cdn.lthero.cn/post_images/course/ML20241126112952.png" alt="img"></p><p><img src="https://file1.kamacoder.com/i/algo/20241126112952.png" alt="img"></p><p>没错，在<strong>装不下放物品1时</strong>的情况与01背包一致；</p><p><strong>如果装得下物品1</strong>，那背包的价值上是max(dp[0][4], dp[0][4 - weight[1]] + val[4]) 吗？</p><p>并不是！在<code>“装得下物品1时”的情况与01背包不同</code> （如下图所示）</p><p>在01背包时，因为物品1只能被装一次，所以我们只会考虑dp[0][4 - weight[1]] + val[4]的结果，<code>而完全背包里，4 - weight[1] 是空出物品1的空间重量，但此时背包里也可能还有物品1</code> ，所以我们需要考虑dp[1][4 - weight[1]]而不是dp[0][4 - weight[1]]</p><p>即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>4</mn><mo>−</mo><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">max(dp[0][4], dp[1][4 - weight[1] + val[4])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p><img src="https://cdn.lthero.cn/post_images/course/ML20241126113104.png" alt="img"></p><p><img src="https://file1.kamacoder.com/i/algo/20241126113104.png" alt="img"></p><p>以上过程，抽象化如下：</p><ul><li><strong>放不下物品i</strong>：背包容量为j，里面不放物品i的最大价值是dp[i - 1][j]。</li><li><strong>放得下物品i</strong>：背包誊出物品i的容量后，背包容量为<strong>j - weight[i]</strong>，dp[i][j - weight[i]] 为背包容量为j - weight[i]且不放物品i的最大价值，那么dp[i][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值</li></ul><p>完全背包递推公式： <code>dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + value[i]);</code></p><p>01背包中递推公式： <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code></p><ol start="3"><li>完全背包的dp数组初始化<ol><li>dp是个二维数组，大小为(n, capacity+1), <code>dp = [[0] * (capacity + 1) for _ in range(n)]</code></li><li>（第一列）先考虑容量为0的情况，dp[i][0] 全部设置为0</li><li>（第一行）再考虑物品0的情况，如果背包能放得下物品0， 就一直放：dp[0][j] = dp[0][j - weight[0]] + val[0]</li><li>其它情况，因为其它值都会被覆盖，所以初始化为任意值都可以，初始化为0更方便罢了</li></ol></li></ol><p><img src="https://file1.kamacoder.com/i/algo/20241114161608.png" alt="img"></p><ol start="4"><li>遍历顺序</li></ol><p>对于二维dp背包，可以先遍历物品再容量，也可以先容量再物品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意从物品1开始，因为物品0已经初始化过了，不要重复遍历物品0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(capacity):</span><br><span class="line">    <span class="comment"># 装不下物品i</span></span><br><span class="line">    <span class="keyword">if</span> j&lt; weight[i]:</span><br><span class="line">      dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - weight[i]] + val[i])</span><br></pre></td></tr></table></figure><h1 id="携带研究材料-第七期模拟笔试">携带研究材料（第七期模拟笔试）</h1><p><a href="https://kamacoder.com/problempage.php?pid=1052">https://kamacoder.com/problempage.php?pid=1052</a></p><p>题目描述</p><p>小明是一位科学家，他需要参加一场重要的国际科学大会，以展示自己的最新研究成果。他需要带一些研究材料，但是他的行李箱空间有限。这些研究材料包括实验设备、文献资料和实验样本等等，它们各自占据不同的重量，并且具有不同的价值。</p><p>小明的行李箱所能承担的总重量是有限的，问小明应该如何抉择，才能携带最大价值的研究材料，每种研究材料可以选择无数次，并且可以重复选择。</p><p>输入描述</p><p>第一行包含两个整数，n，v，分别表示研究材料的种类和行李所能承担的总重量</p><p>接下来包含 n 行，每行两个整数 wi 和 vi，代表第 i 种研究材料的重量和价值</p><p>输出描述</p><p>输出一个整数，表示最大价值。</p><p>输入示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p>输出示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>提示信息</p><p>第一种材料选择五次，可以达到最大值。</p><p>数据范围：</p><p>1 &lt;= n &lt;= 10000;<br>1 &lt;= v &lt;= 10000;<br>1 &lt;= wi, vi &lt;= 10^9.</p><h2 id="动态规划思路">动态规划思路</h2><h2 id="二维完全背包动态规划代码">二维完全背包动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, capacity: <span class="built_in">int</span>, weight: <span class="built_in">list</span>, val: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="comment"># 创建dp（二维）</span></span><br><span class="line">        dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递推公式</span></span><br><span class="line">        <span class="comment"># dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + val[i])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化，对物品一，只要能装下，就一直重复装物品一</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(weight[<span class="number">0</span>], capacity + <span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - weight[<span class="number">0</span>]] + val[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(capacity + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &lt; weight[i]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - weight[i]] + val[i])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出dp[-1][-1]</span></span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="built_in">print</span>(dp[n - <span class="number">1</span>][capacity])</span><br><span class="line"></span><br><span class="line">n, capacity = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">weight = <span class="built_in">list</span>()</span><br><span class="line">val = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    w, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    weight.append(w)</span><br><span class="line">    val.append(v)</span><br><span class="line">s = solution()</span><br><span class="line"></span><br><span class="line">s.foo(n, capacity, weight, val)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一维完全背包思路">一维完全背包思路</h2><p>简直来说就是将二维完全背包压缩，但！<code>在遍历时，对容量的遍历不用从大到小遍历，而必须从小到大遍历</code></p><p>在遍历容量时</p><ol><li>（一维dp）01背包必须从大到小遍历</li><li>（一维、二维dp）完全背包必须<strong>从小到大遍历</strong></li></ol><p>我在<a href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E4%B8%80%E7%BB%B4.html">完全背包（一维DP）</a>中讲解了完全背包的两个for循环的先后顺序都是可以的。</p><p><strong>但本题就不行了！</strong></p><p>因为纯完全背包求得装满背包的最大价值是多少，和凑成总和的元素有没有顺序没关系，即：<strong>有顺序也行，没有顺序也行！</strong></p><p>而本题要求凑成总和的<code>组合数</code> ，元素之间明确<code>要求没有顺序</code> 。</p><p>所以纯完全背包是能凑成总和就行，不用管怎么凑的。</p><p>本题是求凑出来的方案个数，且每个方案个数是组合数。</p><p>那么本题，两个for循环的先后顺序可就有说法了。</p><p>我们先来看 外层for循环遍历物品（钱币），内层for遍历背包（金钱总额）的情况。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设：coins[0] = 1，coins[1] = 5。</p><p>那么就是先把1加入计算，然后再把5加入计算，得到的方法数量只有{1, 5}这种情况。而不会出现{5, 1}的情况。</p><p><strong>所以这种遍历顺序中dp[j]里计算的是组合数！</strong></p><p>如果把两个for交换顺序，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j - coins[i] &gt;= <span class="number">0</span>) dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背包容量的<code>每一个值，都是经过 1 和 5 的计算，包含了&#123;1, 5&#125; 和 &#123;5, 1&#125;两种情况</code>。</p><p><strong>此时dp[j]里算出来的就是排列数！</strong></p><p>可能这里很多同学还不是很理解，<strong>建议动手把这两种方案的dp数组数值变化打印出来，对比看一看！（实践出真知）</strong></p><h2 id="一维完全背包动态规划代码">一维完全背包动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, n: <span class="built_in">int</span>, capacity: <span class="built_in">int</span>, weight: <span class="built_in">list</span>, val: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="comment"># 创建dp（一维）</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (capacity + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递推公式</span></span><br><span class="line">        <span class="comment"># dp[j] = max([j], dp[j - weight[i]] + val[i])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化，对物品一，只要能装下，就一直重复装物品一</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(weight[<span class="number">0</span>], capacity + <span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i - weight[<span class="number">0</span>]] + val[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(capacity + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= weight[i]:</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + val[i])</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(dp[- <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="518-零钱兑换-ii">518. 零钱兑换 II</h1><p><a href="https://leetcode.cn/problems/coin-change-ii/">https://leetcode.cn/problems/coin-change-ii/</a></p><p>给你一个整数数组 <code>coins</code> 表示不同面额的硬币，另给一个整数 <code>amount</code> 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 <code>0</code> 。</p><p>假设每一种面额的硬币有无限个。</p><p>题目数据保证结果符合 32 位带符号整数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = 5, coins = [1, 2, 5]</span><br><span class="line">输出：4</span><br><span class="line">解释：有四种方式可以凑成总金额：</span><br><span class="line">5=5</span><br><span class="line">5=2+2+1</span><br><span class="line">5=2+1+1+1</span><br><span class="line">5=1+1+1+1+1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = 3, coins = [2]</span><br><span class="line">输出：0</span><br><span class="line">解释：只用面额 2 的硬币不能凑成总金额 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = 10, coins = [10] </span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 300</code></li><li><code>1 &lt;= coins[i] &lt;= 5000</code></li><li><code>coins</code> 中的所有值 <strong>互不相同</strong></li><li><code>0 &lt;= amount &lt;= 5000</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><blockquote><p>本题求的是装满这个背包的物品<code>组合数</code>是多少</p><p>注意，组合数不要求顺序：比如(1,5)和(5,1)是同一组合</p><p>而，排列要求顺序，(1,5)与(5,1)不是同一排列</p></blockquote><p>例如示例一：</p><p>5 = 2 + 2 + 1</p><p>5 = 2 + 1 + 2</p><p>这是一种组合，都是 2 2 1。</p><p>如果问的是排列数，那么上面就是两种排列了。</p><p><strong>组合不强调元素之间的顺序，排列强调元素之间的顺序</strong>。 为什么要介绍这些呢，因为这和下文讲解<code>遍历顺序</code> 息息相关!</p><p>本题目和494.目标和几乎一样，都是求组合数，本题是完全背包而494.是01背包</p><ol><li><p>定义二维dp数值 dp[i][j]：使用 下标为[0, i]的coins[i]能够凑满j（包括j）这么大容量的包，有dp[i][j]种组合方法。</p></li><li><p>递推关系</p></li></ol><p>如果<strong>coins[i] &lt;= j</strong>则</p><p>在，01背包理论基础 ，中二维DP数组的递推公式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</span><br></pre></td></tr></table></figure><p>在 <a href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html">完全背包理论基础</a>详细讲解了完全背包二维DP数组的递推公式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(dp[i - 1][j], dp[i][j - weight[i]] + value[i])</span><br></pre></td></tr></table></figure><p>如果coins[i] &gt; j则</p><p><code>dp[i][j] = dp[i - 1][j]</code></p><p>在<strong>494. 目标和</strong>中详解讲解了装满背包有几种方法，二维DP数组的递推公式： <code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]]</code></p><p>所以完全背包里的装满背包有几种方法，二维DP数组的递推公式：<code>dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i]]</code></p><p>区别依然是 <code>dp[i - 1][j - nums[i]]</code> 和 <code>dp[i][j - nums[i]]</code></p><p>稍微解释下吧，dp[i - 1][j]是不带物品i，容量j时的组合方法数，而dp[i][j - nums[i]]是带物品i，容量j的组合方法数，相加才是物品i，容量j的组合方法数</p><ol start="3"><li>初始化</li></ol><p>我的想法：</p><p>将dp[i][0]初始化为1，意义？amount=0，只有一种方式；反过来想，如果令dp[i][0]等于0，后面需要加上dp[i][5 - 5] = 0这种情况时就没有意义了；其它数全初始化为0</p><p>但这样就必须在遍历时从物品0开始</p><p><code>for i in range(len(coins)):</code></p><p>卡哥想法：</p><p><img src="https://cdn.lthero.cn/post_images/course/ML20240827103507.png" alt="img"></p><p><img src="https://cdn.lthero.cn/post_images/course/ML20240827103507-20250731155030460.png" alt="img"></p><p>把dp的第一行、第一列进行初始化，dp[0][0]初始化为0；</p><p>第一行dp[0][j]，它的含义是用 [物品0] 装满 背包容量为j 的背包，有多少组合；</p><p>如果j可以整除物品0，那么它则有一种组合方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j % coins[<span class="number">0</span>] == <span class="number">0</span>) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的初始化，在遍历时就必须从物品1开始</p><p><code>for i in range(1, len(coins)):</code></p><p>第一列dp[i][0]，用物品i 装满容量为0的背包，只有一种方法：不装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Lc):</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li>遍历顺序</li></ol><p>二维数组dp遍历顺序先容量/先物品都可以</p><h2 id="二维动态规划代码">二维动态规划代码</h2><ul><li>时间复杂度O(mn)</li><li>空间复杂度O(mn)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">self, amount: <span class="built_in">int</span>, coins: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 问题转换：完全背包，装成target值，有多少种组合方式？</span></span><br><span class="line">        <span class="comment"># dp[i][j] 表示物品i（金币i）组成金额j的组合方式数。</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># ---正式代码---</span></span><br><span class="line">        Lc = <span class="built_in">len</span>(coins)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (amount + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Lc)]</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Lc):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Lc):</span><br><span class="line">            <span class="comment"># 从</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(amount + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= coins[i]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - coins[i]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="377-组合总和-ⅳ">377. 组合总和 Ⅳ</h1><p><a href="https://leetcode.cn/problems/combination-sum-iv/">https://leetcode.cn/problems/combination-sum-iv/</a></p><p>给你一个由 <strong>不同</strong> 整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请你从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。</p><p>题目数据保证答案符合 32 位整数范围。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3], target = 4</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">所有可能的组合为：</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line">请注意，顺序不同的序列被视作不同的组合。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [9], target = 3</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li><li><code>1 &lt;= target &lt;= 1000</code></li></ul><p>**进阶：**如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？</p><h2 id="二维动态规划代码">二维动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum4</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 完全背包，装满为target的值，问方式数量</span></span><br><span class="line">        <span class="comment"># 这题目与518不同点在于，本题的不同顺序可以看成不同求排列</span></span><br><span class="line">        <span class="comment"># 比如1，1，2与1，2，1就是两种求排列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp二维，dp[i][j]，表示在物品i价值为j的情况下求排列数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递推公式：dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i]] + dp[j - nums[i]][i]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dp初始化，首先，dp维度是(target + 1, len(nums) + 1)</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (target + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(L)]</span><br><span class="line">        <span class="comment"># 且dp[i][0]全为1，除了dp[0][0]必须为0，所以跳过第一行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(dp)</span><br><span class="line">        <span class="comment"># 遍历顺序，先物品，再容量</span></span><br><span class="line">        <span class="comment"># 这可以跳过第一个</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, target + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">                <span class="built_in">print</span>(dp)</span><br><span class="line">                <span class="keyword">if</span> j &gt;= nums[i]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[-<span class="number">1</span>][j - nums[i]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="一维动态规划代码">一维动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">L = <span class="built_in">len</span>(nums)</span><br><span class="line">dp = [<span class="number">0</span>] * (target + <span class="number">1</span>)</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, target + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= nums[j]:</span><br><span class="line">            dp[i] += dp[i - nums[j]]</span><br><span class="line"><span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday37动态规划part05&quot;&gt;LeetCodeCampsDay37动态规划part05&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;完全背包问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;完全背包&quot;&gt;完全背包&lt;/h1&gt;
&lt;bl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay36动态规划part04</title>
    <link href="https://blog.lthero.cn/2025/07/30/LeetCodeCampsDay36/"/>
    <id>https://blog.lthero.cn/2025/07/30/LeetCodeCampsDay36/</id>
    <published>2025-07-30T05:45:52.000Z</published>
    <updated>2025-07-30T09:12:15.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday36动态规划part04">LeetCodeCampsDay36动态规划part04</h1><blockquote><p>01背包，分割等和子集的变式题目</p><p>416.分割等和子集是问：能否将背包装满到target值</p><p>1049.石头：尽量将背包装满到target值，如果装不到，则最小差值是多少</p><p>494.目标和：装满一个到target值，有多少种方法</p><p>474.一和零：装满一个背包，最多有多少物品</p></blockquote><h1 id="1049-最后一块石头的重量-ii">1049. 最后一块石头的重量 II</h1><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/">https://leetcode.cn/problems/last-stone-weight-ii/</a></p><p>有一堆石头，用整数数组 <code>stones</code> 表示。其中 <code>stones[i]</code> 表示第 <code>i</code> 块石头的重量。</p><p>每一回合，从中选出<strong>任意两块石头</strong>，然后将它们一起粉碎。假设石头的重量分别为 <code>x</code> 和 <code>y</code>，且 <code>x &lt;= y</code>。那么粉碎的可能结果如下：</p><ul><li>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；</li><li>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。</li></ul><p>最后，<strong>最多只会剩下一块</strong> 石头。返回此石头 <strong>最小的可能重量</strong> 。如果没有石头剩下，就返回 <code>0</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [2,7,4,1,8,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，</span><br><span class="line">组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，</span><br><span class="line">组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，</span><br><span class="line">组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [31,26,33,21,40]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= stones.length &lt;= 30</code></li><li><code>1 &lt;= stones[i] &lt;= 100</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><blockquote><p>如何让这一堆石头相撞后，剩下的石头最小？</p></blockquote><ol><li>极端情况下：当把这一堆石头分成两堆并且两堆体积相等时，剩下的石头为零</li><li>次优解为：两堆体积尽量相似！剩下的石头最小</li></ol><p>这题目之前<code>416.分割等和子集</code>有些像</p><p>可以用一个<strong>背包装石头</strong>，并找一个最小差值：<code>背包的重量</code> 与 <code>剩下石头的重量</code> 差值最小</p><ol><li>使用一维背包，dp背包的下标：石头重量，背包dp[i]含义：背包的重量</li><li>递推公式：dp[j] = max(dp[j], dp[j - stones[i]] + stones[i])，因为重量就是价值，所以weight[i]=val[i]=stones[i]</li><li>dp初始化，一维背包初始化全为零，<strong>背包最大容量设置为sumOfStones也是可以的</strong>，但将在极端情况下，只要让背包装满sumOfStones的一半就可以了，即令dp的长度为<strong>sumOfStones//2</strong></li><li>遍历顺序：行遍历对每个石头遍历，列遍历对背包重量（从大到小遍历，范围[sumOfStones // 2, stones[i]]，保证每个物品只添加一次，这样才是01背包；如果从小到大遍历，就会变成完全背包，指每个物品可以放多次）</li><li>举例</li></ol><p><img src="https://file1.kamacoder.com/i/algo/20210121115805904.jpg" alt="img"></p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度：O(m × n) , m是石头总重量（准确的说是总重量的一半），n为石头块数</li><li>空间复杂度：O(m)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lastStoneWeightII</span>(<span class="params">self, stones: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        sumOfStones = <span class="built_in">sum</span>(stones)</span><br><span class="line">        target = sumOfStones // <span class="number">2</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (target+ <span class="number">1</span>)</span><br><span class="line">        L = <span class="built_in">len</span>(stones)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(target, stones[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stones[i]] + stones[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # (sumOfStones - dp[target])是一堆，dp[target]是另一堆</span></span><br><span class="line">        <span class="keyword">return</span> sumOfStones - dp[target] - dp[target]</span><br></pre></td></tr></table></figure><h1 id="494-目标和">494. 目标和</h1><p><a href="https://leetcode.cn/problems/target-sum/">https://leetcode.cn/problems/target-sum/</a></p><p>给你一个非负整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>'+'</code> 或 <code>'-'</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>'+'</code> ，在 <code>1</code> 之前添加 <code>'-'</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,1,1], target = 3</span><br><span class="line">输出：5</span><br><span class="line">解释：一共有 5 种方法让最终目标和为 3 。</span><br><span class="line">-1 + 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 - 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 - 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 - 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 + 1 - 1 = 3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1], target = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 20</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li><li><code>-1000 &lt;= target &lt;= 1000</code></li></ul><h2 id="本题思路">本题思路</h2><p>本题目需要根据nums求target，看似既要求正数又要求负数情况，但实际上，可以将题目转换成只求正数集，一旦得到了正确的正数集，那sum-正数集就是对应的负数集</p><p>令作为正数集的和为targetSum，作为负数集的和（每个数字仍然为正数）为remainSum</p><p>则</p><ol><li><p>targetSum + remainSum = sum</p></li><li><p>targetSum - remainSum = target</p></li></ol><p>targetSum + targetSum - target = sum</p><p>targetSum = (sum + target) // 2</p><p>现在问题变成了：<strong>求有多少种方法装满left，即背包最大容量为left有多少种装法（或有多少种方法装right）</strong></p><h2 id="回溯思路">回溯思路</h2><p>回溯的思路和之前“组合总和”代码相似，但前提也是要把题目转换一个思考方式，不需要真的考虑每次加一个数或减一个数，而是只考虑：</p><p><code>如何获得满足条件的正数集</code></p><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums, target , currentSum, start</span>):</span><br><span class="line">        <span class="keyword">if</span> currentSum &gt; target:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> currentSum == target:</span><br><span class="line">            self.res += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, L):</span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            self.foo(nums, target, currentSum + nums[i], i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findTargetSumWays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        sumOfnums = <span class="built_in">sum</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> sumOfnums &lt; <span class="built_in">abs</span>(target):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (sumOfnums + target) % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">        left = (sumOfnums + target) // <span class="number">2</span></span><br><span class="line">        self.foo(nums, left, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态规划思路">动态规划思路</h2><p>在确定了动态规划里的targetSum值（对应下面代码里的left），则把问题转成了把背包装满到targetSum的问题</p><ol><li>dp数组下标与含义：dp[j]下标j表示当前背包容量，有dp[j]个方法把背包装满到target</li><li>递推公式：dp[j] = dp[j] + dp[j - nums[i]]</li></ol><p>先只考虑物品0，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240808161747.png" alt="img"></p><p>（这里的所有物品，都是题目中的数字1）。</p><p>装满背包容量为0 的方法个数是1，即 放0件物品。</p><p>装满背包容量为1 的方法个数是1，即 放物品0。</p><p>装满背包容量为2 的方法个数是0，目前没有办法能装满容量为2的背包。</p><hr><p>接下来 考虑 物品0 和 物品1，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240808162052.png" alt="img"></p><p>装满背包容量为0 的方法个数是1，即 放0件物品。</p><p>装满背包容量为1 的方法个数是2，即 放物品0 或者 放物品1。</p><p>装满背包容量为2 的方法个数是1，即 放物品0 和 放物品1。</p><p>其他容量都不能装满，所以方法是0。</p><hr><p>接下来 考虑 物品0 、物品1 和 物品2 ，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240808162533.png" alt="img"></p><p>装满背包容量为0 的方法个数是1，即 放0件物品。</p><p>装满背包容量为1 的方法个数是3，即 放物品0 或者 放物品1 或者 放物品2。</p><p>装满背包容量为2 的方法个数是3，即 放物品0 和 放物品1、放物品0 和 物品2、放物品1 和 物品2。</p><p>装满背包容量为3的方法个数是1，即 放物品0 和 物品1 和 物品2。</p><p>dp[2][2] = 3，即 放物品0 和 放物品1、放物品0 和 物品 2、放物品1 和 物品2， 如图所示，三种方法：</p><p><img src="https://file1.kamacoder.com/i/algo/20240826111946.png" alt="img"></p><p><strong>容量为2 的背包，如果不放 物品2 有几种方法呢</strong>？</p><p>有 dp[1][2] 种方法，即 背包容量为2，只考虑物品0 和 物品1 ，有 dp[1][2] 种方法，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240826112805.png" alt="img"></p><p><strong>容量为2 的背包， 如果放 物品2 有几种方法呢</strong>？</p><p>首先 要在背包里 先把物品2的容量空出来， 装满 刨除物品2容量 的背包 有几种方法呢？</p><p>刨除物品2容量后的背包容量为 1。</p><p>此时装满背包容量为1 有 dp[1][1] 种方法，即： 不放物品2，背包容量为1，只考虑物品 0 和 物品 1，有 dp[1][1] 种方法。</p><p>如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240826113043.png" alt="img"></p><p>有录友可能疑惑，这里计算的是放满 容量为2的背包 有几种方法，那物品2去哪了？</p><p>在上面图中，你把物品2补上就好，同样是两种方法。</p><p>dp[2][2] = 容量为2的背包不放物品2有几种方法 + 容量为2的背包放物品2有几种方法</p><p>所以 dp[2][2] = dp[1][2] + dp[1][1] ，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240826113258.png" alt="img"></p><p>以上过程，抽象化如下：</p><ul><li><strong>不放物品i</strong>：即背包容量为j，<strong>里面不放物品i，装满有dp[i - 1][j]中方法。</strong></li><li><strong>放物品i</strong>： 即：先空出物品i的容量，背包容量为（j - 物品i容量），放满背包有 dp[i - 1][j - 物品i容量] 种方法。</li></ul><p>本题中，物品i的容量是nums[i]，价值也是nums[i]。</p><p>递推公式：dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];</p><p>考到这个递推公式，我们应该注意到，<code>j - nums[i]</code> 作为数组下标，如果 <code>j - nums[i]</code> 小于零呢？</p><p>说明<strong>背包容量装不下</strong> 物品i，所以此时装满背包的方法值 等于 不放物品i的装满背包的方法，即：dp[i][j] = dp[i - 1][j];</p><p>所以递推公式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[i] &gt; j) dp[i][j] = dp[i - <span class="number">1</span>][j]; </span><br><span class="line"><span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - nums[i]];</span><br></pre></td></tr></table></figure><p>二维DP数组递推公式： <code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];</code></p><p>去掉维度i 之后，递推公式：<code>dp[j] = dp[j] + dp[j - nums[i]]</code> ，即：<code>dp[j] += dp[j - nums[i]]</code></p><p><strong>这个公式在后面在讲解背包解决排列组合问题的时候还会用到！</strong></p><p>以前都是<code>dp[j] = max(dp[j] , dp[j - nums[i]] + xxx)</code>，现在要注意dp的含义是有多少种装包的方法而不是求它的价值</p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度：O(n × m)，n为正数个数，m为背包容量</li><li>空间复杂度：O(m)，m为背包容量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findTargetSumWays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">       sumOfnums = <span class="built_in">sum</span>(nums)</span><br><span class="line">       <span class="keyword">if</span> sumOfnums &lt; <span class="built_in">abs</span>(target):</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> (sumOfnums + target) % <span class="number">2</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       nums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">       left = (sumOfnums + target) // <span class="number">2</span></span><br><span class="line">       </span><br><span class="line">       L = <span class="built_in">len</span>(nums)</span><br><span class="line">       sumOfnums = <span class="built_in">sum</span>(nums)</span><br><span class="line">       <span class="keyword">if</span> sumOfnums &lt; <span class="built_in">abs</span>(target):</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> (sumOfnums + target) % <span class="number">2</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       left = (sumOfnums + target) // <span class="number">2</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment"># dp下标与含义：下标j为背包容量，有dp[j]个方法装满</span></span><br><span class="line">       dp = [<span class="number">0</span>] * (left + <span class="number">1</span>)</span><br><span class="line">       <span class="comment"># dp初始化，dp[0]初始化为1，装满0的背包有1种方法</span></span><br><span class="line">       dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">       <span class="comment"># 非0下标初始化为0</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">           <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(left, nums[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">               <span class="comment"># 递推公式dp[j] += dp[j - nums[i]]</span></span><br><span class="line">               dp[j] += dp[j - nums[i]]</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> dp[left]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="474-一和零">474. 一和零</h1><p><a href="https://leetcode.cn/problems/ones-and-zeroes/">https://leetcode.cn/problems/ones-and-zeroes/</a></p><p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p><p>请你找出并返回 <code>strs</code> 的最大子集的长度，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p><p>如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;], m = 5, n = 3</span><br><span class="line">输出：4</span><br><span class="line">解释：最多有 5 个 0 和 3 个 1 的最大子集是 &#123;&quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot;&#125; ，因此答案是 4 。</span><br><span class="line">其他满足题意但较小的子集包括 &#123;&quot;0001&quot;,&quot;1&quot;&#125; 和 &#123;&quot;10&quot;,&quot;1&quot;,&quot;0&quot;&#125; 。&#123;&quot;111001&quot;&#125; 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;10&quot;, &quot;0&quot;, &quot;1&quot;], m = 1, n = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：最大的子集是 &#123;&quot;0&quot;, &quot;1&quot;&#125; ，所以答案是 2 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 600</code></li><li><code>1 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅由 <code>'0'</code> 和 <code>'1'</code> 组成</li><li><code>1 &lt;= m, n &lt;= 100</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>本题里的物品只有子串，但背包需要使用二维，其中dp[j][k]表示最多有j个0，有k个1的最大子集的大小为dp[j][k]</p><p>并且，本题的问题是：<code>装满这个背包，最多可以装多少个物品</code>，最终返回值dp[m][n]</p><ol><li>dp数组下标与含义：dp[j][k]表示最多有j个0，有k个1的最大子集的大小为dp[j][k]</li><li>递推公式：与前面的公式不同，对于每个物品strs[i]，比如’11001’，需要先判断它有x个0，有y个1；<ol><li>然后判断dp[j - x][k - y] + 1 与 dp[j][k]的大小，表示如果，如果装得下，则把这个子串’11001’添加进来则会多一个物品</li></ol></li><li>初始化，将dp全部初始化为0</li><li>遍历顺序：先遍历物品，但需要对物品计算每个子串的0&amp;1个数；再遍历背包，按0和1进行两层循环的遍历（因为先遍历0或1都可以，不影响）<ol><li>注意，遍历背包里，仍然需要像回滚dp数组一样，<strong>倒序遍历</strong>，因为虽然这里的dp是二维数组，但它只是<code>两个维度的容量</code></li></ol></li></ol><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度: O(kmn)，k 为strs的长度</li><li>空间复杂度: O(mn)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMaxForm</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>], m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 使用一个二维dp背包，dp[j][k]表示最多有j个0,k个1的最大子集的大小为dp[j][k]</span></span><br><span class="line">        <span class="comment"># 问，装满这个容器，最多有多少个物品</span></span><br><span class="line">        <span class="comment"># 最终返回dp[m][n]</span></span><br><span class="line">        <span class="comment"># 递推公式(回滚背包)</span></span><br><span class="line">        <span class="comment"># dp[j] = max(dp[j], dp[j - weight[i]] + val[i])</span></span><br><span class="line">        <span class="comment"># 二维dp数组</span></span><br><span class="line">        <span class="comment"># dp[i][j] = max(dp[i][j], dp[i - x][j - y] + 1) ，这里的x,y表示某个子串有x个0，y个1，加1表示把这个子串（物品）添加进来</span></span><br><span class="line">        <span class="comment"># dp初始化</span></span><br><span class="line">        <span class="comment"># dp[0][0]=0, 非零下标也初始化为0</span></span><br><span class="line">        L = <span class="built_in">len</span>(strs)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 遍历物品</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="comment"># 计算strs[i]的0和1个数</span></span><br><span class="line">            x0 = <span class="number">0</span></span><br><span class="line">            y1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> strs[i]:</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                    x0 += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    y1 += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 遍历背包容量，分别遍历0和1，顺序可以颠倒</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m, x0 - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n, y1 - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                    dp[j][k] = <span class="built_in">max</span>(dp[j][k], dp[j - x0][k - y1] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday36动态规划part04&quot;&gt;LeetCodeCampsDay36动态规划part04&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;01背包，分割等和子集的变式题目&lt;/p&gt;
&lt;p&gt;416.分割等和子集是问：能否将背包装满到target值</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay35动态规划part03</title>
    <link href="https://blog.lthero.cn/2025/07/29/LeetCodeCampsDay35/"/>
    <id>https://blog.lthero.cn/2025/07/29/LeetCodeCampsDay35/</id>
    <published>2025-07-29T06:24:42.000Z</published>
    <updated>2025-07-29T13:50:15.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday35动态规划part03">LeetCodeCampsDay35动态规划part03</h1><blockquote><p>背包问题/01背包/一维dp数组与二维dp数组的执行区别</p></blockquote><h1 id="背包问题">背包问题</h1><p>背包问题可以分成01背包/完全背包/多重背包与分组背包；</p><p>不过搞定01背包与完全背包就可以了</p><p><img src="https://file1.kamacoder.com/i/algo/20210117171307407.png" alt="img"></p><h2 id="01背包">01背包</h2><p>有n件物品和一个最多能背重量为w 的背包。</p><p>第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p>这是标准的背包问题，以至于很多同学看了这个自然就会想到背包，甚至都不知道暴力的解法应该怎么解了。</p><p>这样其实是没有从底向上去思考，而是习惯性想到了背包，那么暴力的解法应该是怎么样的呢？</p><p>每一件物品其实只有两个状态，<code>取或者不取</code> ，所以可以使用<strong>回溯法搜索</strong>出所有的情况，那么时间复杂度就是O(2^n)，这里的n表示物品数量。</p><p><strong>所以暴力的解法是指数级别的时间复杂度。进而才需要动态规划的解法来进行优化！</strong></p><p>在下面的讲解中，我举一个例子：</p><p>背包最大重量为4。</p><p>物品为：</p><table><thead><tr><th></th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td></tr><tr><td>物品1</td><td>3</td><td>20</td></tr><tr><td>物品2</td><td>4</td><td>30</td></tr></tbody></table><p>问背包能背的物品最大价值是多少？</p><p>以下讲解和图示中出现的数字都是以这个例子为例。</p><p>（为了方便表述，下面描述 统一用 容量为XX的背包，放下容量（重量）为XX的物品，物品的价值是XX）</p><h3 id="二维数组01背包">二维数组01背包</h3><ol><li>先确定dp数组下标与数组含义</li></ol><p>因为我们需要同时表示 物品 &amp; 背包容量，所以dp[i][j]里的i表示物品i，而j表示当前背包容量为j，注意如果背包capacity为4，但dp数组的长度需要开到5，因为包含重量为0的情况</p><p><img src="https://file1.kamacoder.com/i/algo/20210110103003361.png" alt="img"></p><p>动态规划的思路是根据子问题的求解推导出整体的最优解</p><p>先把物品0放在背包里</p><p><img src="https://file1.kamacoder.com/i/algo/20240730113455.png" alt="img"></p><p>背包容量为0，放不下物品0，此时背包里的价值为0。</p><p>背包容量为1，可以放下物品0，此时背包里的价值为15.</p><p>背包容量为2，依然可以放下物品0 （注意 01背包里物品只有一个），此时背包里的价值为15。</p><p>以此类推。</p><p>再看把物品1 放入背包：</p><p><img src="https://file1.kamacoder.com/i/algo/20240730114228.png" alt="img"></p><p>背包容量为 0，放不下物品0 或者物品1，此时背包里的价值为0。</p><p>背包容量为 1，只能放下物品0，背包里的价值为15。</p><p>背包容量为 2，只能放下物品0，背包里的价值为15。</p><p>背包容量为 3，上一行同一状态，背包只能放物品0，这次也可以选择物品1了，背包可以放<code>物品1 </code> <strong>或者</strong> <code>物品0</code> ，物品1价值更大，背包里的价值为20</p><p>背包容量为 4，上一行同一状态，背包只能放物品0，这次也可以选择物品1了，背包可以放下<code>物品0</code> <strong>和</strong> <code>物品1</code> ，背包价值为35</p><ol start="2"><li>对于递推公式，首先我们要明确有哪些方向可以推导出 dp[i][j]。</li></ol><p>这里我们dp[1][4]的状态来举例：</p><p>求取 dp[1][4] 有两种情况：</p><ol><li>放物品1</li><li>还是不放物品1</li></ol><p>如果不放物品1， 那么背包的价值应该是 dp[0][4] 即 容量为4的背包，只放物品0的情况。</p><p><img src="https://file1.kamacoder.com/i/algo/20240730174246.png" alt="img"></p><p>如果放物品1， <strong>那么背包要先留出物品1的容量</strong>，目前容量是4，物品1 的容量（就是物品1的重量）为3，此时背包剩下容量为1。</p><p>容量为1，只考虑放物品0 的最大价值是 dp[0][1]，这个值我们之前就计算过。</p><p>所以 放物品1 的情况 = dp[0][1] + 物品1 的价值，推导方向如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20240730174436.png" alt="img"></p><p>两种情况，分别是放物品1 和 不放物品1，我们要取最大值（毕竟求的是最大价值）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[1][4] = max(dp[0][4], dp[0][1] + 物品1 的价值)</span><br></pre></td></tr></table></figure><p>以上过程，抽象化如下：</p><ul><li><strong>不放物品i</strong>：背包容量为j，里面不放物品i的最大价值是dp[i - 1][j]。</li><li><strong>放物品i</strong>：背包空出物品i的容量后，背包容量为j - weight[i]，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]且不放物品i的最大价值，那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值</li></ul><p>递归公式： <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code></p><ol start="3"><li>dp数组初始化</li></ol><p>首先从dp[i][j]的定义出发，如果背包容量j为0的话，即dp[i][0]，无论是选取哪些物品，背包价值总和一定为0。如图：</p><p><img src="https://file1.kamacoder.com/i/algo/2021011010304192.png" alt="img"></p><p>状态转移方程 <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code> 可以看出i 是由 i-1 推导出来，那么i为0的时候就一定要初始化。</p><p>dp[0][j]，即：i为0，存放编号0的物品的时候，各个容量的背包所能存放的最大价值。</p><p>那么很明显当 <code>j &lt; weight[0]</code>的时候，dp[0][j] 应该是 0，因为背包容量比编号0的物品重量还小。</p><p>当<code>j &gt;= weight[0]</code>时，dp[0][j] 应该是value[0]，因为背包容量放足够放编号0物品。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是正序遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = weight[<span class="number">0</span>]; j &lt;= bagweight; j++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://file1.kamacoder.com/i/algo/20210110103109140.png" alt="img"></p><p>而其实位置的dp数据初始化为什么都可以，因为它们会在计算时被直接覆盖掉，所以全部初始化为0</p><ol start="4"><li>遍历顺序</li></ol><p>明显有两个维度 ：物品个数 与 背包容量，我们先遍历物品个数再遍历背包容量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// weight数组的大小 就是物品个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://file1.kamacoder.com/i/algo/202101101032124.png" alt="img"></p><p>先遍历背包容量再物品个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// weight数组的大小 就是物品个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://file1.kamacoder.com/i/algo/20210110103244701.png" alt="img"></p><p>虽然两个for循环遍历的次序不同，但是dp[i][j]所需要的数据就是左上角，根本不影响dp[i][j]公式的推导！</p><p>但先遍历物品再遍历背包这个顺序更好理解。</p><p><strong>其实背包问题里，两个for循环的先后循序是非常有讲究的，理解遍历顺序其实比理解推导公式难多了</strong>。</p><ol start="5"><li>举例推导dp数组</li></ol><p>这里在把基本信息给出来：</p><table><thead><tr><th></th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td></tr><tr><td>物品1</td><td>3</td><td>20</td></tr><tr><td>物品2</td><td>4</td><td>30</td></tr></tbody></table><p><img src="https://file1.kamacoder.com/i/algo/20210118163425129.jpg" alt="img"></p><p>从物品1开始遍历，背包容量从0开始遍历</p><p>0&lt;weight[1]: dp[1][0] = dp[0][0] = 15</p><p>1&lt;weight[1]: dp[1][1] = dp[0][1] = 15</p><p>2&lt;weight[1]: dp[1][2] = dp[0][2] = 15</p><p>3&gt;=weight[1]: dp[1][3] = max(dp[0][3], dp[0][3 - weight[1]] + val[1]) = 20</p><p>4&gt;=weight[1]: dp[1][4] = max(dp[0][4], dp[0][4 - weight[1]] + val[1]) = 35</p><p>再遍历物品2，仍然从容量0开始遍历</p><h3 id="一维数组01背包">一维数组01背包</h3><p>递推公式如下：<code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + val[i])</code></p><p>可见dp每次会用到上一个物品dp[i-1]的值，而我们完全可以用一个一维数组，表示每个物品在不同背包容量下的最大价值；</p><p><code>dp[j] = max(dp[j], dp[j - weight[i]] + val[i])</code></p><p>max里的的dp[j]和dp[j - weight[i]] 其实是上一个物品i的值，新一个物品i+1的值是最左边的dp[j]</p><blockquote><p>一维数组遍历时与二维数组不同</p></blockquote><p>一维dp数组遍历顺序代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里大家发现和二维dp的写法中，遍历背包的顺序是不一样的！</strong></p><p>二维dp遍历的时候，背包容量是从小到大，而一维dp遍历的时候，背包是从大到小。</p><p>为什么呢？</p><p><strong>倒序遍历是为了保证物品i只被放入一次！</strong>。但如果一旦正序遍历了，那么物品0就会被重复加入多次！</p><p>举一个例子：物品0的重量weight[0] = 1，价值value[0] = 15</p><p>如果正序遍历</p><p>dp[1] = max(dp[1 - weight[0]] + value[0], dp[1]) = 15</p><p>dp[2] = max(dp[2 - weight[0]] + value[0], dp[2]) = 30（因为value[0]=15,而dp[2 - weight[0]]=15）</p><p>比如下表是在计算dp[2]时的情况</p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>物品0</td><td>0</td><td><code>0</code></td><td>0</td><td>0</td><td>0</td></tr><tr><td>物品1</td><td>0</td><td>15</td><td></td><td></td><td></td></tr></tbody></table><p>在计算dp[2]时，max(dp[2 - weight[0]] + value[0], dp[2]) 里 dp[2 - weight[0]]的本意是拿(物品0, 下标1)的值<code>0</code>，但由于现在是一维数组，所以dp[2 - weight[0]]就成了（物品1，下标1）的值<code>15</code>，由于value[0]也是15，所以dp[2]得到了<code>30</code></p><p>此时dp[2]就已经是30了，<code>意味着物品0，被放入了两次</code>，所以不能正序遍历。</p><p>为什么倒序遍历，就可以保证物品只放入一次呢？</p><p>倒序就是先算dp[2]</p><p>dp[2] = max(dp[2 - weight[0]] + value[0], dp[2]) = 15 （dp数组已经都初始化为0，这里的dp[2]为0，且dp[2-1]也为0）</p><p>dp[1] = max(dp[1 - weight[0]] + value[0], dp[1]) = 15</p><p>所以从后往前循环，每次取得状态不会和之前取得状态重合，这样每种物品就只取一次了。</p><blockquote><p><strong>那么问题又来了，为什么二维dp数组遍历的时候不用倒序呢？</strong></p></blockquote><p>因为对于二维dp，dp[i][j]都是<code>通过上一层即dp[i - 1][j]计算而来，本层的dp[i][j]并不会被覆盖！</code>（看刚刚的table例子）</p><p>（如何这里读不懂，大家就要动手试一试了，空想还是不靠谱的，实践出真知！）</p><p><strong>再来看看两个嵌套for循环的顺序，代码中是先遍历物品嵌套遍历背包容量，那可不可以先遍历背包容量嵌套遍历物品呢？</strong></p><p>不可以！</p><p>因为一维dp的写法，背包容量一定是要倒序遍历（原因上面已经讲了），如果遍历背包容量放在上一层，那么每个dp[j]就只会放入一个物品，即：背包里只放入了一个物品。</p><p><strong>所以一维dp数组的背包在遍历顺序上和二维其实是有很大差异的！</strong>，这一点大家一定要注意。</p><h1 id="携带研究材料-第六期模拟笔试">携带研究材料（第六期模拟笔试）</h1><p>题目描述</p><p>小明是一位科学家，他需要参加一场重要的国际科学大会，以展示自己的最新研究成果。他需要带一些研究材料，但是他的行李箱空间有限。这些研究材料包括实验设备、文献资料和实验样本等等，它们各自占据不同的空间，并且具有不同的价值。</p><p>小明的行李空间为 N，问小明应该如何抉择，才能携带最大价值的研究材料，每种研究材料只能选择一次，并且只有选与不选两种选择，不能进行切割。</p><p>输入描述</p><p>第一行包含两个正整数，第一个整数 M 代表研究材料的种类，第二个正整数 N，代表小明的行李空间。</p><p>第二行包含 M 个正整数，代表每种研究材料的所占空间。</p><p>第三行包含 M 个正整数，代表每种研究材料的价值。</p><p>输出描述</p><p>输出一个整数，代表小明能够携带的研究材料的最大价值。</p><p>输入示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6 1</span><br><span class="line">2 2 3 1 5 2</span><br><span class="line">2 3 1 5 4 3</span><br></pre></td></tr></table></figure><p>输出示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>提示信息</p><p>小明能够携带 6 种研究材料，但是行李空间只有 1，而占用空间为 1 的研究材料价值为 5，所以最终答案输出 5。</p><p>数据范围：<br>1 &lt;= N &lt;= 5000<br>1 &lt;= M &lt;= 5000<br>研究材料占用空间和价值都小于等于 1000</p><h2 id="动态规划思路">动态规划思路</h2><p>dp数组创建，创建个二维背包（简单直观）</p><p>dp下标与含义：dp[i][j]表示物品i以及dp容量j时的背包价值</p><p>递推公式分成放物品i与不放物品i两种情况</p><p>如果不放物品i,则dp[i][j] = dp[i - 1][j]</p><p>如果放物品i， 则dp[i][j] = dp[i - 1][j - weight] + val[i]</p><p>递推公式：dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + val[i])</p><p>dp初始化，dp[i][0]全部为0，遍历dp[0][j]，如果j大于等于weight[0]则赋值为val[0]</p><p>遍历顺序，行遍历对物品，列遍历对背包容量</p><h2 id="二维dp动态规划代码">二维dp动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calMaxVal</span>(<span class="params">self, n: <span class="built_in">int</span>, capacity: <span class="built_in">int</span>, weight: <span class="built_in">list</span>, val: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 注意背包容量从0开始到capacity(闭区间)，所以个数为capacity+1</span></span><br><span class="line">        dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化第一个物品</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(weight[<span class="number">0</span>], capacity + <span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = val[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(capacity + <span class="number">1</span>):</span><br><span class="line">                <span class="comment"># 如果j装不下，直接继续上一物品此时的背包状态</span></span><br><span class="line">                <span class="keyword">if</span> j &lt; weight[i]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="comment"># 如果j能装下</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + val[i])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][capacity]</span><br><span class="line"></span><br><span class="line">n, capacity = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">weight = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">val = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line"></span><br><span class="line">s = solution()</span><br><span class="line">res = s.calMaxVal(n, capacity, weight, val)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="一维dp动态规划代码">一维dp动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution2</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calMaxVal</span>(<span class="params">self, n: <span class="built_in">int</span>, capacity: <span class="built_in">int</span>, weight: <span class="built_in">list</span>, val: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># dp用一维就行，长度是capacity</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (capacity + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 行遍历与列遍历</span></span><br><span class="line">        <span class="comment"># 行遍历物品</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="comment"># 一维dp要倒序遍历，为了避免 数据污染。</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(capacity, weight[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= weight[i]:</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + val[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[capacity]</span><br><span class="line"></span><br><span class="line">n, capacity = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">weight = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">val = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line"></span><br><span class="line">s2 = solution2()</span><br><span class="line">res2 = s2.calMaxVal(n, capacity, weight, val)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure><h1 id="416-分割等和子集">416. 分割等和子集</h1><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">https://leetcode.cn/problems/partition-equal-subset-sum/</a></p><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,5,11,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：数组可以分割成 [1, 5, 5] 和 [11] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,5]</span><br><span class="line">输出：false</span><br><span class="line">解释：数组不能分割成两个元素和相等的子集。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="动态划分思路">动态划分思路</h2><p>将这个问题抽象成动态规划问题，target看作背包容量，而nums[i]既是重量也是价值</p><p>问题转换：<code>一共n个物品，每个物品选择一个，背包容量为target，能否让总价值也为target（即dp[target] == target）</code> ，其中，target为列表和的一半</p><ol><li><p>dp数组下标与含义：创建一维数组，下标i是weight（也是数字本身），dp[i]值表示当前背包总价值；dp长度： <strong>背包容量为target + 1即可</strong></p></li><li><p>递推公式：倒序遍历，并且dp[j]大于nums[i]，此时dp[j] = max(dp[j], dp[j - nums[i]]+nums[i])</p></li><li><p>初始化：全部为零</p></li><li><p>遍历顺序：物品（nums[i]）顺序遍历；而对于每个背包容量从target倒序遍历，一直到nums[i]（闭区间）</p></li><li><p>举例</p></li><li><p>nums[1, 5, 11, 5]</p></li><li><p>target = 11</p></li><li><p>dp[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p></li><li></li><li><p><strong>i = 0, nums[0]=1, j = 11</strong></p></li><li><p>dp[11] = max[dp[11], dp[11 - 1] + 1] = 1</p></li><li><p>dp[10] = max[dp[10], dp[10 - 1] + 1] = 1</p></li><li><p>…</p></li><li><p>dp[1] = max[dp[1], dp[1 - 1] + 1] = 1</p></li><li><p>dp[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p></li><li></li><li><p><strong>i = 1, nums[1]=5, j = 11</strong></p></li><li><p>dp[11] = max[dp[11], dp[11 - 5] + 5] = 6</p></li><li><p>dp[10] = max[dp[10], dp[10 - 5] + 5] = 6</p></li><li><p>…</p></li><li><p>dp[5] = max[dp[5], dp[5 - 5] + 5] = 6</p></li><li><p>[0, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6, 6]</p></li><li></li><li><p><strong>i = 2, nums[2]=11, j = 11</strong></p></li><li><p>dp[11] = max[dp[11], dp[11 - 11] + 11] = 11</p></li><li><p>[0, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6, 11]</p></li><li></li><li><p><strong>i = 3, nums[3]=5, j=11</strong></p></li><li><p>dp[11] = max[dp[11], dp[11 - 5] + 5] = max(11, dp[6] + 5) = 11</p></li><li><p>dp[10] = max[dp[10], dp[10 - 5] + 5] = max(6, dp[5] + 5) = 10</p></li><li><p>dp[9] = max[dp[9], dp[9 - 5] + 5] = max(6, dp[4] + 5) = 6</p></li><li><p>…</p></li><li><p>[0, 1, 1, 1, 1, 5, 6, 6, 6, 6, 10, 11]</p></li></ol><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">canPartition</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        self.sumOfnums = <span class="built_in">sum</span>(nums)</span><br><span class="line">        self.LOfnums = <span class="built_in">len</span>(nums)</span><br><span class="line">        self.nums = nums</span><br><span class="line">        <span class="keyword">if</span> self.sumOfnums % <span class="number">2</span> != <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.target = self.sumOfnums // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 动态规划</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (self.target + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.target, nums[i] - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - nums[i]]+nums[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> dp[self.target] == self.target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="递归思路">递归思路</h2><p>本题目要求将数组分成两个子集，对于任意一个元素，要么在子集A，要么在子集B中</p><p>所以，如果暴力枚举出所有子集，判断两个子集和是否相等（直接判断当前子集和是否等于sum(nums)//2）</p><p>因为每个元素只有“被选中到子集A”和不被选择到子集A；而剩下的元素则可以看到一个子问题，可以考虑使用递归求解</p><p><strong>定义</strong> dfs(i,sum) 表示处理前 i 个元素后的总和为 sum，当前正在抉择第 i 个元素，判断能否凑成目标 target</p><p>第 i 个元素只有 “选或不选” 两种可能，<strong>状态转移</strong> 方程为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>∨</mo><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dfs(i,sum)=dfs(i+1,sum+nums[i]) \lor dfs(i+1,sum)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><p><strong>递归边界</strong>： i == n表示处理完所有元素，返回失败；或者 sum=target 表示当前子集符合目标，返回成功。</p><p><strong>递归入口</strong>： dfs(0,0)，表示从下标 0 开始搜索，目前总和为 0</p><p>注意，这里使用了@cache装饰器，避免重复搜索，降低时间复杂度。递归的参数只有两个，所以记忆化数组需要两维。</p><blockquote><p>@cache 的作用</p></blockquote><p>备忘录化机制：@cache 会自动为函数的参数组合缓存结果。例如，dfs 函数的参数是 (index, currentSum)，每次调用 dfs(index, currentSum) 时，如果这个参数组合之前已经计算过，结果会直接从缓存中取出，而不会重新执行函数体。</p><p>为什么需要它？ 在递归过程中，可能会多次遇到相同的状态。例如：</p><p>假设数组是 [1, 2, 3]，在不同分支中，可能会多次调用 dfs(2, 3)（即在索引 2 时，当前和为 3）。</p><p>如果不缓存，这些重复的调用会独立计算，导致时间复杂度从 O(1) 或 O(2^n) 级别的子问题中浪费大量时间。</p><p>使用 @cache 后，这些重复状态只计算一次，后续直接返回结果。</p><p>效率提升：这个问题的原始递归复杂度是 O(2^n)，因为有 n 个元素，每个元素两个选择。但通过 @cache，函数会将重叠子问题（overlapping subproblems）缓存起来，实际时间复杂度会降低到接近 O(n * target)，这取决于数组的大小和目标和的大小。更高效，避免了不必要的递归调用。</p><h2 id="递归代码">递归代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">canPartition</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">      self.sumOfnums = <span class="built_in">sum</span>(nums)</span><br><span class="line">      self.LOfnums = <span class="built_in">len</span>(nums)</span><br><span class="line">      self.nums = nums</span><br><span class="line">      <span class="keyword">if</span> self.sumOfnums % <span class="number">2</span> != <span class="number">0</span> :</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      self.target = self.sumOfnums // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @cache</span></span><br><span class="line">      <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">index, currentSum</span>):</span><br><span class="line">          <span class="keyword">if</span> currentSum == self.target:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">          <span class="keyword">if</span> index == self.LOfnums:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">          <span class="comment"># 每个数字都有选或不选两种情况</span></span><br><span class="line">          <span class="keyword">return</span> (dfs(index + <span class="number">1</span>, currentSum + nums[index]) <span class="keyword">or</span> dfs(index + <span class="number">1</span>, currentSum))</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="额外题目">额外题目</h1><h1 id="21-合并两个有序链表">21. 合并两个有序链表</h1><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">https://leetcode.cn/problems/merge-two-sorted-lists/</a></p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><h2 id="思路">思路</h2><p>如果使用新空间head，如果list1和list2（指两个具体节点）不为空，则比较两者的值并将较小的值放在head里，并移动较小值所在的链表</p><p>最后再判断如果list1或list2不为空，则将list1或list2接到head里</p><h2 id="链表代码">链表代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># 双指针</span></span><br><span class="line">        <span class="comment"># 如果需要原地添加（不使用新空间的话，稍微麻烦一点儿）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用新空间</span></span><br><span class="line">        head = ListNode()</span><br><span class="line">        p = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt; list2.val:</span><br><span class="line">                p.<span class="built_in">next</span> = list1</span><br><span class="line">                list1 = list1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.<span class="built_in">next</span> = list2</span><br><span class="line">                list2 = list2.<span class="built_in">next</span></span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            p.<span class="built_in">next</span> = list1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.<span class="built_in">next</span> = list2</span><br><span class="line">        <span class="keyword">return</span> head.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h1 id="228-汇总区间">228. 汇总区间</h1><p><a href="https://leetcode.cn/problems/summary-ranges/">https://leetcode.cn/problems/summary-ranges/</a></p><p>给定一个  <strong>无重复元素</strong> 的 <strong>有序</strong> 整数数组 <code>nums</code> 。</p><p>区间 <code>[a,b]</code> 是从 <code>a</code> 到 <code>b</code>（包含）的所有整数的集合。</p><p>返回 <em><strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表</em> 。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个区间但不属于 <code>nums</code> 的数字 <code>x</code> 。</p><p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p><ul><li><code>&quot;a-&gt;b&quot;</code> ，如果 <code>a != b</code></li><li><code>&quot;a&quot;</code> ，如果 <code>a == b</code></li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,4,5,7]</span><br><span class="line">输出：[&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]</span><br><span class="line">解释：区间范围是：</span><br><span class="line">[0,2] --&gt; &quot;0-&gt;2&quot;</span><br><span class="line">[4,5] --&gt; &quot;4-&gt;5&quot;</span><br><span class="line">[7,7] --&gt; &quot;7&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,2,3,4,6,8,9]</span><br><span class="line">输出：[&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]</span><br><span class="line">解释：区间范围是：</span><br><span class="line">[0,0] --&gt; &quot;0&quot;</span><br><span class="line">[2,4] --&gt; &quot;2-&gt;4&quot;</span><br><span class="line">[6,6] --&gt; &quot;6&quot;</span><br><span class="line">[8,9] --&gt; &quot;8-&gt;9&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 20</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li><code>nums</code> 中的所有值都 <strong>互不相同</strong></li><li><code>nums</code> 按升序排列</li></ul><h2 id="思路">思路</h2><ol><li>从数组下标0开始向右遍历，如果相邻元素之间差值大于1，则找到了一个区间</li><li>遍历过程中，slow指向区间起点，fast指向区间终点；当找到一个区间时，再分情况将字符串添加到res<ol><li>先创建个temp=str(nums[slow])</li><li>如果nums[slow] != nums[fast]，则再将temp += “-&gt;” + str(nums[fast])</li></ol></li></ol><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summaryRanges</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="comment"># 用双指针</span></span><br><span class="line">        <span class="comment"># 先动快指针，若fast +1 != i则将slow~fast添加到结果</span></span><br><span class="line">        <span class="comment"># slow = 0</span></span><br><span class="line">        <span class="comment"># fast = 0</span></span><br><span class="line">        <span class="comment"># if len(nums) == 0:</span></span><br><span class="line">        <span class="comment">#     return []</span></span><br><span class="line">        <span class="comment"># # 复制一个值，填充结尾</span></span><br><span class="line">        <span class="comment"># nums.append(nums[-1])</span></span><br><span class="line">        <span class="comment"># L = len(nums)</span></span><br><span class="line">        <span class="comment"># if L == 1:</span></span><br><span class="line">        <span class="comment">#     return [str(nums[0])]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># res = list()</span></span><br><span class="line">        <span class="comment"># def foo(slow, fast, res):</span></span><br><span class="line">        <span class="comment">#     if nums[slow] == nums[fast]:</span></span><br><span class="line">        <span class="comment">#         res.append(str(nums[slow]))</span></span><br><span class="line">        <span class="comment">#     else:</span></span><br><span class="line">        <span class="comment">#         res.append(str(nums[slow]) + &quot;-&gt;&quot; + str(nums[fast]) )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># for i in range(1, L):</span></span><br><span class="line">        <span class="comment">#     if nums[i] != nums[fast] + 1:</span></span><br><span class="line">        <span class="comment">#         foo(slow, fast, res)</span></span><br><span class="line">        <span class="comment">#         slow = i</span></span><br><span class="line">        <span class="comment">#     fast = i</span></span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        i = <span class="number">0</span> </span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> i &lt; L:</span><br><span class="line">            slow = i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; L <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            fast = i - <span class="number">1</span></span><br><span class="line">            temp = <span class="built_in">str</span>(nums[slow])</span><br><span class="line">            <span class="keyword">if</span> nums[slow] != nums[fast]:</span><br><span class="line">                temp += <span class="string">&quot;-&gt;&quot;</span> + <span class="built_in">str</span>(nums[fast])</span><br><span class="line">            res.append(temp)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday35动态规划part03&quot;&gt;LeetCodeCampsDay35动态规划part03&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;背包问题/01背包/一维dp数组与二维dp数组的执行区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay34动态规划part02</title>
    <link href="https://blog.lthero.cn/2025/07/28/LeetCodeCampsDay34/"/>
    <id>https://blog.lthero.cn/2025/07/28/LeetCodeCampsDay34/</id>
    <published>2025-07-28T03:43:53.000Z</published>
    <updated>2025-07-28T11:25:01.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday34动态规划part02">LeetCodeCampsDay34动态规划part02</h1><blockquote></blockquote><h1 id="62-不同路径">62. 不同路径</h1><p><a href="https://leetcode.cn/problems/unique-paths/">https://leetcode.cn/problems/unique-paths/</a></p><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例 1：</strong></p><p><img src="https://pic.leetcode.cn/1697422740-adxmsI-image.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向下</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 7, n = 3</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 100</code></li><li>题目数据保证答案小于等于 <code>2 * 109</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>dp下标与数组含义: 一维数组即可，下标指地图下标，数组含意到达当前位置的路径数</p><p>递推公式：当前位置的路径数dp[i]=dp[i](上一行的）+dp[i-1]</p><p>初始化：全初始化为1</p><p>遍历顺序，从下标(1,1)开始遍历，到n-1结束，输出dp[n-1]，<strong>跳过第一行和第一列</strong></p><p>1,1,1,1,1,1,1</p><p>1,2,3,4,5,6,7</p><p>1,3,6,10,15,21,28</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">1</span>] * n</span><br><span class="line">        <span class="comment"># 跳过第一行和第一列</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                dp[i] += dp[i-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="63-不同路径-ii">63. 不同路径 II</h1><p><a href="https://leetcode.cn/problems/unique-paths-ii/">https://leetcode.cn/problems/unique-paths-ii/</a></p><p>给定一个 <code>m x n</code> 的整数数组 <code>grid</code>。一个机器人初始位于 <strong>左上角</strong>（即 <code>grid[0][0]</code>）。机器人尝试移动到 <strong>右下角</strong>（即 <code>grid[m - 1][n - 1]</code>）。机器人每次只能向下或者向右移动一步。</p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。机器人的移动路径中不能包含 <strong>任何</strong> 有障碍物的方格。</p><p>返回机器人能够到达右下角的不同路径数量。</p><p>测试用例保证答案小于等于 <code>2 * 109</code>。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：3x3 网格的正中间有一个障碍物。</span><br><span class="line">从左上角到右下角一共有 2 条不同的路径：</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：obstacleGrid = [[0,1],[0,0]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == obstacleGrid.length</code></li><li><code>n == obstacleGrid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>obstacleGrid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>dp下标与含义, dp一维数组，下标是地图下标；含义当前位置的路径数</p><p>递推公式：如果当前位置可到达，则dp[i]=dp[i]+dp[i-1]，不可到达则为0</p><p>dp初始化，按顺序初始化，如果遇到obstacle就停止初始化</p><p>遍历顺序，跳过第一行、每列从0遍历到n-1</p><p>obstacle</p><p>1,1,1,x,1,1</p><p>1,1,x,1,1,1</p><p>1,1,1,1,1,1</p><p>下面是dp</p><p>1,1,1,0,0,0</p><p>1,2,0,0,0,0</p><p>1,3,3,3,3,3</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePathsWithObstacles</span>(<span class="params">self, obstacleGrid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        Lrows = <span class="built_in">len</span>(obstacleGrid)</span><br><span class="line">        Lcols = <span class="built_in">len</span>(obstacleGrid[<span class="number">0</span>])</span><br><span class="line">        dp = [<span class="number">0</span>] * Lcols</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Lcols):</span><br><span class="line">            <span class="keyword">if</span> obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            dp[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, Lrows):</span><br><span class="line">            <span class="comment"># 每列从0开始</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Lcols):</span><br><span class="line">                <span class="keyword">if</span> obstacleGrid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    dp[j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> j != <span class="number">0</span> :</span><br><span class="line">                    dp[j] += dp[j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[Lcols - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="343-整数拆分">343. 整数拆分</h1><p><a href="https://leetcode.cn/problems/integer-break/">https://leetcode.cn/problems/integer-break/</a></p><p>给定一个正整数 <code>n</code> ，将其拆分为 <code>k</code> 个 <strong>正整数</strong> 的和（ <code>k &gt;= 2</code> ），并使这些整数的乘积最大化。</p><p>返回 <em>你可以获得的最大乘积</em> 。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>2 &lt;= n &lt;= 58</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><ol><li>dp数组下标是数字i，dp[i]是数字i的最大乘积</li></ol><p>dp[i]：分拆数字i，可以得到的最大乘积为dp[i]。</p><p>dp[i]的定义将贯彻整个解题过程，下面哪一步想不懂了，就想想dp[i]究竟表示的是啥！</p><p>将数字i拆分成(i-j)和j两个部分，其中j \in (1, i-1)，或者j和dp[i-j]三及个以上部分，分成这两种情况，判断两种情况的最大值，即max((i -j ) * j, dp[i - j] * j)</p><ol start="2"><li><p>递推公式：dp[i] = max(dp[i], max((i -j ) * j, dp[i - j] * j)) ，因为每次都需要让max((i -j ) * j, dp[i - j] * j)再和dp[i]比较，找到最大值</p></li><li><p>初始化：dp[0]和dp[1]不用初始化（因为没有意义），或者直接初始化为1也可以通过,其它的全部初始化为1</p></li><li><p>遍历顺序：i从2到n, j从1到i-1</p></li><li><p>dp举例：<br>n = 10<br>i=2, j=1, dp[2] = max(dp[2], max(1*1, 1*dp[1])) ,dp[2] = 1<br>i=3, j=1, dp[3] = max(dp[3], max(1*2, 1*dp[2])) ,dp[3] = 2<br>i=3, j=2, dp[3] = max(dp[3], max(2*1, 2*dp[1])) ,dp[3] = 2<br>i=4, j=1, dp[4] = max(dp[4], max(1*3, 1*dp[3])), dp[4] = 3<br>i=4, j=2, dp[4] = max(dp[4], max(2*2, 2*dp[2])), dp[4] = 4<br>i=4, j=3, dp[4] = max(dp[4], max(3*1, 3*dp[1])), dp[4] = 4<br>i=5, j=1, dp[5] = max(dp[5], max(1*4, 1*dp[4])), dp[5] = 4<br>i=5, j=2, dp[5] = max(dp[5], max(2*3, 2*dp[3])), dp[5] = 6</p></li></ol><p>因为拆分一个数n 使之乘积最大，那么一定是拆分成m个近似相同的子数相乘才是最大的。</p><p>例如 6 拆成 3 * 3， 10 拆成 3 * 3 * 4。 100的话 也是拆成m个近似数组的子数 相乘才是最大的。</p><p>只不过我们不知道m究竟是多少而已，但可以明确的是m一定大于等于2，既然m大于等于2，也就是 最差也应该是拆成两个相同的 可能是最大值。</p><p>那么 j 遍历，只需要遍历到 n//2（包含） 就可以，后面就没有必要遍历了，一定不是最大值。</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">integerBreak</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">       <span class="comment"># 因为包含了0所以是n+1</span></span><br><span class="line">        dp = [<span class="number">1</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">          <span class="comment"># 不优化则是1, i；优化则是1, i//2 + 1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i//<span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>(j * (i - j), j * dp[i - j]))</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="96-不同的二叉搜索树">96. 不同的二叉搜索树</h1><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">https://leetcode.cn/problems/unique-binary-search-trees/</a></p><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 19</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>dp数组下标是整数i， dp[i]表示有dp[i]个不同的二叉搜索树</p><p>递推公式，若n=3, 有三种情况，root=1, 左子树有0节点，右子树有2个节点；root=2, 左子树有1节点，右子树有1节点；root=3，左子树有2节点，右子树0节点</p><p><img src="https://file1.kamacoder.com/i/algo/20210107093106367.png" alt="img"></p><p><img src="https://file1.kamacoder.com/i/algo/20210107093129889.png" alt="img"></p><p>dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0]</p><p><img src="https://file1.kamacoder.com/i/algo/20210107093226241.png" alt="img"></p><p>dp[i] = dp[i] + dp[j-1](左子树) * dp[i-j]（右子树），其中j为root</p><p>初始化，dp[0]=1, dp[1]=1</p><p>遍历顺序，行遍历, i从2到n；列遍历，j从0到i-1，j表示左子树的数量</p><p>举例如上</p><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numTrees</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                dp[i] = dp[i] + dp[j] * dp[i - j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="额外题目">额外题目</h1><h1 id="11-盛最多水的容器">11. 盛最多水的容器</h1><p><a href="https://leetcode.cn/problems/container-with-most-water/">https://leetcode.cn/problems/container-with-most-water/</a></p><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>**说明：**你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= height[i] &lt;= 104</code></li></ul><h2 id="双指针思路">双指针思路</h2><p>观察得知，区间的面积=底宽*两端最小高度</p><p>左指针从左向右，右指针反向；判断两个指针所在高度，并移动低高度的指针</p><h2 id="双指针代码">双指针代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 双指针</span></span><br><span class="line">        lP = <span class="number">0</span></span><br><span class="line">        rP = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> lP &lt; rP:</span><br><span class="line">            <span class="keyword">if</span> height[lP] &lt; height[rP]:</span><br><span class="line">                res = <span class="built_in">max</span>(res, (rP - lP) * height[lP])</span><br><span class="line">                lP += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = <span class="built_in">max</span>(res, (rP - lP) * height[rP])</span><br><span class="line">                rP -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="167-两数之和-ii-输入有序数组">167. 两数之和 II - 输入有序数组</h1><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/</a></p><p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,7,11,15], target = 9</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,3,4], target = 6</span><br><span class="line">输出：[1,3]</span><br><span class="line">解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [-1,0], target = -1</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h2 id="双指针思路">双指针思路</h2><p>本题目已经排序好了，可以直接双指针，一个指针从左向右；另一从右向左；</p><p>如果现指针之和大于target，右指针向左；如果小于target，左指针向右；直到相等</p><h2 id="双指针代码">双指针代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)—前提是有序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 用hashtable或者双指针</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        lP = <span class="number">0</span></span><br><span class="line">        rP = <span class="built_in">len</span>(numbers) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lP &lt; rP:</span><br><span class="line">            <span class="keyword">if</span> numbers[lP] + numbers[rP] &lt; target:</span><br><span class="line">                lP += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> numbers[lP] + numbers[rP] &gt; target:</span><br><span class="line">                rP -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> lP + <span class="number">1</span>, rP + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="hash思路">hash思路</h2><p>可以只遍历一遍，但借用hashtable，将target - nums[i]装到table里,并每次遍历时在nums里找是否已经出现在table里，是则找到了两个值</p><h2 id="hash代码">hash代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 用hashtable或者双指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果用hashtable，</span></span><br><span class="line">        table = <span class="built_in">dict</span>()</span><br><span class="line">        L = <span class="built_in">len</span>(numbers)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">if</span> numbers[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table[target - numbers[i]] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> table[numbers[i]] + <span class="number">1</span>, i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h1 id="3-无重复字符的最长子串">3. 无重复字符的最长子串</h1><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">https://leetcode.cn/problems/longest-substring-without-repeating-characters/</a></p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="双指针结合hash思路">双指针结合hash思路</h2><p>建立一个hashtable记录出现的字符所在下标，如果遇到了个重复的字符s[i]，那么新的子串开始位置一定是从table[s[i]] + 1开始</p><p>如果没遇到重复的，则将table[s[i]]设置为下标i，并且更新最长子段长度</p><p>注意：<code>新的子串开始位置一定是从table[s[i]] + 1开始</code> 那旧的子串在table里的值是否需要被删除？</p><p>答：<strong>不需要真的去删除它</strong>，但需要在判断时，添加一个条件<code>table[s[right]] &gt;= left</code>，注意这里的left是子串开始的下标</p><h2 id="双指针结合hash代码">双指针结合hash代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(min(n, m))，m是字符集大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 如果遇到重复，从子串中重复字母的下一个开始作为新子串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用hashtable</span></span><br><span class="line">        table = <span class="built_in">dict</span>()</span><br><span class="line">        L = <span class="built_in">len</span>(s)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="comment"># 遇到重复</span></span><br><span class="line">            <span class="keyword">if</span> s[right] <span class="keyword">in</span> table <span class="keyword">and</span> table[s[right]] &gt;= left:</span><br><span class="line">                left = table[s[right]] + <span class="number">1</span></span><br><span class="line">            table[s[right]] = right</span><br><span class="line">            res = <span class="built_in">max</span>(res,  right - left + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday34动态规划part02&quot;&gt;LeetCodeCampsDay34动态规划part02&lt;/h1&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;62-不同路径&quot;&gt;62. 不同路径&lt;/h1&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay32动态规划paro01</title>
    <link href="https://blog.lthero.cn/2025/07/26/LeetCodeCampsDay32/"/>
    <id>https://blog.lthero.cn/2025/07/26/LeetCodeCampsDay32/</id>
    <published>2025-07-26T07:02:31.000Z</published>
    <updated>2025-07-26T07:25:05.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday32动态规划paro01">LeetCodeCampsDay32动态规划paro01</h1><blockquote><p>动态规划基础</p></blockquote><h1 id="动态规划基础">动态规划基础</h1><h3 id="什么是动态规划">什么是动态规划</h3><p>在<a href="https://programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">关于贪心算法，你该了解这些！ (opens new window)</a>中我举了一个背包问题的例子。</p><p>例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p>动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。</p><p>但如果是贪心呢，每次拿物品选一个最大的或者最小的就完事了，和上一个状态没有关系。</p><p>所以贪心解决不了动态规划的问题。</p><p><strong>其实大家也不用死扣动规和贪心的理论区别，后面做做题目自然就知道了</strong>。</p><p>而且很多讲解动态规划的文章都会讲最优子结构啊和重叠子问题啊这些，这些东西都是教科书的上定义，晦涩难懂而且不实用。</p><p>大家知道动规是由前一个状态推导出来的，而贪心是局部直接选最优的，对于刷题来说就够用了。</p><h3 id="动态规划的解题步骤">动态规划的解题步骤</h3><ol><li>确定dp数组以及下标的含义</li><li>研究递推公式</li><li>dp数组如何初始化</li><li>研究遍历顺序（开始下标，结束下标）</li><li>举例推导dp数组</li></ol><p>注意，递推公式决定了如何初始化dp数组</p><h3 id="动态规划debug">动态规划debug</h3><p>打印dp数组！</p><p>打印dp数组！</p><p>打印dp数组！</p><p>按递推公式检查dp数组初始化是否正确、以及dp的结果哪儿出错了，<strong>要和模拟推导一致！</strong></p><p>出错可能：<code>递归公式、初始化、遍历顺序</code></p><h1 id="509-斐波那契数">509. 斐波那契数</h1><p><a href="https://leetcode.cn/problems/fibonacci-number/">https://leetcode.cn/problems/fibonacci-number/</a></p><p><strong>斐波那契数</strong> （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 0，F(1) = 1</span><br><span class="line">F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span><br></pre></td></tr></table></figure><p>给定 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) = F(1) + F(0) = 1 + 0 = 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：2</span><br><span class="line">解释：F(3) = F(2) + F(1) = 1 + 1 = 2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：3</span><br><span class="line">解释：F(4) = F(3) + F(2) = 2 + 1 = 3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><p>题目比较基础，并且已经给出了递归公式<code>F(n) = F(n - 1) + F(n - 2)</code></p><p>那么按动态规划的步骤来</p><ol><li>确定dp数组以及下标含义：dp下标为输入i, dp数组的值为对应的斐波那契数数字</li><li>递推公式题目已经给了</li><li>dp数组初始化：dp[0]和dp[1]题目已经给了,其它值需要动态添加（默认全为0）</li><li>遍历顺序：从下标2开始，一直到下标n（注意是下标n）而不是n-1</li><li>推导举例：dp[0]=0, dp[1]=1, dp[2] = dp[0] + dp[1] = 1, dp[3] = dp[1] + dp[2] = 2; dp[4] = dp[2] + dp[3] = 3…</li></ol><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            dp.append(dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h1 id="70-爬楼梯">70. 爬楼梯</h1><p><a href="https://leetcode.cn/problems/climbing-stairs/">https://leetcode.cn/problems/climbing-stairs/</a></p><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><ol><li>dp数组以及下标含义：下标是第i阶；dp数组值为到达第i阶有dp[i]种方法</li><li>递推公式，对于第i阶来说，只有从第i-2或第i-1台阶爬上来，所以到第i阶的方法数dp[i] = dp[i - 1] + dp[i - 2]</li><li>dp初始化：dp[0]=1, dp[1]=2</li><li>dp遍历顺序：从i=2开始遍历，遍历到n-1，最终返回n-1</li><li>举例推导</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">1</span>, res=<span class="number">1</span></span><br><span class="line">n=<span class="number">2</span>, res=<span class="number">2</span></span><br><span class="line">n=<span class="number">3</span>(<span class="number">1</span>+n=<span class="number">2</span>, <span class="number">2</span>+n=<span class="number">1</span>), res = <span class="number">3</span></span><br><span class="line">n=<span class="number">4</span>(<span class="number">1</span>+n=<span class="number">3</span>, <span class="number">2</span>+n=<span class="number">2</span>), res = <span class="number">3</span> + <span class="number">2</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        <span class="comment"># 和FB那题目不同点是结束位置在i=n-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            dp.append(dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>])</span><br><span class="line">        <span class="comment"># 同样返回i=n-1</span></span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="746-使用最小花费爬楼梯">746. 使用最小花费爬楼梯</h1><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">https://leetcode.cn/problems/min-cost-climbing-stairs/</a></p><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [10,15,20]</span><br><span class="line">输出：15</span><br><span class="line">解释：你将从下标为 1 的台阶开始。</span><br><span class="line">- 支付 15 ，向上爬两个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 15 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [1,100,1,1,1,100,1,1,100,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：你将从下标为 0 的台阶开始。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</span><br><span class="line">- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</span><br><span class="line">- 支付 1 ，向上爬一个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 6 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= cost.length &lt;= 1000</code></li><li><code>0 &lt;= cost[i] &lt;= 999</code></li></ul><h2 id="动态规划思路">动态规划思路</h2><ol><li>确定dp数组以及下标含义：下标指第i层，dp[i]指<strong>爬到第i层的最低成本</strong>，注意<strong>cost[i]是指从第i层出发爬到其它层的成本</strong></li><li>递推公式：和爬楼梯很像，想到达第i层只能靠第i-1或第i-2层爬上来，并且需要挑<strong>第i-1或第i-2层</strong>中最低成本的爬上来：dp[i] = min(cost[i-1] + dp[i-1], cost[i - 2] + dp[i - 2]); 注意cost[i-1] + dp[i-1]才是到达第i层的成本（包含了从i-1到i的成本，以及从最底层爬到第i-1层的成本</li><li>dp初始化：前两层dp[0]和dp[1]为0</li><li>遍历顺序：从i=2开始遍历，结束位置为i=n(n为数组长度)，返回dp[n]</li><li>举例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index= [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">cost = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">1</span>]</span><br><span class="line">dp   = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="动态规划代码">动态规划代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostClimbingStairs</span>(<span class="params">self, cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># dp里装着最小爬到i层的最低成本</span></span><br><span class="line">        <span class="comment"># dp初始化前两个台阶都为0</span></span><br><span class="line">        dp = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        L = <span class="built_in">len</span>(cost)</span><br><span class="line">        <span class="comment"># 注意题目要求是到顶楼，也就是到第L+1个（明显是超过cost长度的）</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, L + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 需要判断cost[i - 1]和cost[i - 2]哪个更低</span></span><br><span class="line">            dp.append(<span class="built_in">min</span>(cost[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>], cost[i - <span class="number">2</span>] + dp[i - <span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">return</span> dp[L] </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday32动态规划paro01&quot;&gt;LeetCodeCampsDay32动态规划paro01&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;动态规划基础&quot;&gt;动态规划基础&lt;/h1&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay31贪心part05</title>
    <link href="https://blog.lthero.cn/2025/07/25/LeetCodeCampsDay31/"/>
    <id>https://blog.lthero.cn/2025/07/25/LeetCodeCampsDay31/</id>
    <published>2025-07-25T01:30:21.000Z</published>
    <updated>2025-07-25T07:41:21.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday31贪心part05">LeetCodeCampsDay31贪心part05</h1><blockquote><p>本题目有个和二叉树结合的，值得注意</p></blockquote><h1 id="56-合并区间">56. 合并区间</h1><p><a href="https://leetcode.cn/problems/merge-intervals/">https://leetcode.cn/problems/merge-intervals/</a></p><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出：[[1,6],[8,10],[15,18]]</span><br><span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[1,4],[4,5]]</span><br><span class="line">输出：[[1,5]]</span><br><span class="line">解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 104</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>和之前几个区间问题比较像，如果区间有重合就将区间合并；如果没有重合，则将上一个区间添加到res里</p><p>注意，合并区间时，需要改变区间i的左端点为i-1的左端点；而将i&amp;i-1的右端点变成i&amp;i-1右端点的最大值</p><h2 id="贪心代码">贪心代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 有重合就合并，没有重合则把上一个区间添加进结果</span></span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        intervals.sort(key = <span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        L = <span class="built_in">len</span>(intervals)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>] &lt;= intervals[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                intervals[i][<span class="number">0</span>] = intervals[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                intervals[i][<span class="number">1</span>] = intervals[i - <span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(intervals[i][<span class="number">1</span>], intervals[i - <span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(intervals[i - <span class="number">1</span>])</span><br><span class="line">        res.append(intervals[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>或者先将第一个区间添加到res里，然后每次只要比较res[-1]的右端点与intervals[i]的左端点就好，并且也只要更新res[-1]的右端点为两个区间右端点最大值</p><h2 id="贪心代码二">贪心代码二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 有重合就合并，没有重合则把上一个区间添加进结果</span></span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        intervals.sort(key = <span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        L = <span class="built_in">len</span>(intervals)</span><br><span class="line">        res.append(intervals[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">if</span> res[-<span class="number">1</span>][<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>]:</span><br><span class="line">                res[-<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(res[-<span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(intervals[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="738-单调递增的数字">738. 单调递增的数字</h1><p><a href="https://leetcode.cn/problems/monotone-increasing-digits/">https://leetcode.cn/problems/monotone-increasing-digits/</a></p><p>当且仅当每个相邻位数上的数字 <code>x</code> 和 <code>y</code> 满足 <code>x &lt;= y</code> 时，我们称这个整数是<strong>单调递增</strong>的。</p><p>给定一个整数 <code>n</code> ，返回 <em>小于或等于 <code>n</code> 的最大数字，且数字呈 <strong>单调递增</strong></em> 。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 1234</span><br><span class="line">输出: 1234</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 332</span><br><span class="line">输出: 299</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>0 &lt;= n &lt;= 109</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题目先将数字变成字符串，方便逐个比较；</p><p>以98为例； 若n[i - 1] &gt; n[i] ，首先，令n[i - 1]设置为n[i - 1] - 1；并且将n[i]设置为9，会得到89</p><p>那么是从前向后遍历还是从后向前遍历？</p><p>如果是从前向后遍历，遇到strNum[i - 1] &gt; strNum[i]的情况，让strNum[i - 1]减一，但此时如果strNum[i - 1]减一了，可能又小于strNum[i - 2]。</p><p>比如332，如果从前向后遍历，先得到329，此时2又小于3不满足情况；如果从后向前遍历，先得到329，再得到299；就对了</p><p>注意，在实现的时候，还需要设置个for循环，将9后面的所有数字都设置为9</p><p>比如100，会输出090，而不是99，因为最后一个0和倒数第二个0时不会进入if，而第二个0和1会输出090；所以需要记录第一个9出现的位置，再将其后面所有数字都设置为9</p><h2 id="贪心代码">贪心代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">monotoneIncreasingDigits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        n_str = <span class="built_in">list</span>(<span class="built_in">str</span>(n))</span><br><span class="line">        L = <span class="built_in">len</span>(n_str)</span><br><span class="line">        <span class="keyword">if</span> L == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n_str[i - <span class="number">1</span>] &gt; n_str[i]:</span><br><span class="line">                n_str[i - <span class="number">1</span>] = <span class="built_in">str</span>(<span class="built_in">int</span>(n_str[i - <span class="number">1</span>]) - <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># 将修改位置后面的字符都设置为9</span></span><br><span class="line">                <span class="comment"># 比如100，会先变成090，（最后一个0和倒数第二个0时不会进入if）</span></span><br><span class="line">                <span class="comment"># 再用for循环将9后面所有数字变成9</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, L):</span><br><span class="line">                    n_str[j] = <span class="string">&quot;9&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(n_str))</span><br></pre></td></tr></table></figure><p>或者使用个flag记录设置9的起点位置，省得增加时间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">monotoneIncreasingDigits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 从后向前遍历，以98为例； 若n[i - 1] &gt; n[i] ，将n[i]设置为9并且令n[i - 1]设置为n[i - 1] - 1</span></span><br><span class="line">        n_str = <span class="built_in">list</span>(<span class="built_in">str</span>(n))</span><br><span class="line">        L = <span class="built_in">len</span>(n_str)</span><br><span class="line">        <span class="keyword">if</span> L == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        flag = L</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n_str[i - <span class="number">1</span>] &gt; n_str[i]:</span><br><span class="line">                n_str[i - <span class="number">1</span>] = <span class="built_in">str</span>(<span class="built_in">int</span>(n_str[i - <span class="number">1</span>]) - <span class="number">1</span>)</span><br><span class="line">                flag = i</span><br><span class="line">                <span class="comment"># 将修改位置后面的字符都设置为9</span></span><br><span class="line">                <span class="comment"># 比如100，会先变成090，（最后一个0和倒数第二个0时不会进入if）</span></span><br><span class="line">                <span class="comment"># 再用for循环将9后面所有数字变成9</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(flag, L):</span><br><span class="line">            n_str[j] = <span class="string">&quot;9&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(n_str))</span><br></pre></td></tr></table></figure><h1 id="968-监控二叉树">968. 监控二叉树</h1><p><a href="https://leetcode.cn/problems/binary-tree-cameras/">https://leetcode.cn/problems/binary-tree-cameras/</a></p><p>给定一个二叉树，我们在树的节点上安装摄像头。</p><p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p><p>计算监控树的所有节点所需的最小摄像头数量。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,0,null,0,0]</span><br><span class="line">输出：1</span><br><span class="line">解释：如图所示，一台摄像头足以监控所有节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,0,null,0,null,0,null,null,0]</span><br><span class="line">输出：2</span><br><span class="line">解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>给定树的节点数的范围是 <code>[1, 1000]</code>。</li><li>每个节点的值都是 0。</li></ol><h2 id="贪心思路">贪心思路</h2><p>这是很重要的一个线索，摄像头可以覆盖上中下三层，如果把摄像头放在叶子节点上，就浪费的一层的覆盖。</p><p>所以把摄像头放在叶子节点的父节点位置，才能充分利用摄像头的覆盖面积。</p><p>那么有同学可能问了，为什么不从头结点开始看起呢，为啥要从叶子节点看呢？</p><p>因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。</p><p><strong>所以我们要从下往上看，局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，整体最优：全部摄像头数量所用最少！</strong></p><p>局部最优推出全局最优，找不出反例，那么就按照贪心来！</p><p>此时，大体思路就是从低到上，先给叶子节点父节点放个摄像头，然后隔两个节点放一个摄像头，直至到二叉树头结点。</p><p>此时这道题目还有两个难点：</p><ol><li>二叉树的遍历</li><li>如何隔两个节点放一个摄像头</li></ol><p>一个摄影头可以监控3个节点，并且最好从叶子节点倒着向root节点进行遍历（即使用<strong>后序遍历的方法</strong>）</p><p>此时需要状态转移的公式，大家不要和动态的状态转移公式混到一起，本题状态转移没有择优的过程，就是单纯的状态转移！</p><p>来看看这个状态应该如何转移，先来看看每个节点可能有几种状态：</p><p>我们分别有三个数字来表示：</p><ul><li>0：该节点无覆盖</li><li>1：本节点有摄像头</li><li>2：本节点有覆盖</li></ul><p>大家应该找不出第四个节点的状态了。</p><p><strong>一些同学可能会想有没有第四种状态：本节点无摄像头，其实无摄像头就是 无覆盖 或者 有覆盖的状态，所以一共还是三个状态。</strong></p><p><strong>因为在遍历树的过程中，就会遇到空节点，那么问题来了，空节点究竟是哪一种状态呢？ 空节点表示无覆盖？ 表示有摄像头？还是有覆盖呢？</strong></p><p>回归本质，为了让摄像头数量最少，我们要尽量让叶子节点的父节点安装摄像头，这样才能摄像头的数量最少。</p><p>那么空节点不能是无覆盖的状态，这样叶子节点就要放摄像头了，空节点也不能是有摄像头的状态，这样叶子节点的父节点就没有必要放摄像头了，而是可以把摄像头放在叶子节点的爷爷节点上。</p><p><strong>所以空节点的状态只能是有覆盖，这样就可以在叶子节点的父节点放摄像头了</strong></p><p>接下来就是递推关系。</p><p>那么递归的终止条件应该是遇到了空节点，<strong>此时应该返回2（有覆盖）</strong>，原因上面已经解释过了。</p><p>主要有如下四类情况：</p><ul><li>情况1：左右节点都有覆盖</li></ul><p>左孩子有覆盖，右孩子有覆盖，那么此时中间节点应该就是无覆盖的状态了。</p><p><img src="https://cdn.lthero.cn/post_images/course/ML20201229203710729.png" alt="img"></p><ul><li>情况2：左右节点至少有一个无覆盖的情况</li></ul><p>如果是以下情况，则中间节点（父节点）应该放摄像头：</p><ul><li>left == 0 &amp;&amp; right == 0 左右节点无覆盖</li><li>left == 1 &amp;&amp; right == 0 左节点有摄像头，右节点无覆盖</li><li>left == 0 &amp;&amp; right == 1 左节点有无覆盖，右节点摄像头</li><li>left == 0 &amp;&amp; right == 2 左节点无覆盖，右节点覆盖</li><li>left == 2 &amp;&amp; right == 0 左节点覆盖，右节点无覆盖</li></ul><p>这个不难理解，毕竟有一个孩子没有覆盖，父节点就应该放摄像头。</p><p>此时摄像头的数量要加一，并且return 1，代表中间节点放摄像头。</p><ul><li>情况3：左右节点至少有一个有摄像头</li></ul><p>如果是以下情况，其实就是 左右孩子节点有一个有摄像头了，那么其父节点就应该是2（覆盖的状态）</p><ul><li>left == 1 &amp;&amp; right == 2 左节点有摄像头，右节点有覆盖</li><li>left == 2 &amp;&amp; right == 1 左节点有覆盖，右节点有摄像头</li><li>left == 1 &amp;&amp; right == 1 左右节点都有摄像头</li></ul><ul><li>情况4：头结点没有覆盖</li></ul><p>以上都处理完了，递归结束之后，可能头结点 还有一个无覆盖的情况，如图：</p><p><img src="https://cdn.lthero.cn/post_images/course/ML20201229203742446.png" alt="img"></p><p>最后，在main函数里，根据rootState判断是否需要再添加一个摄像头</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度: O(n)，需要遍历二叉树上的每个节点</li><li>空间复杂度: O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="comment"># 空节点应该是什么状态？默认把空节点当成被覆盖的状态</span></span><br><span class="line">            <span class="comment"># 目的是让叶子节点的父节点安装摄像头</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">        leftState = self.foo(node.left)</span><br><span class="line">        rightState = self.foo(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 左、右至少有一个是无覆盖</span></span><br><span class="line">        <span class="keyword">if</span> leftState == <span class="number">0</span> <span class="keyword">or</span> rightState == <span class="number">0</span>:</span><br><span class="line">            self.res += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 右、右都是有覆盖</span></span><br><span class="line">        <span class="keyword">if</span> leftState == <span class="number">2</span> <span class="keyword">and</span> rightState == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 左、右至少有一个是有摄像头的</span></span><br><span class="line">        <span class="keyword">if</span> leftState == <span class="number">1</span> <span class="keyword">or</span> rightState == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 根节点被覆盖</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCameraCover</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        self.root = root</span><br><span class="line">        rootState = self.foo(root)</span><br><span class="line">        <span class="comment"># 最后一个情况，root如果还没有被覆盖</span></span><br><span class="line">        <span class="keyword">if</span> rootState == <span class="number">0</span>:</span><br><span class="line">            self.res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday31贪心part05&quot;&gt;LeetCodeCampsDay31贪心part05&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本题目有个和二叉树结合的，值得注意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;56-合并区间&quot;&gt;56.</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay30贪心part04</title>
    <link href="https://blog.lthero.cn/2025/07/24/LeetCodeCampsDay30/"/>
    <id>https://blog.lthero.cn/2025/07/24/LeetCodeCampsDay30/</id>
    <published>2025-07-24T07:36:15.000Z</published>
    <updated>2025-07-24T09:14:11.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday30贪心part04">LeetCodeCampsDay30贪心part04</h1><blockquote><p>三个区间问题的题目，用贪心算法解决</p><p>本题需要用到python的lambda表示式</p><p>x.sort(key = lambda x: (x[0], x[1]))</p><p>表示对列表x进行排序，优先对x[0]从小到大排序，再按x[1]从小到大</p><p>如果需要先从大到小，再从小到大，<strong>可以先使用-x[0]</strong></p><p>x.sort(key = lambda x: (<strong>-x[0]</strong>, x[1]))</p></blockquote><h1 id="452-用最少数量的箭引爆气球">452. 用最少数量的箭引爆气球</h1><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/</a></p><p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code> ，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在 <code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 y 坐标。</p><p>一支弓箭可以沿着 x 轴从不同点 <strong>完全垂直</strong> 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x``start</code>，<code>x``end</code>， 且满足  <code>xstart ≤ x ≤ x``end</code>，则该气球会被 <strong>引爆</strong> 。可以射出的弓箭的数量 <strong>没有限制</strong> 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，<em>返回引爆所有气球所必须射出的 <strong>最小</strong> 弓箭数</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[10,16],[2,8],[1,6],[7,12]]</span><br><span class="line">输出：2</span><br><span class="line">解释：气球可以用2支箭来爆破:</span><br><span class="line">-在x = 6处射出箭，击破气球[2,8]和[1,6]。</span><br><span class="line">-在x = 11处发射箭，击破气球[10,16]和[7,12]。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[1,2],[3,4],[5,6],[7,8]]</span><br><span class="line">输出：4</span><br><span class="line">解释：每个气球需要射出一支箭，总共需要4支箭。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[1,2],[2,3],[3,4],[4,5]]</span><br><span class="line">输出：2</span><br><span class="line">解释：气球可以用2支箭来爆破:</span><br><span class="line">- 在x = 2处发射箭，击破气球[1,2]和[2,3]。</span><br><span class="line">- 在x = 4处射出箭，击破气球[3,4]和[4,5]。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= points.length &lt;= 105</code></li><li><code>points[i].length == 2</code></li><li><code>-231 &lt;= xstart &lt; xend &lt;= 231 - 1</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题的最小结果，其实是“最多的重合区间个数”</p><ol><li>对于区间问题，我们先对区间的左端点进行排序（从小到大），如果左端点一样，再按右端点大小到大排序</li><li>随后，再按重复的区间进行讨论（只有两种情况，排序的结果会保证这一点）<ol><li>当前区间i左边界大于上一区间(i-1)右边界，即：两个区间无重合，则说明上一个区间i-1需要一个箭</li><li>当前区间i左边界小于等于上一区间i-1右边界，两个区间重合，此时，可以用一个箭射穿两个区间；并且需要更新这两个区间的右边界，让他俩的右边界变成他俩右边界的最小值<code>points[i - 1][1] = points[i][1] = min(points[i - 1][1], points[i][1])</code>；这样做的目的，是为了让下一个区间i+1把当前区间i当成&quot;i-1&quot;进行处理，即，当i-1和i重复了，是否能把i+1也带上一起射穿。</li></ol></li></ol><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度：O(nlog n)，因为有一个快排</li><li>空间复杂度：O(n)，有一个快排，最差情况(倒序)时，需要n次递归调用。因此确实需要O(n)的栈空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMinArrowShots</span>(<span class="params">self, points: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 求最多的重合区间个数 = 最小结果</span></span><br><span class="line">        <span class="comment"># 先按左边界对这些区间进行从小到大排序，如果左端点一样，就按右端点从小到大</span></span><br><span class="line">        points.sort(key = <span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># print(points)</span></span><br><span class="line">        <span class="comment"># 再按情况讨论</span></span><br><span class="line">        <span class="comment"># 1、p[i][0] &gt; p[i - 1][1]，当前区间左边界大于上一区间右边界，即：两个区间无重合</span></span><br><span class="line">        <span class="comment"># 2、p[i][0] &lt;= p[i - 1][1]，两个区间重合，此时，可以用一个箭射；并且需要更新这两个区间的右边界，让他俩的右边界变成他俩右边界的最小值</span></span><br><span class="line">        <span class="comment"># 循环，和下一个气球比较</span></span><br><span class="line">        L = <span class="built_in">len</span>(points)</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">if</span> points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> points[i][<span class="number">0</span>] &lt;= points[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># 两个区间的右端点都更新成为两个区间右端点的最小值</span></span><br><span class="line">                points[i - <span class="number">1</span>][<span class="number">1</span>] = points[i][<span class="number">1</span>] = <span class="built_in">min</span>(points[i - <span class="number">1</span>][<span class="number">1</span>], points[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="435-无重叠区间">435. 无重叠区间</h1><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/">https://leetcode.cn/problems/non-overlapping-intervals/</a></p><p>给定一个区间的集合 <code>intervals</code> ，其中 <code>intervals[i] = [starti, endi]</code> 。返回 <em>需要移除区间的最小数量，使剩余区间互不重叠</em> 。</p><p><strong>注意</strong> 只在一点上接触的区间是 <strong>不重叠的</strong>。例如 <code>[1, 2]</code> 和 <code>[2, 3]</code> 是不重叠的。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [[1,2],[2,3],[3,4],[1,3]]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [ [1,2], [1,2], [1,2] ]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [ [1,2], [2,3] ]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 105</code></li><li><code>intervals[i].length == 2</code></li><li><code>-5 * 104 &lt;= starti &lt; endi &lt;= 5 * 104</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题和上一题的思路很像，以及代码都非常像；本题是不需要处理不重叠区间的情况；</p><p>同样需要注意的一点是，<strong>将两个重叠区间的右边界，变成两个区间右端点的最小值</strong>，相当于融合成了一个区间，从而让下一个区间和这个新的右端点进行比较判断</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度：O(nlog n) ，有一个快排</li><li>空间复杂度：O(n)，有一个快排，最差情况(倒序)时，需要n次递归调用。因此确实需要O(n)的栈空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eraseOverlapIntervals</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 本题目就是问有多少个重叠的区间</span></span><br><span class="line">        <span class="comment"># 让相邻的区间保持在一起</span></span><br><span class="line">        <span class="comment"># 先排序区间，再对区间判断</span></span><br><span class="line">        intervals.sort(key = <span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">        </span><br><span class="line">        L = <span class="built_in">len</span>(intervals)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">          <span class="comment"># 如果两个区间重叠</span></span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>] &lt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 将两个区间的右边界，变成两个区间右端点的最小值</span></span><br><span class="line">                intervals[i - <span class="number">1</span>][<span class="number">1</span>] = intervals[i][<span class="number">1</span>] = <span class="built_in">min</span>(intervals[i - <span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="763-划分字母区间">763. 划分字母区间</h1><p><a href="https://leetcode.cn/problems/partition-labels/">https://leetcode.cn/problems/partition-labels/</a></p><p>给你一个字符串 <code>s</code> 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。例如，字符串 <code>&quot;ababcc&quot;</code> 能够被分为 <code>[&quot;abab&quot;, &quot;cc&quot;]</code>，但类似 <code>[&quot;aba&quot;, &quot;bcc&quot;]</code> 或 <code>[&quot;ab&quot;, &quot;ab&quot;, &quot;cc&quot;]</code> 的划分是非法的。</p><p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 <code>s</code> 。</p><p>返回一个表示每个字符串片段的长度的列表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">输出：[9,7,8]</span><br><span class="line">解释：</span><br><span class="line">划分结果为 &quot;ababcbaca&quot;、&quot;defegde&quot;、&quot;hijhklij&quot; 。</span><br><span class="line">每个字母最多出现在一个片段中。</span><br><span class="line">像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 这样的划分是错误的，因为划分的片段数较少。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;eccbbbbdec&quot;</span><br><span class="line">输出：[10]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h2 id="贪心思路">贪心思路</h2><h3 id="思路一：">思路一：</h3><p>同一字母最多出现在一个片段中，也暗示这是个区间问题和前面两个题目一样</p><p>可以对每个字母看成一个区间（最多有26个区间），记录每个字母的首、末区间位置；然后进行排序，再统计最大重合区间，区间有重合的就合并（按最大右端点合并），并统计合并后区间长度；如果不重叠，则边界就是答案</p><p>将区间按左边界从小到大排序，找到边界将区间划分成组，互不重叠。找到的边界就是答案。</p><h3 id="思路二：">思路二：</h3><p>思路2更灵活，对每个字母来说，使用hashtable，记录每个字母出现的最远位置的下标；（第一次遍历）</p><p>再遍历一次，不过这次使用个变量farest，记录当前hashtable里，最远位置的下标，当farest==i时，（比如i=8=farest），此时就达到了一个最长区间。</p><p><img src="https://file1.kamacoder.com/i/algo/20201222191924417.png" alt="img"></p><h2 id="贪心代码">贪心代码</h2><h3 id="思路一">思路一</h3><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)，使用的hash数组是固定大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partitionLabels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 统计每个字符最后出现的位置，</span></span><br><span class="line">        <span class="comment"># 从头遍历，更新字符的最远出现下标，如果字符最远出现下标与当前下标相等，则找到了分割点</span></span><br><span class="line">        table = [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">        L = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            table[<span class="built_in">ord</span>(s[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] = i</span><br><span class="line"></span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        farest = <span class="number">0</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            farest = <span class="built_in">max</span>(farest,  table[<span class="built_in">ord</span>(s[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)])</span><br><span class="line">            <span class="keyword">if</span> i == farest:</span><br><span class="line">                res.append(i - start + <span class="number">1</span>)</span><br><span class="line">                start = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路二代码">思路二代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partitionLabels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line"><span class="comment"># 先对s划分成多个区间</span></span><br><span class="line">        table = <span class="built_in">dict</span>()</span><br><span class="line">        L = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table[s[i]] = [i, i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 更新右端点</span></span><br><span class="line">                table[s[i]][-<span class="number">1</span>] = i</span><br><span class="line">        <span class="comment"># 得到区间后排序</span></span><br><span class="line">        s_list = <span class="built_in">list</span>(table.values())</span><br><span class="line">        s_list.sort(key = <span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        L = <span class="built_in">len</span>(s_list)</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="comment"># start用来记录新区间的起点位置，用来计算个数用</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 开始遍历并查找独立区间、合并重合区间</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="comment"># 当前区间右端点大于前区间左端点，说明有独立区间</span></span><br><span class="line">            <span class="keyword">if</span> s_list[i][<span class="number">0</span>] &gt; s_list[i - <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                res.append(s_list[i - <span class="number">1</span>][<span class="number">1</span>] - start + <span class="number">1</span>)</span><br><span class="line">                start = s_list[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment"># 注意这里是将区间统一变成最大值</span></span><br><span class="line">                s_list[i][<span class="number">1</span>] = <span class="built_in">max</span>(s_list[i - <span class="number">1</span>][<span class="number">1</span>], s_list[i][<span class="number">1</span>])</span><br><span class="line">        res.append(s_list[-<span class="number">1</span>][<span class="number">1</span>] - start + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday30贪心part04&quot;&gt;LeetCodeCampsDay30贪心part04&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;三个区间问题的题目，用贪心算法解决&lt;/p&gt;
&lt;p&gt;本题需要用到python的lambda表示式&lt;/p&gt;
&lt;p&gt;x</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay29贪心part03</title>
    <link href="https://blog.lthero.cn/2025/07/24/LeetCodeCampsDay29/"/>
    <id>https://blog.lthero.cn/2025/07/24/LeetCodeCampsDay29/</id>
    <published>2025-07-24T02:49:36.000Z</published>
    <updated>2025-07-24T09:08:29.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday29贪心part03">LeetCodeCampsDay29贪心part03</h1><blockquote><p>有些题目有多个维度时，可以去去除一个维度（比如406）</p><p>而有些题目需要同时考虑左右相邻元素时，可以先从左向右、再从右向左遍历</p></blockquote><h1 id="134-加油站">134. 加油站</h1><p><a href="https://leetcode.cn/problems/gas-station/">https://leetcode.cn/problems/gas-station/</a></p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油</span><br><span class="line">开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油</span><br><span class="line">开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油</span><br><span class="line">开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油</span><br><span class="line">开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油</span><br><span class="line">开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。</span><br><span class="line">因此，3 可为起始索引。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [2,3,4], cost = [3,4,3]</span><br><span class="line">输出: -1</span><br><span class="line">解释:</span><br><span class="line">你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。</span><br><span class="line">我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油</span><br><span class="line">开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油</span><br><span class="line">开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油</span><br><span class="line">你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。</span><br><span class="line">因此，无论怎样，你都不可能绕环路行驶一周。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>n == gas.length == cost.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li><li>输入保证答案唯一。</li></ul><table><thead><tr><th>Gas</th><th>2</th><th>5</th><th>2</th><th>3</th><th>5</th></tr></thead><tbody><tr><td>Cost</td><td>1</td><td>2</td><td>8</td><td>2</td><td>4</td></tr><tr><td>restGas</td><td>1</td><td>3</td><td>-6</td><td>1</td><td>1</td></tr><tr><td>Index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><p>开始令下标从0开始，就累加计算当前restGas量，如果当前累加量小于0，比如到达第三号时，此时剩余-2，则说明无论是从1号还是2号出发，肯定都会无法走完全程的，所以将下标从3开始继续尝试。</p><h2 id="贪心思路">贪心思路</h2><p>本题目可以不用管所谓的循环的条件，只关心剩余gas量</p><p>先求出每站跑一遍能剩下的gas量(rest = gas - cost)，再直接以第一站开始遍历，将每站rest量添加到remain，如果到了第i站，remain出现负数，说明从i站之前所有站的出发，都无法完成目标；需要从第i+1站继续尝试，如果i+1站走到了终点，则说明i+1站可以作为起点；</p><p>这里有点儿难理解，为什么i+1站并没有走完所谓的全程（至少没有循环地走完全程），而只是从i+1走到L，就可以说明它可以作为起点；</p><blockquote><p>因为题目里保证，如果有答案，只唯一，所以这里贪心的思路是，<strong>删除所有不可能的点，剩下可能的一定是答案</strong></p></blockquote><p>总和是关键：如果整个环的总 rest 和 &gt;= 0，那么一定有一个唯一起点</p><p>先考虑整个数组的 total rest（即所有 rest[i] 的和）。</p><p>如果 total rest &lt; 0，意味着总油量不足以绕环一周，无论从哪里出发，都不可能成功。</p><p>如果 total rest &gt;= 0，问题保证了只有一个起点能成功。</p><p>这是因为环路的性质：油量是固定的，总供给 &gt;= 总消耗，所以只要找到那个“平衡点”，就能走完全程。</p><p>算法利用这一点：在遍历过程中，我们不是在真正模拟开车，而是在检查累积油量是否可持续。如果从某个起点开始，油量 remain 就负了，意味着这个起点不行，<strong>但我们知道其他起点中有一个是行的</strong></p><p>当我们重置起点到i+1并继续累积remain，实际上是在从i+1开始检查剩余路径是否可持续。同时，之前的失败已经帮我们&quot;过滤&quot;了无效起点</p><p>最终，遍历完整个数组后，如果总remain&gt;=0，说明从i+1开始的路径是可行的，因为总rest和&gt;=0，且我们已经排除了前面的无效点</p><p>用一个例子说明<br>假设我们有一个环形数组：<br>gas = [1, 2, 3, 4, 5]</p><p>cost = [3, 4, 5, 1, 2]</p><p>那么 rest = [1-3, 2-4, 3-5, 4-1, 5-2] = [-2, -2, -2, 3, 3]<br>现在，按算法遍历：<br>开始从索引 0，remain = 0</p><p>i=0: remain += -2 = -2 (负数！) → 起点无效，移到 i+1=1，重置 remain=0</p><p>i=1: remain += -2 = -2 (负数！) → 起点无效，移到 i+2=2，重置 remain=0</p><p>i=2: remain += -2 = -2 (负数！) → 起点无效，移到 i+3=3，重置 remain=0</p><p>i=3: remain += 3 = 3</p><p>i=4: remain += 3 = 6 (结束遍历)</p><p>总 remain = 6 &gt;= 0，所以起点是 3（i+1 从上一步的 i=2）。</p><p>为什么 i=3 可以直接作为起点？因为：</p><p>从 0、1、2 开始都失败了，证明它们不可行。 总 rest 和 = -2 + -2 + -2 + 3 + 3 = 0 (&gt;= 0)，<strong>所以一定有一个起点（这里是 3）</strong>。 我们不需要从 i=3 单独再走一遍全程，因为算法的最后累积 already 确认了它能覆盖整个环。</p><blockquote><p>另外，为什么找到了第一个可以走完剩下路的点i就是起点？或者说，第一个让remain一直保持大于0的点就是起点</p></blockquote><p>这好理解，哪怕有第二个点能让remain在i+1到L的路程一直大于0，那第一个点肯定更能满足在i到L的路程一直大于0(因为第一个点的rest要大于0，而且第二个点已经保持了后续的reamin大于0），那第一个点就必然是“唯一的答案”</p><h2 id="贪心代码">贪心代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canCompleteCircuit</span>(<span class="params">self, gas: <span class="type">List</span>[<span class="built_in">int</span>], cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># -2， -2， -2， 3， 3</span></span><br><span class="line">        L = <span class="built_in">len</span>(gas)</span><br><span class="line">        rest = [<span class="number">0</span>] * L</span><br><span class="line">        <span class="comment"># 先计算跑一天后剩下的gas</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            rest[i] = gas[i] - cost[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(rest) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用贪心算法，</span></span><br><span class="line">        startPoint = <span class="number">0</span></span><br><span class="line">        restGas = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            restGas += rest[i]</span><br><span class="line">            <span class="comment"># 仅小于0时才说明i之前的位置不适合作为起始位置，从i+1开始尝试</span></span><br><span class="line">            <span class="keyword">if</span> restGas &lt; <span class="number">0</span>:</span><br><span class="line">                startPoint = i + <span class="number">1</span></span><br><span class="line">                restGas = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> startPoint</span><br></pre></td></tr></table></figure><h1 id="135-分发糖果">135. 分发糖果</h1><p><a href="https://leetcode.cn/problems/candy/">https://leetcode.cn/problems/candy/</a></p><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [1,0,2]</span><br><span class="line">输出：5</span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [1,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。</span><br><span class="line">     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == ratings.length</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题需要左、右都比较，但如果想一次遍历就比较左右两边是比较难的；所以可以遍历两次，一次从左向右比较，判断右边比左边高；一次从右向左比较，判断左边比右边高的情况</p><p>第一次遍历时，if ratings[i] &gt; ratings[i - 1]，则res[i] = res[i - 1] + 1</p><p>第二次遍历时，if ratings[i] &gt; ratings[i + 1]，需要注意，不能直接res[i] = res[i + 1] + 1，因为题目要求当前孩子需要比左、右孩子相对比，所以这里需要将res[i + 1] + 1（左边比右边高的情况）与res[i]（之前得到的，右边比左边高的情况进行比较），取最大值<code>res[i] = max(res[i], res[i + 1] + 1)</code></p><p>最后返回sumOfNums即可</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">candy</span>(<span class="params">self, ratings: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(ratings)</span><br><span class="line">        res = [<span class="number">1</span>] * L</span><br><span class="line">        <span class="comment"># 右边比左边高</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">if</span> ratings[i] &gt; ratings[i - <span class="number">1</span>]:</span><br><span class="line">                res[i] = res[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 左边从右边高（从后向前遍历）</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> ratings[i] &gt; ratings[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># 要取个值，保证res[i]要既比左边高，也比右边高</span></span><br><span class="line">                <span class="comment"># 这里的res[i]就是已经比左边高的值，而res[i+1]+1是比右边高的值，取最大值</span></span><br><span class="line">                res[i] = <span class="built_in">max</span>(res[i], res[i + <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(res)</span><br></pre></td></tr></table></figure><h1 id="860-柠檬水找零">860. 柠檬水找零</h1><p><a href="https://leetcode.cn/problems/lemonade-change/">https://leetcode.cn/problems/lemonade-change/</a></p><p>在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>给你一个整数数组 <code>bills</code> ，其中 <code>bills[i]</code> 是第 <code>i</code> 位顾客付的账。如果你能给每位顾客正确找零，返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：bills = [5,5,5,10,20]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。</span><br><span class="line">第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。</span><br><span class="line">第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。</span><br><span class="line">由于所有客户都得到了正确的找零，所以我们输出 true。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：bills = [5,5,10,10,20]</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。</span><br><span class="line">对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。</span><br><span class="line">对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。</span><br><span class="line">由于不是每位顾客都得到了正确的找零，所以答案是 false。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= bills.length &lt;= 105</code></li><li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题只需要讨论找钱的几种情况，记数手里5元、10元的个数，并算欠用户多少钱，是否能还</p><ol><li>收到5元，直接收入；不找</li><li>收入10元，检测是否有5元，有则找；没有则False</li><li>收到20元，优先检测是否有一张10元一张5元，如果没有再检测是否有三张5元，有则找；没有则False</li></ol><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lemonadeChange</span>(<span class="params">self, bills: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 记数手里5元、10元的个数，并算欠用户多少钱，是否能还</span></span><br><span class="line">        <span class="comment"># 5, 10</span></span><br><span class="line">        nums = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> bills:</span><br><span class="line">            index = i//<span class="number">5</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">                nums[index] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> index == <span class="number">1</span>:</span><br><span class="line">                nums[index] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                    nums[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 20元，需要还1张10，1张5；或者三张5</span></span><br><span class="line">                <span class="comment"># 优先还10元的</span></span><br><span class="line">                <span class="keyword">if</span> nums[<span class="number">0</span>] <span class="keyword">and</span> nums[<span class="number">1</span>]:</span><br><span class="line">                    nums[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">                    nums[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[<span class="number">0</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">                    nums[<span class="number">0</span>] -= <span class="number">3</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure><h1 id="406-根据身高重建队列">406. 根据身高重建队列</h1><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">https://leetcode.cn/problems/queue-reconstruction-by-height/</a></p><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class="line">输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class="line">解释：</span><br><span class="line">编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</span><br><span class="line">编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class="line">编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</span><br><span class="line">编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</span><br><span class="line">因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]</span><br><span class="line">输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= people.length &lt;= 2000</code></li><li><code>0 &lt;= hi &lt;= 106</code></li><li><code>0 &lt;= ki &lt; people.length</code></li><li>题目数据确保队列可以被重建</li></ul><h2 id="贪心思路">贪心思路</h2><p>本题目有高度和顺序两个维度，同时处理起来很麻烦，所以先进行降维度；只处理高度</p><p>1、优先按h排序，从高到低，身高相同再按k从小到大；</p><p>比如</p><p>[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]</p><p>按身高先排序后会得到</p><p>[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]</p><p>2、再按k进行排序，这里只要按k将元素插入在k位置即可</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度：O(nlog n + n^2)</li><li>空间复杂度：O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reconstructQueue</span>(<span class="params">self, people: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 1、优先按h排序，从高到低，身高相同再按k从小到大 </span></span><br><span class="line">        <span class="comment"># 这样保证，</span></span><br><span class="line">        <span class="comment"># 从而去除了身高的维度，下面去关注k</span></span><br><span class="line">        <span class="comment"># 2、根据k来调整具体顺序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># lambda, 当-x[0](维度h)相同时，再根据x[1]（维度k)从小到大排序</span></span><br><span class="line">        people.sort(key = <span class="keyword">lambda</span> x: (- x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">        que = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据每个元素的第二个维度k，进行插入</span></span><br><span class="line">        <span class="comment"># 由于people已经排序好了，相同高度时，将k值小的排序前面</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> people:</span><br><span class="line">            que.insert(p[<span class="number">1</span>], p)</span><br><span class="line">        <span class="keyword">return</span> que</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday29贪心part03&quot;&gt;LeetCodeCampsDay29贪心part03&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有些题目有多个维度时，可以去去除一个维度（比如406）&lt;/p&gt;
&lt;p&gt;而有些题目需要同时考虑左右相邻元素时，可以</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay28贪心part02</title>
    <link href="https://blog.lthero.cn/2025/07/22/LeetCodeCampsDay28/"/>
    <id>https://blog.lthero.cn/2025/07/22/LeetCodeCampsDay28/</id>
    <published>2025-07-22T07:26:52.000Z</published>
    <updated>2025-07-24T09:09:18.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday28贪心part02">LeetCodeCampsDay28贪心part02</h1><blockquote><p>覆盖范围的题目</p></blockquote><h1 id="122-买卖股票的最佳时机-ii">122. 买卖股票的最佳时机 II</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/</a></p><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,1,5,3,6,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。</span><br><span class="line">随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。</span><br><span class="line">最大总利润为 4 + 3 = 7 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。</span><br><span class="line">最大总利润为 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>观察例子可以看到，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。</span><br></pre></td></tr></table></figure><p>虽然解释是第一天买，最后一天卖；但第一天买，第二天卖，第二天再买，第三天卖……最终也会得到同样的利润。因为<strong>把利润分解为每天为单位的维度，而不是从 1 天到第 5 天整体去考虑！</strong></p><p>所以，我们可以算出每天的利润表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prices = [7,1,5,3,6,4]</span><br><span class="line">DailyProfit = [-6， 4，-2，3，-2]</span><br></pre></td></tr></table></figure><p>只统计DailProfit里<strong>大于零的利润就好了</strong></p><p><img src="https://file1.kamacoder.com/i/algo/2020112917480858-20230310134659477.png" alt="img"></p><p>那？第一天怎么就没有利润呢，第一天到底算不算的困惑中。</p><p>第一天当然没有利润，至少要第二天才会有利润，所以利润的序列比股票序列少一天！</p><p>从图中可以发现，其实我们需要收集每天的正利润就可以，<strong>收集正利润的区间，就是股票买卖的区间，而我们只需要关注最终利润，不需要记录区间</strong>。</p><p>那么只收集正利润就是贪心所贪的地方！</p><p><strong>局部最优：收集每天的正利润，全局最优：求得最大利润</strong>。</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># -6， 4，-2，3，-2</span></span><br><span class="line">        L = <span class="built_in">len</span>(prices)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">1</span>):</span><br><span class="line">            profit = prices[i + <span class="number">1</span>] - prices[i]</span><br><span class="line">            <span class="keyword">if</span> profit &gt; <span class="number">0</span>:</span><br><span class="line">                res += profit</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="55-跳跃游戏">55. 跳跃游戏</h1><p><a href="https://leetcode.cn/problems/jump-game/">https://leetcode.cn/problems/jump-game/</a></p><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,0,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>本题其实跳几步无所谓，关键在于可跳的覆盖范围！</p><p><img src="https://file1.kamacoder.com/i/algo/20230203105634.png" alt="img"></p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = <span class="built_in">len</span>(nums)</span><br><span class="line">maxReach = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    <span class="keyword">if</span> i &lt;= maxReach:</span><br><span class="line">        maxReach = <span class="built_in">max</span>(maxReach, i + nums[i])</span><br><span class="line">        <span class="keyword">if</span> maxReach &gt;= L - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> maxReach &gt;= L - <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="分治思路">分治思路</h2><p>数值：[2,3,1,1,4]</p><p>下标：[0,1,2,3,4]</p><p>从末尾向前检查，设置当前位置(cur)是最后一位，如果当前位置到i的距离（cur - i)小于等于nums[i]，说明当前位置可以被访问，最终判断cur是否回到了0</p><p>这种方法最好就是从终点走回到起点，逐渐将一个[2,3,1,1,4]的问题变成[2,3,1,1]-&gt;[2,3,1]-&gt;[2,3]-&gt;[2]</p><h2 id="分治代码">分治代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 从末尾向前检查，设置当前位置是最后一位，</span></span><br><span class="line">        <span class="comment"># 如果当前位置到i的距离，小于等于nums[i]，说明当前位置可以被访问</span></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        startPoint = L - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] + i &gt;= startPoint:</span><br><span class="line">                startPoint = i</span><br><span class="line">        <span class="keyword">return</span> startPoint == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="动态规划">动态规划</h2><p>设置个stepsAvailable，表示从当前位置能走的最大步数，一步步模拟，如果某个位置的nums[i]大于stepsAvailable，则更新stepsAvailable=nums[i]</p><h2 id="动态规划代码">动态规划代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L = <span class="built_in">len</span>(nums)</span><br><span class="line">StepsAvailable = nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">    <span class="keyword">if</span> StepsAvailable == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    StepsAvailable -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> nums[i] &gt; StepsAvailable:</span><br><span class="line">        StepsAvailable = nums[i]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="45-跳跃游戏-ii">45. 跳跃游戏 II</h1><p><a href="https://leetcode.cn/problems/jump-game-ii/">https://leetcode.cn/problems/jump-game-ii/</a></p><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组 <code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code> 向后跳转的最大长度。换句话说，如果你在 <code>nums[i]</code> 处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code></li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code> 的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,0,1,4]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li>题目保证可以到达 <code>nums[n-1]</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>贪心的思路，局部最优：当前可移动距离尽可能多走，如果还没到终点，步数再加一。整体最优：一步尽可能多走，从而达到最少步数。</p><p>思路虽然是这样，但在写代码的时候还不能真的能跳多远就跳多远，那样就不知道下一步最远能跳到哪里了。</p><p><strong>所以真正解题的时候，要从覆盖范围出发，不管怎么跳，覆盖范围内一定是可以跳到的，以最小的步数增加覆盖范围，覆盖范围一旦覆盖了终点，得到的就是最少步数！</strong></p><p><strong>这里需要统计两个覆盖范围，当前这一步的最大覆盖和下一步最大覆盖</strong>。</p><p>如果移动下标达到了当前这一步的最大覆盖最远距离了，还没有到终点的话，那么就必须再走一步来增加覆盖范围，直到覆盖范围覆盖了终点。</p><p>我们每次在可跳范围内选择可以使得跳的更远的位置。</p><p>如下图，开始的位置是 2，可跳的范围是橙色的。然后因为 3 可以跳的更远，所以跳到 3 的位置。</p><p><img src="https://cdn.lthero.cn/post_images/course/MLc4a606188af249b911d06acb5e51b2f8a4589be68b02b900d32dfdd69a14d368-image.png" alt="img"></p><p>如下图，然后现在的位置就是 3 了，能跳的范围是橙色的，然后因为 4 可以跳的更远，所以下次跳到 4 的位置。</p><p><img src="https://cdn.lthero.cn/post_images/course/ML1c13a73f3ddd9c5badd83f818455c1ed16a251956473659ffcee6eb9a65ecdbf-image.png" alt="img"></p><p>在代码里，我们用 end 表示当前能跳的边界，对于上边第一个图的橙色 1，第二个图中就是橙色的 4，遍历数组的时候，到了边界，我们就重新更新新的边界。</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># 特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> L == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 当前能到达最远距离</span></span><br><span class="line">        end = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 下一步能到达最远距离</span></span><br><span class="line">        MaxReach = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">          <span class="comment"># 找到能跳得最远的</span></span><br><span class="line">            MaxReach = <span class="built_in">max</span>(nums[i] + i, MaxReach)</span><br><span class="line">            <span class="comment"># 遇到边界，就更新边界，并且步数加一</span></span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                end = MaxReach</span><br><span class="line">                <span class="keyword">if</span> MaxReach &gt;= L - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="1005-k-次取反后最大化的数组和">1005. K 次取反后最大化的数组和</h1><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/</a></p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，按以下方法修改该数组：</p><ul><li>选择某个下标 <code>i</code> 并将 <code>nums[i]</code> 替换为 <code>-nums[i]</code> 。</li></ul><p>重复这个过程恰好 <code>k</code> 次。可以多次选择同一个下标 <code>i</code> 。</p><p>以这种方式修改数组后，返回数组 <strong>可能的最大和</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,2,3], k = 1</span><br><span class="line">输出：5</span><br><span class="line">解释：选择下标 1 ，nums 变为 [4,-2,3] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,-1,0,2], k = 3</span><br><span class="line">输出：6</span><br><span class="line">解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,-3,-1,5,-4], k = 2</span><br><span class="line">输出：13</span><br><span class="line">解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 104</code></li></ul><h2 id="贪心思路">贪心思路</h2><p>先将nums排序，按绝对值排序，<strong>从大到小</strong></p><p>再对小于0的数字进行反转，每次消耗一次k</p><p>如果k有剩余，就对着最小的数进行反转剩下的k次（不过按奇偶划分下就行，偶数就不用反转，奇数就反转一次）</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestSumAfterKNegations</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort(key = <span class="keyword">lambda</span> x: <span class="built_in">abs</span>(x), reverse = <span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &lt; <span class="number">0</span>:</span><br><span class="line">                nums[i] *= -<span class="number">1</span></span><br><span class="line">                k -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            nums[-<span class="number">1</span>] *= -<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(nums)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(nums)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday28贪心part02&quot;&gt;LeetCodeCampsDay28贪心part02&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;覆盖范围的题目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;122-买卖股票的最佳时机-ii&quot;&gt;122.</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay27贪心part01</title>
    <link href="https://blog.lthero.cn/2025/07/21/LeetCodeCampsDay27/"/>
    <id>https://blog.lthero.cn/2025/07/21/LeetCodeCampsDay27/</id>
    <published>2025-07-21T08:51:43.000Z</published>
    <updated>2025-07-22T07:19:07.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday27贪心part01">LeetCodeCampsDay27贪心part01</h1><blockquote><p>贪心算法理论与一些基础题目</p></blockquote><h2 id="什么是贪心">什么是贪心</h2><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p><p>这么说有点抽象，来举一个例子：</p><p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p><p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p><p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p><p>再举一个例子如果是 有一堆盒子，你有一个背包体积为n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。</p><h3 id="贪心的例题">贪心的例题</h3><p>桌上有面值100，50，20，10，1的各种钞票各2张，如果只能拿5张，如何拿才能拿最多钱；</p><p>常识的思路肯定是<strong>优先拿最大的，然后次大的</strong>，先拿2张100，再2张50，一张20的；</p><h2 id="贪心的套路-什么时候用贪心">贪心的套路（什么时候用贪心）</h2><p>有没有什么套路可以一看就看出来是贪心。</p><p><strong>说实话贪心算法并没有固定的套路</strong>。</p><p>所以唯一的难点就是如何通过局部最优，推出整体最优。</p><p>那么如何能看出局部最优是否能推出整体最优呢？有没有什么固定策略或者套路呢？</p><p><strong>不好意思，也没有！</strong> 靠自己手动模拟，如果模拟可行，就可以试一试贪心策略，如果不可行，可能需要动态规划。</p><p>有同学问了如何验证可不可以用贪心算法呢？</p><p><strong>最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧</strong>。</p><p>可有有同学认为手动模拟，举例子得出的结论不靠谱，想要严格的数学证明。</p><p>一般数学证明有如下两种方法：</p><ul><li>数学归纳法</li><li>反证法</li></ul><p>看教课书上讲解贪心可以是一堆公式，估计大家连看都不想看，所以数学证明就不在我要讲解的范围内了，大家感兴趣可以自行查找资料。</p><p><strong>面试中基本不会让面试者现场证明贪心的合理性，代码写出来跑过测试用例即可，或者自己能自圆其说理由就行了</strong>。</p><p>举一个不太恰当的例子：我要用一下1+1 = 2，但我要先证明1+1 为什么等于2。严谨是严谨了，但没必要。</p><p>虽然这个例子很极端，但可以表达这么个意思：<strong>刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心</strong>。</p><p><strong>例如刚刚举的拿钞票的例子，就是模拟一下每次拿做大的，最后就能拿到最多的钱，这还要数学证明的话，其实就不在算法面试的范围内了，可以看看专业的数学书籍！</strong></p><p>所以这也是为什么很多同学通过（accept）了贪心的题目，但都不知道自己用了贪心算法，<strong>因为贪心有时候就是常识性的推导，所以会认为本应该就这么做！</strong></p><p><strong>那么刷题的时候什么时候真的需要数学推导呢？</strong></p><p>例如这道题目：<a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">链表：环找到了，那入口呢？ (opens new window)</a>，这道题不用数学推导一下，就找不出环的起始位置，想试一下就不知道怎么试，这种题目确实需要数学简单推导一下</p><h2 id="贪心一般解题步骤">贪心一般解题步骤</h2><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>这个四步其实过于理论化了，我们平时在做贪心类的题目时，如果按照这四步去思考，真是有点“鸡肋”。</p><p>做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了。</p><h2 id="总结">总结</h2><p>本篇给出了什么是贪心以及大家关心的贪心算法固定套路。</p><p><strong>不好意思了，贪心没有套路，说白了就是常识性推导加上举反例</strong>。</p><p>最后给出贪心的一般解题步骤，大家可以发现这个解题步骤也是比较抽象的，不像是二叉树，回溯算法，给出了那么具体的解题套路和模板。</p><h1 id="455-分发饼干">455. 分发饼干</h1><p><a href="https://leetcode.cn/problems/assign-cookies/">https://leetcode.cn/problems/assign-cookies/</a></p><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是满足尽可能多的孩子，并输出这个最大数值。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: g = [1,2,3], s = [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3 个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是 1，你只能让胃口值是 1 的孩子满足。</span><br><span class="line">所以你应该输出 1。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: g = [1,2], s = [1,2,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，2 个孩子的胃口值分别是 1,2。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出 2。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= g.length &lt;= 3 * 104</code></li><li><code>0 &lt;= s.length &lt;= 3 * 104</code></li><li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li></ul><p>**注意：**本题与 <a href="https://leetcode.cn/problems/maximum-matching-of-players-with-trainers/">2410. 运动员和训练师的最大匹配数</a> 题相同。</p><h2 id="贪心思路">贪心思路</h2><ol><li>本题的思路和拿钞票有点儿像？用尺寸最大的饼干优先满足胃口最大的孩子，如果胃口最大的无法满足，就去满足次大的……；</li><li>所以需要对孩子的胃口和饼干尺寸排序（从大到小）</li><li>具体做法<ol><li>可以用双指针，一个指向饼干，一个指向小孩；两者都各自从大到小遍历</li></ol></li></ol><p><img src="https://file1.kamacoder.com/i/algo/20230405225628.png" alt="img"></p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N+M)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findContentChildren</span>(<span class="params">self, g: <span class="type">List</span>[<span class="built_in">int</span>], s: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 先对g和s排序，按s最大值对g最大值进行匹配</span></span><br><span class="line">        g = <span class="built_in">sorted</span>(g, reverse = <span class="literal">True</span>)</span><br><span class="line">        s = <span class="built_in">sorted</span>(s, reverse = <span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        indexOfg = <span class="number">0</span></span><br><span class="line">        indexOfs = <span class="number">0</span></span><br><span class="line">        LenOfg = <span class="built_in">len</span>(g)</span><br><span class="line">        Lenofs = <span class="built_in">len</span>(s)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> indexOfg &lt; LenOfg <span class="keyword">and</span> indexOfs &lt; Lenofs:</span><br><span class="line">            <span class="keyword">if</span> s[indexOfs] &gt;= g[indexOfg]:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                indexOfs += <span class="number">1</span></span><br><span class="line">            indexOfg += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="53-最大子数组和">53. 最大子数组和</h1><p><a href="https://leetcode.cn/problems/maximum-subarray/">https://leetcode.cn/problems/maximum-subarray/</a></p><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong>是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p>**进阶：**如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><h2 id="贪心思路">贪心思路</h2><ol><li>当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。</li><li>从代码角度上来讲：遍历 nums，从头开始用 count 累积，如果 count 一旦加上 nums[i]变为负数，那么就应该从 nums[i+1]开始从 0 累积 count 了，因为已经变为负数的 count，只会拖累总和。</li></ol><p><img src="https://file1.kamacoder.com/i/algo/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.gif" alt="img"></p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># sumOfNums 如果小于等于0，就直接重置</span></span><br><span class="line">        maxOfsum = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        sumOfNums = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            sumOfNums += i</span><br><span class="line">            <span class="keyword">if</span> maxOfsum &lt; sumOfNums:</span><br><span class="line">                maxOfsum = sumOfNums</span><br><span class="line">            <span class="keyword">if</span> sumOfNums &lt; <span class="number">0</span>:</span><br><span class="line">                sumOfNums = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> maxOfsum</span><br></pre></td></tr></table></figure><h1 id="376-摆动序列">376. 摆动序列</h1><p><a href="https://leetcode.cn/problems/wiggle-subsequence/">https://leetcode.cn/problems/wiggle-subsequence/</a></p><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 **摆动序列 。**第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</li><li>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li></ul><p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,7,4,9,2,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">输出：7</span><br><span class="line">解释：这个序列包含几个长度为 7 摆动序列。</span><br><span class="line">其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><p>**进阶：**你能否用 <code>O(n)</code> 时间复杂度完成此题?</p><h2 id="贪心思路">贪心思路</h2><p><strong>局部最优：删除单调坡度上的节点（<strong>不包括单调坡度两端的节点</strong>），那么这个坡度就可以有两个局部峰值</strong>。</p><p>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。</p><p><img src="https://file1.kamacoder.com/i/algo/20201124174327597.png" alt="img"></p><p><strong>实际操作上，其实连删除的操作都不用做，因为题目要求的是最长摆动子序列的长度，所以只需要统计数组的峰值数量就可以了（相当于是删除单一坡度上的节点，然后统计长度）</strong></p><p><strong>这就是贪心所贪的地方，让峰值尽可能的保持峰值，然后删除单一坡度上的节点</strong></p><p>在计算是否有峰值的时候，大家知道遍历的下标 i ，计算 prediff（nums[i] - nums[i-1]） 和 curdiff（nums[i+1] - nums[i]），如果<code>prediff &lt; 0 &amp;&amp; curdiff &gt; 0</code> 或者 <code>prediff &gt; 0 &amp;&amp; curdiff &lt; 0</code> 此时就有波动就需要统计。</p><p>本题要考虑三种情况</p><ol><li>情况一：上下坡中有平坡</li><li>情况二：数组首尾两端</li><li>情况三：单调坡中有平坡</li></ol><p>情况一：上下坡中有平坡</p><p><img src="https://file1.kamacoder.com/i/algo/20230106170449.png" alt="img"></p><p>这种情况，答案是3</p><p>在图中，当 i 指向第一个 2 的时候，<code>prediff &gt; 0 &amp;&amp; curdiff = 0</code> ，当 i 指向最后一个 2 的时候 <code>prediff = 0 &amp;&amp; curdiff &lt; 0</code>。</p><p>如果我们采用，删左面三个 2 的规则，那么 当 <code>prediff = 0 &amp;&amp; curdiff &lt; 0</code> 也要记录一个峰值，因为他是把之前相同的元素都删掉留下的峰值。</p><p>所以我们记录峰值的条件应该是： <code>(preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0) || (preDiff &gt;= 0 &amp;&amp; curDiff &lt; 0)</code>，为什么这里允许 prediff == 0 ，就是为了 上面我说的这种情况。</p><p><img src="https://file1.kamacoder.com/i/algo/20230106172613.png" alt="img"></p><p>情况二,数组首尾两端</p><p>题目中说了，如果只有两个不同的元素，那摆动序列也是 2。</p><p>例如序列[2,5]，如果靠统计差值来计算峰值个数就需要考虑数组最左面和最右面的特殊情况。</p><p>因为我们在计算 prediff（nums[i] - nums[i-1]） 和 curdiff（nums[i+1] - nums[i]）的时候，至少需要三个数字才能计算，而数组只有两个数字。</p><p>这里我们可以写死，就是 如果只有两个元素，且元素不同，那么结果为 2。</p><p>不写死的话，如何和我们的判断规则结合在一起呢？</p><p>可以假设，数组最前面还有一个数字，那这个数字应该是什么呢？</p><p>之前我们在 讨论 情况一：相同数字连续 的时候， prediff = 0 ，curdiff &lt; 0 或者 &gt;0 也记为波谷。</p><p>那么为了规则统一，针对序列[2,5]，可以假设为[2,2,5]，这样它就有坡度了即 preDiff = 0，如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20201124174357612.png" alt="img"></p><p>针对以上情形，result 初始为 1（默认最右面有一个峰值），此时 curDiff &gt; 0 &amp;&amp; preDiff &lt;= 0，那么 result++（计算了左面的峰值），最后得到的 result 就是 2（峰值个数为 2 即摆动序列长度为 2）</p><p>情况三：单调坡度有平坡</p><p><img src="https://file1.kamacoder.com/i/algo/20230108171505.png" alt="img"></p><p>图中，我们可以看出，版本一的代码在三个地方记录峰值，但其实结果因为是 2，因为 单调中的平坡 不能算峰值（即摆动）。</p><p>之所以版本一会出问题，是因为我们实时更新了 prediff。</p><p>那么我们应该什么时候更新 prediff 呢？</p><p>我们只需要在 这个坡度 摆动变化的时候，更新 prediff 就行，这样 prediff 在 单调区间有平坡的时候 就不会发生变化，造成我们的误判。</p><h2 id="贪心代码">贪心代码</h2><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wiggleMaxLength</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> L &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line">        </span><br><span class="line">        curDiff = <span class="number">0</span></span><br><span class="line">        preDiff = <span class="number">0</span></span><br><span class="line">        result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L - <span class="number">1</span>):</span><br><span class="line">            curDiff = nums[i + <span class="number">1</span>] - nums[i]</span><br><span class="line">            <span class="keyword">if</span> preDiff &lt;= <span class="number">0</span> <span class="keyword">and</span> curDiff &gt; <span class="number">0</span> <span class="keyword">or</span> preDiff &gt;= <span class="number">0</span> <span class="keyword">and</span> curDiff &lt; <span class="number">0</span>:</span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">                preDiff = curDiff</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday27贪心part01&quot;&gt;LeetCodeCampsDay27贪心part01&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;贪心算法理论与一些基础题目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是贪心&quot;&gt;什么是贪心&lt;/h2</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>雅思出分(总分7.0/口语7.5)</title>
    <link href="https://blog.lthero.cn/2025/07/21/ExpOfIELTs/"/>
    <id>https://blog.lthero.cn/2025/07/21/ExpOfIELTs/</id>
    <published>2025-07-21T06:52:57.000Z</published>
    <updated>2025-07-21T11:07:39.432Z</updated>
    
    <content type="html"><![CDATA[<p>刚出分，很激动，没想到口语居然帮我提分了；</p><p>从4月开始自己准备，没报班，每天坚持做听力和阅读，可惜临考试的两周时间内没怎么刷这两个，写作本来想最后一个月专项冲刺，但事儿太多被耽误<br>了…</p><p>基础：裸考六级426分，平时有看英文影片的习惯，读研后经常阅读英文文献</p><h2 id="雅思复习经历">雅思复习经历</h2><p>下面按类总结下我的复习雅思经历</p><p>单词：断断续续背了一些，但都没坚持下来；（后悔）单词非常重要，听力哪怕听出来但不会写也不行！</p><p>听力：用的papa雅思，刷剑桥真题，从C9刷到C19，至少每个都刷了两遍；平时会看油管asmongold</p><p>阅读：也是papa雅思，刷真题，从C9到C18都刷了一遍；</p><p>写作：买了本simon的写作书，但咋说呢，记了一些模板但没法灵活应用；主要还是练少了…</p><p>口语：刚开始买个了语料库，按里面内容练习了半个多月，但记了忘，不会活用；直到…闲鱼买了口语老师的课，上了一课就知道我口语准备错方向了；之前死记硬背的口语语料不会灵活应用，跟着老师上了几节课，至少把口语回复的逻辑搞清楚了，感谢～口语就是得多说，并且不要背稿子～</p><h2 id="感受与教训">感受与教训</h2><ol><li>听力和阅读提分还是很快的，因为听力和阅读主要是“输入+处理”，对大家应该不成问题，多刷题多背单词就好；</li><li>写作和口语才是比较难的两个部分，因为它俩是“处理+输出”，需要掌握一些“基础模板句子/短语/用法”后，学会灵活应用这些基础，就像拼积木，用最基础的模块把你的想法灵活表达出来。<ol><li>写了什么或说了什么不是很重要，雅思到底是语言能力考查，而不是知识面的考察，如果你能把水煮白菜都描述得天花乱缀，你就掌握了其核心。</li><li>口语更像是聊天过程，不是很推荐硬记模板，你可以把模板的核心故事记下，然后剩下的东西靠自己编，因为说自己的真实经历会让自己更有自信、更连贯，而背出来的内容很明显能听出来。我对比过回答同一个问题，如果是纯背模板（完全一句不差）会让自己说话像背稿子，很虚假；如果是只记模板核心故事，将它内化为自己的“虚假经历”，在描述时也会更有生情并茂，像是个活人说话～</li></ol></li></ol><h3 id="关于单词">关于单词</h3><p>一定要背单词</p><p>雅思的单词分两类：简单（四级）词需要熟悉且会拼会用；难度（雅思词汇真经）需要看到认识就好</p><ol><li>雅思阅读单词难度比听力与口语要上一个台阶，听力和口语只要把四级词学得非常熟悉（比如会拼写，会用！不仅是会读而是看到词大概知道怎么造句），而雅思阅读的单词看到认识就行了。</li></ol><h3 id="刷题平台">刷题平台</h3><p>雅思哥/papa雅思等都不错，免费好用；写作推荐一些带ai自动判分的网站，比如https://engnovate.com/，虽然需要会员，但价格挺便宜的而且上面范文多，判分也比较准确，当然也可以打造个自己的chatbot专门给写作打分。</p><p><img src="https://cdn.lthero.cn/post_images/course/MLIELTs-2025.7.18%E6%88%90%E7%BB%A9.png" alt="IELTs-2025.7.18成绩"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚出分，很激动，没想到口语居然帮我提分了；&lt;/p&gt;
&lt;p&gt;从4月开始自己准备，没报班，每天坚持做听力和阅读，可惜临考试的两周时间内没怎么刷这两个，写作本来想最后一个月专项冲刺，但事儿太多被耽误&lt;br&gt;
了…&lt;/p&gt;
&lt;p&gt;基础：裸考六级426分，平时有看英文影片的习惯，读研</summary>
      
    
    
    
    <category term="IELTs" scheme="https://blog.lthero.cn/categories/IELTs/"/>
    
    
    <category term="IELTs" scheme="https://blog.lthero.cn/tags/IELTs/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay25回溯part04</title>
    <link href="https://blog.lthero.cn/2025/07/19/LeetCodeCampsDay25/"/>
    <id>https://blog.lthero.cn/2025/07/19/LeetCodeCampsDay25/</id>
    <published>2025-07-19T12:47:59.000Z</published>
    <updated>2025-07-20T13:59:59.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday25回溯part04">LeetCodeCampsDay25回溯part04</h1><blockquote><p>491是去重复的另一种情况，此时是不能将数组先排序再判断</p></blockquote><h1 id="491-非递减子序列">491. 非递减子序列</h1><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">https://leetcode.cn/problems/non-decreasing-subsequences/</a></p><p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,6,7,7]</span><br><span class="line">输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,4,3,2,1]</span><br><span class="line">输出：[[4,4]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 15</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="回溯思路">回溯思路</h2><p>本题目和<code>90. 子集II</code>有点像，但不同点是，<strong>本题不让排序</strong>，就没法使用nums[i] == nums[i - 1]来判断某个数字是否在本层被用过了，但记住，去重的核心思路是：当前数字num[i]是否在num[start: i]（不包含i）出现过，如果没出现过就可以用，否则continue，比如[7, 6, 7]，需要判断第二个7（即nums[i]，是否在nums[start: i]里）；</p><p>此外，还有个剪枝的条件，如果path的最后一个值比num[i]大，则可以跳过；</p><ol><li>输入输出：输入列表，开始下标；无返回值</li><li>终止条件：如果path长度大于2个就添加，无其它条件（单层逻辑必须保证此时是满足题目要求的）</li><li>单层逻辑：先去重，再剪枝掉path的最后一个值比num[i]大情况（可以不做，因为isLegal函数也会处理），随后，<strong>将当前数字添加到path并使用isLegal函数判断path是否合规</strong>，如果全规则再递归其子串；</li></ol><p><img src="https://file1.kamacoder.com/i/algo/20201124200229824.png" alt="img"></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度O(N * 2^N)</li><li>空间复杂度O(N)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">islegal</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># 需要保证nums[i + 1] &gt;= nums[i]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt; nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], startIndex: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) &gt; <span class="number">1</span>:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(self.path)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="comment"># 去重</span></span><br><span class="line">            <span class="comment"># 不能用nums[i] == nums[i - 1]来判断，因为能用这个去重的前提是有序的数组，而这题目是无序的</span></span><br><span class="line">            <span class="comment"># 但需要判断当前nums[i]是否在这层之前出现过</span></span><br><span class="line">            <span class="comment"># 比如[7, 6, 7]，需要判断第二个7（即nums[i]，是否在nums[start: i]里）</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> nums[startIndex: i] <span class="keyword">and</span> i &gt; startIndex:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 剪枝</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.path) &gt; <span class="number">1</span> <span class="keyword">and</span> self.path[-<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># </span></span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            <span class="comment"># print(self.path)        </span></span><br><span class="line">            <span class="keyword">if</span> self.islegal(self.path[:]):</span><br><span class="line">                self.foo(nums, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubsequences</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 本题似乎不能直接对nums排序，和子集II思路不同</span></span><br><span class="line">        <span class="comment"># 需要个子函数判断当前path里的是否合规</span></span><br><span class="line">        self.foo(nums)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="46-全排列">46. 全排列</h1><p><a href="https://leetcode.cn/problems/permutations/">https://leetcode.cn/problems/permutations/</a></p><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h2 id="回溯思路">回溯思路</h2><p>画个二叉树的图后，可以发现，随着递归深度增加，for循环遍历的对象是未在path里的元素，所以需要有个used表来记录哪些元素被访问过；可以使用dict或者list实现</p><ol><li>输入输出：输入列表，无返回值</li><li>终止条件：当path长度等于nums长度则添加到res，如果path长度大于nums长度直接退出</li><li>单层逻辑：for循环遍历的对象是未在path里的元素，所以是for i in range(len(nums))；并且需要判断是否被访问过，只递归未访问过的元素</li></ol><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">        self.avoidIndex = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == self.targetLen:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) &gt; self.targetLen:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> self.avoidIndex.get(nums[i], <span class="number">0</span>) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 或者使用列表</span></span><br><span class="line">            <span class="comment"># if self.avoidIndex[i] != 0:</span></span><br><span class="line">            <span class="comment">#    continue</span></span><br><span class="line">            self.avoidIndex[nums[i]] = <span class="number">1</span></span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            self.foo(nums)</span><br><span class="line">            self.path.pop()</span><br><span class="line">            self.avoidIndex[nums[i]] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        self.targetLen = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># 全排列的树和组合类型的树不太一样，不需要使用startIndex，然而它for循环的被迭代对象是&quot;不在path里的所有元素&quot;</span></span><br><span class="line">        self.foo(nums)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="47-全排列-ii">47. 全排列 II</h1><p><a href="https://leetcode.cn/problems/permutations-ii/">https://leetcode.cn/problems/permutations-ii/</a></p><p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：</span><br><span class="line">[[1,1,2],</span><br><span class="line"> [1,2,1],</span><br><span class="line"> [2,1,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 8</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><h2 id="回溯思路">回溯思路</h2><p>本题目和<code>47.全排列II</code>的不同点是“本题有可重复数字”，面对可重复数字，就需要去重复（比如先排序，再用nums[i]==nums[i-1]判断）；另一方面，本题也需要和一样，需要使用used数组来保证递归时只遍历“剩下”的子串（纵向条件）</p><ol><li>输入输出：输入列表，无直接返回值</li><li>终止条件：当path长度与nums长度相等即添加到res</li><li>单层逻辑：纵向上，只遍历剩余字符串；横向上，需要先去重复，再进行（标记当前数字被use-&gt;添加到path-&gt; 递归下一层 -&gt; 从path弹出回溯-&gt; 标记当前数字未被use)</li><li>这是去重复使用<code>if i &gt; 0 and nums[i] == nums[i - 1] and self.used[i - 1] == 0:                continue</code>，注意这里的<code>self.used[i - 1] == 0</code>，表示只有<strong>nums[i - 1]被用过了，而且nums[i]==nums[i-1]时，才能执行for单层逻辑</strong>，否则就跳过当前数字，因为当nums[i - 1]未被用过时，则nums[i - 1]就已经包含了nums[i]的情况（可以看下面的图）</li></ol><p><strong>还要强调的是去重一定要对元素进行排序，这样我们才方便通过相邻的节点来判断是否重复使用了</strong>。</p><p>我以示例中的 [1,1,2]为例 （为了方便举例，已经排序）抽象为一棵树，去重过程如图：</p><p><img src="https://file1.kamacoder.com/i/algo/20201124201331223.png" alt="img"></p><p><strong>一般来说：组合问题和排列问题是在树形结构的叶子节点上收集结果，而子集问题就是取树上所有节点的结果</strong>。</p><p>在<a href="https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html">46.全排列 (opens new window)</a>中已经详细讲解了排列问题的写法，在<a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html">40.组合总和II (opens new window)</a>、<a href="https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html">90.子集II (opens new window)</a>中详细讲解了去重的写法</p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度: O(n! * n)</li><li>空间复杂度: O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == self.targetLen:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">          <span class="comment"># 这个used是保证递归时只遍历“剩下”的子串（纵向条件）</span></span><br><span class="line">            <span class="keyword">if</span> self.used[i] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 这个是保证去重复（横向条件），不能只用nums[i] == nums[i - 1]，否则例如输入：[1,1,2]，则不会有&quot;112&quot;这样的输出</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> self.used[i - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 需要再添加个self.used[i - 1] == 0条件，即，只有num[i - 1]被用过了，而且num[i]==num[i-1]时，才能执行for单层逻辑</span></span><br><span class="line">            self.used[i] = <span class="number">1</span></span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            self.foo(nums)</span><br><span class="line">            self.path.pop()</span><br><span class="line">            self.used[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 先对nums排序，再判断nums[i]是否等于nums[i-1]</span></span><br><span class="line">        nums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">        self.targetLen = <span class="built_in">len</span>(nums)</span><br><span class="line">        self.used = [<span class="number">0</span>] * self.targetLen</span><br><span class="line">        self.foo(nums)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="反思">反思</h2><p>大家发现，去重最为关键的代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果改成 <code>used[i - 1] == true</code>， 也是正确的!</strong>，去重代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为什么呢，就是上面我刚说的，如果要对**树层中前一位（横向）<strong>去重，就用<code>used[i - 1] == false</code>，如果要对</strong>树枝前一位（纵向）**去重用<code>used[i - 1] == true</code>。</p><p><strong>对于排列问题，树层上去重（横向）和树枝上去重（纵向），都是可以的，但是树层上去重效率更高！</strong></p><p>这么说是不是有点抽象？</p><p>来来来，我就用输入: [1,1,1] 来举一个例子。</p><p>树层上去重(used[i - 1] == false)的树形结构如下：</p><p><img src="https://file1.kamacoder.com/i/algo/20201124201406192.png" alt="47.全排列II2"></p><p>树枝上去重（used[i - 1] == true）的树型结构如下：</p><p><img src="https://file1.kamacoder.com/i/algo/20201124201431571.png" alt="47.全排列II3"></p><p>大家应该很清晰的看到，<strong>树层上对前一位（横向）去重非常彻底，效率很高</strong>，树枝上对前一位去（纵向）重虽然最后可以得到答案，<strong>但是做了很多无用搜索</strong>。</p><h1 id="51-n-皇后">51. N 皇后</h1><p><a href="https://leetcode.cn/problems/n-queens/">https://leetcode.cn/problems/n-queens/</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class="line">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><h2 id="回溯思路">回溯思路</h2><blockquote><p>本方法特点：不创建初始棋盘，并且isValid函数也无需对整个棋盘进行遍历</p></blockquote><p>在做了前面的全排列与各种子集问题后，这题目反而不难，完全可以按下面的图，把代码写出来；横向遍历+纵向遍历，仍然使用path记录路径，此外，需要一个判别函数islegal()判断当前位置是否合规（在<code>491.非递减子序列</code>和<code>93. 复原 IP 地址</code> 也使用了islegal函数）</p><ol><li>输入输出：输入棋盘长度，无直接返回值</li><li>终止条件：当path长度与棋盘长度一致，返回结果</li><li>单层逻辑：横向遍历(for循环里)，先判断当前位置(depth, x)是否合规，其中depth指纵向深度下标，x指横向下标；如果合规，再将(depth, x)添加到path里，递归下一个深度，从path弹出回溯。（这里可以仅将x添加到path里，因为depth和x的下标是一样的）</li><li>islegal判断条件：<ol><li>函数功能：当前位置的<strong>上边列、左上角、右上角</strong>没有数字；</li><li>输入输出：输入位置(depth, x) ，输出bool</li><li>不像以往那种，先创建个棋盘，再对棋盘进行遍历；我们仅需要对path和当前位置进行判断即可，对path里的每个元素i遍历<ol><li>假设path记录的是坐标（[0,0], [1,2]），对于一个当前位置[2,0]</li><li>if i[1] == x， 说明当前列(x) 上边有元素，返回False</li><li>if depth - i[0] == x - i[1]，说明当前位置左上角有元素，返回False</li><li>if depth - i[0] == i[1] - x，说明当前位置右上角有元素，返回False</li></ol></li></ol></li></ol><p>判断函数甚至可以精简成这样（但这样就看不出来动机了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isLegal</span>(<span class="params">self, depth, col</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.path:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">1</span>] == col <span class="keyword">or</span> depth - i[<span class="number">0</span>] == <span class="built_in">abs</span>(col - i[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，本方法不需要对当前行的左边进行判断，<strong>因为进入当前行时，左边一定是不会有元素的</strong> 我们总是从上到下处理每一行（例如，从行 0 到行 N-1）。 当我们到达第 ⁠depth 行时，⁠self.path 中只包含之前行（0 到 depth-1）的皇后位置</p></blockquote><p><img src="https://file1.kamacoder.com/i/algo/20210130182532303.jpg" alt="img"></p><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当前path记录的是坐标（比如[0,0], [1,2]），传入的是位置[2,0]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isLegal</span>(<span class="params">self, depth, col</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.path:</span><br><span class="line">        <span class="comment"># 同一行的左边列是否有皇后</span></span><br><span class="line">        <span class="comment"># 我们到达第 ⁠depth 行时，⁠self.path 中只包含之前行（0 到 depth-1）的皇后位置</span></span><br><span class="line">        <span class="comment"># 所以不用判断</span></span><br><span class="line">            <span class="comment"># if i[0] == depth:</span></span><br><span class="line">                <span class="comment"># return False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 同一列的上边行是否有皇后</span></span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">1</span>] == col:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 若左上角有皇后</span></span><br><span class="line">            <span class="keyword">if</span> depth - i[<span class="number">0</span>] == col - i[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 若右上角有皇后</span></span><br><span class="line">            <span class="keyword">if</span> depth - i[<span class="number">0</span>] == i[<span class="number">1</span>] - col:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list2res</span>(<span class="params">self, path: <span class="type">List</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 创建个长度为len(path)的字符</span></span><br><span class="line">        board = <span class="built_in">list</span>()</span><br><span class="line">        L = <span class="built_in">len</span>(path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">            board.append(<span class="string">&quot;.&quot;</span>*(i[<span class="number">1</span>]) + <span class="string">&quot;Q&quot;</span> + <span class="string">&quot;.&quot;</span>*(L - i[<span class="number">1</span>] - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, depth: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="comment"># 终止条件：深度depth等于n时即可退出</span></span><br><span class="line">        <span class="keyword">if</span> depth == n:</span><br><span class="line">            self.res.append(self.list2res(self.path[:]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 横向遍历col</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> self.isLegal(depth, col):</span><br><span class="line">                <span class="comment"># path其实可以用记录col，depth本身等于col下标</span></span><br><span class="line">                self.path.append([depth, col])</span><br><span class="line">                self.foo(n, depth + <span class="number">1</span>)</span><br><span class="line">                self.path.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        self.foo(n)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h2 id="回溯改进思路">回溯改进思路</h2><p>为了判断一个位置所在的列和两条斜线上是否已经有皇后，使用三个集合 columns、diagonals1 和 diagonals2 分别记录每一列以及两个方向的每条斜线上是否有皇后。</p><p>列的表示法很直观，一共有 N 列，每一列的下标范围从 0 到 N−1，使用列的下标即可明确表示每一列。</p><p>如何表示两个方向的斜线呢？对于每个方向的斜线，需要找到斜线上的每个位置的行下标与列下标之间的关系。</p><p>方向一的斜线为从左上到右下方向，同一条斜线上的每个位置满足行下标与列下标之差相等，例如 (0,0) 和 (3,3) 在同一条方向一的斜线上。因此使用行下标与列下标之差即可明确表示每一条方向一的斜线。</p><h2 id="回溯代码2">回溯代码2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">        self.cols = <span class="built_in">set</span>()</span><br><span class="line">        self.diag1 = <span class="built_in">set</span>()</span><br><span class="line">        self.diag2 = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当前path记录的是坐标（比如-[0,0], [1,2]），对于一个节点[2,0]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isLegal</span>(<span class="params">self, depth, x</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> self.cols:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> depth + x <span class="keyword">in</span> self.diag1:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> depth - x <span class="keyword">in</span> self.diag2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list2res</span>(<span class="params">self, path: <span class="type">List</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 创建个长度为len(path)的字符串，对i in path，</span></span><br><span class="line">        board = <span class="built_in">list</span>()</span><br><span class="line">        L = <span class="built_in">len</span>(path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">            board.append(<span class="string">&quot;.&quot;</span>*(i[<span class="number">1</span>]) + <span class="string">&quot;Q&quot;</span> + <span class="string">&quot;.&quot;</span>*(L - i[<span class="number">1</span>] - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, depth: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="comment"># 终止条件：深度y等于n时即可退出</span></span><br><span class="line">        <span class="keyword">if</span> depth == n:</span><br><span class="line">            self.res.append(self.list2res(self.path[:]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 横向遍历x</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> self.isLegal(depth, x):</span><br><span class="line">                self.path.append([depth, x])</span><br><span class="line">                self.cols.add(x)</span><br><span class="line">                self.diag1.add(depth + x)</span><br><span class="line">                self.diag2.add(depth - x)</span><br><span class="line">                self.foo(n, depth + <span class="number">1</span>)</span><br><span class="line">                self.cols.remove(x)</span><br><span class="line">                self.diag1.remove(depth + x)</span><br><span class="line">                self.diag2.remove(depth - x)</span><br><span class="line">                self.path.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        self.foo(n)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="52-n-皇后-ii">52. N 皇后 II</h1><p><a href="https://leetcode.cn/problems/n-queens-ii/">https://leetcode.cn/problems/n-queens-ii/</a></p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n × n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回 <strong>n 皇后问题</strong> 不同的解决方案的数量。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：2</span><br><span class="line">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当前path记录的是坐标（比如[0,0], [1,2]），传入的是位置[2,0]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isLegal</span>(<span class="params">self, depth, col</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.path:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">1</span>] == col <span class="keyword">or</span> depth - i[<span class="number">0</span>] == <span class="built_in">abs</span>(col - i[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, depth: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="comment"># 终止条件：深度depth等于n时即可退出</span></span><br><span class="line">        <span class="keyword">if</span> depth == n:</span><br><span class="line">            self.res += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 横向遍历col</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> self.isLegal(depth, col):</span><br><span class="line">                <span class="comment"># path其实可以用记录col，depth本身等于col下标</span></span><br><span class="line">                self.path.append([depth, col])</span><br><span class="line">                self.foo(n, depth + <span class="number">1</span>)</span><br><span class="line">                self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">totalNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        self.foo(n)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="332-重新安排行程">332. 重新安排行程</h1><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">https://leetcode.cn/problems/reconstruct-itinerary/</a></p><p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [fromi, toi]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><ul><li>例如，行程 <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> 与 <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code> 相比就更小，排序更靠前。</li></ul><p>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]</span><br><span class="line">输出：[&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</span><br><span class="line">输出：[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</span><br><span class="line">解释：另一种有效的行程是 [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] ，但是它字典排序更大更靠后。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tickets.length &lt;= 300</code></li><li><code>tickets[i].length == 2</code></li><li><code>fromi.length == 3</code></li><li><code>toi.length == 3</code></li><li><code>fromi</code> 和 <code>toi</code> 由大写英文字母组成</li><li><code>fromi != toi</code></li></ul><h2 id="回溯思路">回溯思路</h2><p>这个方法有点儿怪，题目要求从JFK出发并且绕完所有的机场，题目保证一定有解；所以只要从JFK出发，遍历它能到达的落地节点，再从落地节点出发，遍历落地节点的落地节点……比如，JFK-&gt;KUL，到达KUL则终点了，此时将KUL添加到res里；随后遍历JFK-&gt;NRT，NRT-&gt;JFK，又到了JFK，但此时JFK已经飞过了KUL和NRT（相当于没有从JFK的票了)，于是此时JFK(作为落地节点)被添加到res里；回到NRT，它也没有其它落地节点了，它被添加到res；最后回到JFK(作为初始的出发节点)也被添加到res里。</p><ol><li>回溯的输入输出：输入出发机场和现有的机票，无直接输出</li><li>终止条件：当前出发的机场没有机票时停止，此时将当前机场添加到res里</li><li>单层逻辑：遍历当前出发的机场所有机票，如果有票，先消耗这张票，递归（纵向遍历）这个票的终点机场；<strong>注意，这里没有回溯</strong>，即，不会把消耗的机票还原回去，试想下，如果还原回去，此时就会进入无尽的循环。</li></ol><p>![image-20250720211959981](/Users/lthero/Library/Application Support/typora-user-images/image-20250720211959981.png)</p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度O(nLogN)</li><li>空间复杂度O(N)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, airport, targets</span>):</span><br><span class="line">        <span class="keyword">while</span> targets[airport]:</span><br><span class="line">            next_airport = targets[airport].pop()</span><br><span class="line">            self.foo(next_airport, targets)</span><br><span class="line">        <span class="comment"># 当前出发的机场没有机票时停止，此时将当前机场添加到res里</span></span><br><span class="line">        self.res.append(airport)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findItinerary</span>(<span class="params">self, tickets: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">        targets = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> ticket <span class="keyword">in</span> tickets:</span><br><span class="line">            targets[ticket[<span class="number">0</span>]].append(ticket[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> targets:</span><br><span class="line">            targets[key].sort(reverse = <span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        self.foo(<span class="string">&quot;JFK&quot;</span>, targets)</span><br><span class="line">        <span class="keyword">return</span> self.res[::-<span class="number">1</span>]</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h1 id="37-解数独">37. 解数独</h1><p><a href="https://leetcode.cn/problems/sudoku-solver/">https://leetcode.cn/problems/sudoku-solver/</a></p><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>'.'</code> 表示。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：[[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 <code>'.'</code></li><li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li></ul><p>之前刷到的题目：<a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html">77.组合（组合问题） (opens new window)</a>，<a href="https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html">131.分割回文串（分割问题） (opens new window)</a>，<a href="https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html">78.子集（子集问题） (opens new window)</a>，<a href="https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html">46.全排列（排列问题） (opens new window)</a>，以及<a href="https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html">51.N皇后（N皇后问题） (opens new window)</a>，其实这些题目都是一维递归。</p><p><a href="https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html">N皇后问题 (opens new window)</a>是因为每一行每一列只放一个皇后，只需要一层for循环遍历一行，递归来遍历列，然后一行一列确定皇后的唯一位置。</p><p>本题就不一样了，<strong>本题中棋盘的每一个位置都要放一个数字（而N皇后是一行只放一个皇后），并检查数字是否合法，解数独的树形结构要比N皇后更宽更深</strong>。</p><p><img src="https://file1.kamacoder.com/i/algo/2020111720451790-20230310131816104.png" alt="数独的树"></p><ol><li>输入输出：输入棋盘，输出bool，表示如果找到解就直接一路return，不用继续搜索了</li><li>终止条件：本题递归<strong>不用终止条件</strong>，解数独是要<strong>遍历整个树形结构寻找可能的叶子节点</strong>就立刻返回。</li><li>单层逻辑：横向遍历是对棋盘的高、宽进行二维遍历，此外还需要对数字(1~9)进行逐个横向遍历，仅只有当前位置上(row, col)填写数字i是合规的情况下，才能纵向遍历<ol><li>先判断当前位置是否数字，如果是则跳过</li><li>判断当前位置的数字i是否合规，如果合规，则将board的当前位置更新为这个数字i，再纵向遍历（递归），最后回溯将board当前位置更新为’.’</li></ol></li><li>判断当前位置的数字是否合规<ol><li>判断是否同行、同列、是否同一个小九宫格</li><li>注意小九宫格的判断方法，先求这个小九宫格里的行、列开始坐标，再此坐标上加三即可</li></ol></li></ol><h2 id="回溯代码">回溯代码</h2><p>下面代码会超时，但思路是正确的，超时的原因是九宫格判断，如果要遍历整个棋盘，会浪费大量时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">islegal</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span>, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 判断同行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.W):</span><br><span class="line">            <span class="keyword">if</span> self.board[row][i] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断同列</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.H):</span><br><span class="line">            <span class="keyword">if</span> self.board[i][col] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断九宫格内</span></span><br><span class="line">        <span class="comment"># 先得到num所在的九宫格</span></span><br><span class="line">        rowStart = (row // <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line">        colStart = (col // <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rowStart, rowStart + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(colStart, colStart + <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.board[i][j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(self.H):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(self.W):</span><br><span class="line">                <span class="keyword">if</span> self.board[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">if</span> self.islegal(row, col, <span class="built_in">str</span>(i)):</span><br><span class="line">                        self.board[row][col] = <span class="built_in">str</span>(i)</span><br><span class="line">                        <span class="keyword">if</span> self.foo():</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                        self.board[row][col] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.board = board</span><br><span class="line">        self.H = <span class="built_in">len</span>(self.board)</span><br><span class="line">        self.W = <span class="built_in">len</span>(self.board[<span class="number">0</span>])</span><br><span class="line">        self.foo()</span><br><span class="line">        <span class="keyword">return</span> self.board</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>不超时版本，用空间换时间，给每行每列每个小九宫格添加个used数组，并且！不要使用函数调用！否则一定会超时</p><p>The inline condition is directly part of the loop in your ⁠backtracking method. The Python interpreter can execute it without any extra indirection. In contrast, a method call introduces a “jump” to another part of the code, which can slow things down.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.row_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        self.col_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        self.box_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        self.board = board</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                num = self.board[row][col]</span><br><span class="line">                <span class="keyword">if</span> num == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                self.row_used[row].add(num)</span><br><span class="line">                self.col_used[col].add(num)</span><br><span class="line">                self.box_used[(row // <span class="number">3</span>) * <span class="number">3</span> + col // <span class="number">3</span>].add(num)</span><br><span class="line">        self.backtracking(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">islegal</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span>, num: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> (num <span class="keyword">not</span> <span class="keyword">in</span> self.row_used[row] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> self.col_used[col] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> self.box_used[(row // <span class="number">3</span>) * <span class="number">3</span> + col // <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        row: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        col: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        next_row, next_col = (row, col + <span class="number">1</span>) <span class="keyword">if</span> col &lt; <span class="number">8</span> <span class="keyword">else</span> (row + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> self.board[row][col] != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.backtracking(</span><br><span class="line">                next_row, next_col</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)):</span><br><span class="line">          <span class="comment"># 不要使用函数调用，如果调用self.islegal(row, col, num)一定会超时</span></span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> self.row_used[row] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> self.col_used[col] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> self.box_used[(row // <span class="number">3</span>) * <span class="number">3</span> + col // <span class="number">3</span>]:</span><br><span class="line">                self.board[row][col] = num</span><br><span class="line">                self.row_used[row].add(num)</span><br><span class="line">                self.col_used[col].add(num)</span><br><span class="line">                self.box_used[(row // <span class="number">3</span>) * <span class="number">3</span> + col // <span class="number">3</span>].add(num)</span><br><span class="line">                <span class="keyword">if</span> self.backtracking(</span><br><span class="line">                    next_row, next_col</span><br><span class="line">                ):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                self.board[row][col] = <span class="string">&quot;.&quot;</span></span><br><span class="line">                self.row_used[row].remove(num)</span><br><span class="line">                self.col_used[col].remove(num)</span><br><span class="line">                self.box_used[(row // <span class="number">3</span>) * <span class="number">3</span> + col // <span class="number">3</span>].remove(num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday25回溯part04&quot;&gt;LeetCodeCampsDay25回溯part04&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;491是去重复的另一种情况，此时是不能将数组先排序再判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;4</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay24回溯part03</title>
    <link href="https://blog.lthero.cn/2025/07/19/LeetCodeCampsDay24/"/>
    <id>https://blog.lthero.cn/2025/07/19/LeetCodeCampsDay24/</id>
    <published>2025-07-19T07:51:05.000Z</published>
    <updated>2025-07-19T12:11:18.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday24回溯part03">LeetCodeCampsDay24回溯part03</h1><blockquote><p>再次使用了去重复的技巧，其中78,90两题目像是77.组合的变体，都是每次向path添加一个元素的类型；</p><p>而93 复原ip以及131. 分割回文串都是每次向path添加多个元素的类型</p></blockquote><h1 id="93-复原-ip-地址">93. 复原 IP 地址</h1><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">https://leetcode.cn/problems/restore-ip-addresses/</a></p><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>'.'</code> 分隔。</p><ul><li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li></ul><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>'.'</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;25525511135&quot;</span><br><span class="line">输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;0000&quot;</span><br><span class="line">输出：[&quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;101023&quot;</span><br><span class="line">输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>s</code> 仅由数字组成</li></ul><h2 id="回溯思路">回溯思路</h2><p>本题难度还是有的，但在做了<code>131.分割回文串</code> 后，会发现这两个题目思路是相似的</p><p>在131.里，需要先在for循环里判断 s[start, i+1]是否是回文串，如果是再添加到path里；而这题目也是如此，先判断s[start, i+1]是否是合规的数字（比如数字不大于255，如果0开头则必须只能有0，数字长度不大于4）；如果合规，再将数字添加到path里，再纵向搜索，再弹出以回溯；</p><ol><li>输入输出：输入字符串，以及startIndex, 和深度（因为ip最多四个整数，所以深度只有4，depth等于5时需要收割结果）</li><li>终止条件：当startIndex小于len(s)时，需要判断如果深度已经为4且len(s[startIndex:])大于3（即明显会有多余的数字不会被处理），直接返回，<strong>从而保证deepth==5时，一定是可以收割结果的</strong>；当startIndex不小于len(s)，且depth等于5，此时才将结果添加到res</li><li>单层逻辑：先判断s[start, i+1]是否是合规的数字，如果合规，再将数字添加到path里，再纵向搜索，再弹出以回溯；</li></ol><p>131.和本题都是每次将s[start: i+1]子串添加到path里，而最早做的<code>77.组合</code> 以及下面的<code>78.子集</code>每次只用添加一个元素s[i]到path里</p><p>另外，这里的深度，可以用len(self.path[:]) == 4 来判断，只要保证<strong>只有当self.path长度为4时才能收割结果。</strong></p><p><img src="https://file1.kamacoder.com/i/algo/20201123203735933.png" alt="img"></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度: O(3^4)，IP地址最多包含4个数字，每个数字最多有3种可能的分割方式，则搜索树的最大深度为4，每个节点最多有3个子节点。</li><li>空间复杂度: O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 本题目的递归深度为4</span></span><br><span class="line">    <span class="comment"># 横向遍历的条件，长度从1到3（闭区间）进行遍历（且不能0开始)，剩下的交给纵向</span></span><br><span class="line">    <span class="comment"># 纵向遍历的终止条件，如果最后一次剩下的数字大于3就返回，</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isLegal</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="comment"># 如果开头数字是0，则单独划分，不用继续for循环了</span></span><br><span class="line">        LofS = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> LofS &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 长度大于3，可以不加，传入时已经保证了长度不会大于3</span></span><br><span class="line">        <span class="keyword">if</span> LofS &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 大于255</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(s) &gt; <span class="number">255</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">List2IPform</span>(<span class="params">self, s: <span class="type">List</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, s: <span class="built_in">str</span>, startIndex: <span class="built_in">int</span> = <span class="number">0</span>, depth: <span class="built_in">int</span> = <span class="number">1</span></span>):</span><br><span class="line">        LofS = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="comment"># 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> startIndex &lt; LofS:</span><br><span class="line">          <span class="comment"># 如果最后一次剩下的数字大于3就返回，保证deepth==5时，一定是可以收割结果的</span></span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">4</span> <span class="keyword">and</span> <span class="built_in">len</span>(s[startIndex:]) &gt; <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> depth == <span class="number">5</span>:</span><br><span class="line">                self.res.append(self.List2IPform(self.path[:]))</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 横向遍历</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, LofS):</span><br><span class="line">            <span class="comment"># 如果大于3个长度，直接断</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; startIndex + <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 检测startIndex到i的字符串是否合规</span></span><br><span class="line">            <span class="keyword">if</span> self.isLegal(s[startIndex: i + <span class="number">1</span>]):</span><br><span class="line">              <span class="comment"># 注意这里是一次添加了s[start: i+1]个元素进去</span></span><br><span class="line">                self.path.append(s[startIndex: i + <span class="number">1</span>])</span><br><span class="line">                <span class="comment"># 剩下的子串交给纵向遍历</span></span><br><span class="line">                self.foo(s, i + <span class="number">1</span>, depth + <span class="number">1</span>)</span><br><span class="line">                self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restoreIpAddresses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        self.foo(s)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="78-子集">78. 子集</h1><p><a href="https://leetcode.cn/problems/subsets/">https://leetcode.cn/problems/subsets/</a></p><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><h2 id="回溯思路">回溯思路</h2><ol><li>这题，需要把所有可能的子集都放在res里，本质上是遍历所有可能，在<code>77组合</code>里是求’k’个数的组合，那题目的终止条件（添加到res的条件）是len(path) == k，比如下图所示，只有当path里装了2个时，才将结果放在res；</li></ol><p><img src="https://file1.kamacoder.com/i/algo/20201123195223940.png" alt="77组合,k=2的图片"></p><p>而本题需要将所有遍历结果都装到res，所以它的终止条件（将结果放在res的条件）是空</p><p>所以本题的</p><ol><li>输入输出：输入列表和起点下标，无返回值</li><li>终止条件：无</li><li>单层逻辑：添加一个元素s[i]到path里，递归下一层，弹出s[i]以回溯</li></ol><p><img src="https://file1.kamacoder.com/i/algo/78.%E5%AD%90%E9%9B%86.png" alt="本题图片"></p><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], startIndex: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="comment"># 终止条件是空，所有的self.path都能直接丢进去</span></span><br><span class="line">        self.res.append(self.path[:])</span><br><span class="line">        <span class="comment"># 横向遍历</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, LofNums):</span><br><span class="line">          <span class="comment"># 注意，这次只用一次添加一个元素进去</span></span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            <span class="comment"># 纵向遍历</span></span><br><span class="line">            self.foo(nums, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        self.foo(nums)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="90-子集-ii">90. 子集 II</h1><p><a href="https://leetcode.cn/problems/subsets-ii/">https://leetcode.cn/problems/subsets-ii/</a></p><p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的 子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,2]</span><br><span class="line">输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><h2 id="回溯思路">回溯思路</h2><ol><li>这题目和<code>40.组合总和II</code>以及<code>78.子集</code>有点像，不同点是本题需要去重复（去重复的思路和<code>40.组合总和II</code>一样，不过我记得这种需要让nums[i]!=nums[i-1]的思路在之前的题目也遇到过）</li><li>本题和<code>78.子集</code>相比，只添加了这个去重复的约束条件，其它代码一样</li></ol><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度: O(n * 2^n)</li><li>空间复杂度: O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], startIndex: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        self.res.append(self.path[:])</span><br><span class="line">        <span class="comment"># print(self.path)</span></span><br><span class="line">        LofNums = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, LofNums):</span><br><span class="line">            <span class="keyword">if</span> i &gt; startIndex <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.path.append(nums[i])</span><br><span class="line">            self.foo(nums, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsetsWithDup</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">        self.foo(nums)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday24回溯part03&quot;&gt;LeetCodeCampsDay24回溯part03&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;再次使用了去重复的技巧，其中78,90两题目像是77.组合的变体，都是每次向path添加一个元素的类型；&lt;/p&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay23回溯part02</title>
    <link href="https://blog.lthero.cn/2025/07/18/LeetCodeCampsDay23/"/>
    <id>https://blog.lthero.cn/2025/07/18/LeetCodeCampsDay23/</id>
    <published>2025-07-18T10:21:47.000Z</published>
    <updated>2025-07-19T12:12:29.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday23回溯part02">LeetCodeCampsDay23回溯part02</h1><blockquote><p>40.组合总和2使用了去重复的技巧，而131分割回文串是每次向path添加多个元素的类型</p><p>39.和40都是每次向path添加一个元素的类型；</p></blockquote><h1 id="39-组合总和">39. 组合总和</h1><p><a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [2,3,6,7], target = 7</span><br><span class="line">输出：[[2,2,3],[7]]</span><br><span class="line">解释：</span><br><span class="line">2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。</span><br><span class="line">7 也是一个候选， 7 = 7 。</span><br><span class="line">仅有这两种组合。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8</span><br><span class="line">输出: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2], target = 1</span><br><span class="line">输出: []</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 30</code></li><li><code>2 &lt;= candidates[i] &lt;= 40</code></li><li><code>candidates</code> 的所有元素 <strong>互不相同</strong></li><li><code>1 &lt;= target &lt;= 40</code></li></ul><h2 id="回溯思路">回溯思路</h2><ol><li>和 <code>77组合</code> ，以及 <code>216.组合总和III</code> 很像，唯一区别是start位置，在77组合里，每层for循环里的下一个递归函数start为i+1，而这题目里下一个递归函数start为i即可；同样使用一个path记录路径，必要时计算path的和</li><li>输入一个候选列表，目标值，以及开始位置of候选列表</li><li>终止条件：sum of path如果大于target则终止；如果等于target则res添加path</li><li>单层逻辑：把当前值添加到path，递归下一轮（注意start需要包含当前值），再让path将当前值弹出</li></ol><p>如果，start值一直是0，会得到如[2,2,3],[3,2,2]这种重复的结果（注意题目要求不包含重复的组合）</p><p><img src="https://file1.kamacoder.com/i/algo/20201223170730367.png" alt="img"></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度O(N * 2 ^ T)</li><li>空间复杂度O(T)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span>, start: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        sumOfPath = <span class="built_in">sum</span>(self.path)</span><br><span class="line">        <span class="keyword">if</span> sumOfPath &gt; target:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">elif</span> sumOfPath == target:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        L = <span class="built_in">len</span>(candidates)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, L):</span><br><span class="line">            self.path.append(candidates[i])</span><br><span class="line">            self.foo(candidates, target, i)</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        self.foo(candidates, target, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="40-组合总和-ii">40. 组合总和 II</h1><p><a href="https://leetcode.cn/problems/combination-sum-ii/">https://leetcode.cn/problems/combination-sum-ii/</a></p><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p>**注意：**解集不能包含重复的组合。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[1,1,6],</span><br><span class="line">[1,2,5],</span><br><span class="line">[1,7],</span><br><span class="line">[2,6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[1,2,2],</span><br><span class="line">[5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 100</code></li><li><code>1 &lt;= candidates[i] &lt;= 50</code></li><li><code>1 &lt;= target &lt;= 30</code></li></ul><h2 id="回溯思路">回溯思路</h2><blockquote><p>本题目前一题目有点儿像，但不同点在于：本题要求不能有相同组合，第一想法是使用字典或set排队重复元素，但这样会导致超时（比如[1,1,1,1,…,1], target=30会发生超时）；<strong>所以需要在每层处理时就进行去重复</strong>，注意，<strong>下面的方法必须先对数组排序</strong></p></blockquote><ol><li>输入还是candidates和target，以及start节点；</li><li>终止条件：sumOfPath &gt; target则退出，等于target则添加到res；</li><li>单层逻辑：[剪枝]若sumOfPath + candidates[i]大于target则遍历下一个元素（或者直接return, 如果candiates已经排序过了），判断candidates[i - 1] == candidates[i]，目的是防止相同的元素再参与，<strong>注意只要使用continue即可</strong>，别使用return或break，因为后面还需要继续遍历</li></ol><p>下面这图的重点是：同一层如果有重复元素就不重复选取了，而不同层如果有重复元素是可以重复选的；比如[1,1,1,1,1,…,1]，target=30，对第一个1来说，后面的[1,1,1,1…,1]都可以选；而对第二个1来说</p><p><img src="https://file1.kamacoder.com/i/algo/20230310000954.png" alt="img"></p><p>我在图中将used的变化用橘黄色标注上，可以看出在candidates[i] == candidates[i - 1]相同的情况下：</p><ul><li>used[i - 1] == true，说明同一树枝candidates[i - 1]使用过</li><li>used[i - 1] == false，说明同一树层candidates[i - 1]使用过</li></ul><p>可能有的录友想，为什么 used[i - 1] == false 就是同一树层呢，因为同一树层，used[i - 1] == false 才能表示，当前取的 candidates[i] 是从 candidates[i - 1] 回溯而来的。</p><p>而 used[i - 1] == true，说明是进入下一层递归，去下一个数，所以是树枝上，如图所示：</p><p><img src="https://file1.kamacoder.com/i/algo/20221021163812.png" alt="img"></p><p>注意，下面的方法必须先对数组排序</p><p>注意，下面的方法必须先对数组排序</p><p>注意，下面的方法必须先对数组排序</p><p>相似的题目还有<code>90.子集II</code></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度: O(n * 2^n)</li><li>空间复杂度: O(n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">        self.sumOfPath = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, candidates, target, start: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        <span class="keyword">if</span> self.sumOfPath &gt; target:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> self.sumOfPath == target:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        L = <span class="built_in">len</span>(candidates)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, L):</span><br><span class="line">            <span class="keyword">if</span> self.sumOfPath + candidates[i] &gt; target:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"><span class="comment"># 要对同一树层使用过的元素进行跳过</span></span><br><span class="line">            <span class="keyword">if</span> candidates[i - <span class="number">1</span>] == candidates[i] <span class="keyword">and</span> i &gt; start:</span><br><span class="line">              <span class="comment"># 注意只要使用continue即可，别使用return或break，因为后面还需要继续遍历</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            self.sumOfPath += candidates[i]</span><br><span class="line">            self.path.append(candidates[i])</span><br><span class="line"><span class="comment"># 不带当前元素自身</span></span><br><span class="line">            self.foo(candidates, target, i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            self.sumOfPath -= candidates[i]</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum2</span>(<span class="params">self, candidates: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        candidates = <span class="built_in">sorted</span>(candidates)</span><br><span class="line">        self.foo(candidates, target)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="131-分割回文串">131. 分割回文串</h1><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">https://leetcode.cn/problems/palindrome-partitioning/</a></p><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些 子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aab&quot;</span><br><span class="line">输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;</span><br><span class="line">输出：[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h2 id="回溯思路">回溯思路</h2><p>注意给的示例s=‘aab’的输出是[[“a”,“a”,“b”],[“aa”,“b”]]，可以看出来是先将’a’添加到path,再分别把’a’和’b’添加到path；每个次是先将’aa’添加到path，再将’b’添加到path；说明一点，横向上的startIndex是向右增加的，而纵向上，先处理’a’，再处理’a’的子串’ab’</p><p>本题里仍使用回溯算法，其中，横向遍历（for循环）需要判断s[start:i+1]这段子串是否是回文的，比如第一次for循环执行：‘a’, ‘aa’, ‘aab’，<strong>如果’a’是回文的</strong>，才对后面的’ab’进行递归，去处理子段；</p><p><img src="https://file1.kamacoder.com/i/algo/131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.jpg" alt="img"></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度: O(n * 2^n)</li><li>空间复杂度: O(n^2)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 和kmp无关</span></span><br><span class="line">    <span class="comment"># path记录路径，res记录结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isP</span>(<span class="params">self, s: <span class="built_in">str</span>, start: <span class="built_in">int</span> = <span class="number">0</span>, end: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        leftPoint = start</span><br><span class="line">        rightPoint = end</span><br><span class="line">        <span class="keyword">while</span> leftPoint &lt; rightPoint:</span><br><span class="line">            <span class="keyword">if</span> s[leftPoint] != s[rightPoint]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            leftPoint += <span class="number">1</span></span><br><span class="line">            rightPoint -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, s: <span class="built_in">str</span>, start: <span class="built_in">int</span> = <span class="number">0</span></span>):</span><br><span class="line">        LofPath = <span class="built_in">len</span>(self.path)</span><br><span class="line">        LofS = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> start &gt;= LofS:</span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, LofS):</span><br><span class="line">            <span class="comment"># 如果是回文，才将这段子串添加到path里，再去递归它的剩下子串</span></span><br><span class="line">            <span class="keyword">if</span> self.isP(s, start, i):</span><br><span class="line">                self.path.append(s[start: i + <span class="number">1</span>])</span><br><span class="line">                self.foo(s, i + <span class="number">1</span>)</span><br><span class="line">                self.path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        self.foo(s)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday23回溯part02&quot;&gt;LeetCodeCampsDay23回溯part02&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;40.组合总和2使用了去重复的技巧，而131分割回文串是每次向path添加多个元素的类型&lt;/p&gt;
&lt;p&gt;39.和</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay22回溯part01</title>
    <link href="https://blog.lthero.cn/2025/07/17/LeetCodeCampsDay22/"/>
    <id>https://blog.lthero.cn/2025/07/17/LeetCodeCampsDay22/</id>
    <published>2025-07-17T13:14:31.000Z</published>
    <updated>2025-07-17T14:47:49.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecampsday22回溯part01">LeetCodeCampsDay22回溯part01</h1><blockquote><p>包含回溯基础内容，虽然和递归还有点儿像的哦</p></blockquote><h2 id="理论基础">理论基础</h2><h3 id="什么是回溯法">什么是回溯法</h3><p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。</p><p>在二叉树系列中，我们已经不止一次，提到了回溯，例如<a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E9%80%92%E5%BD%92%E5%B8%A6%E7%9D%80%E5%9B%9E%E6%BA%AF.html">二叉树：以为使用了递归，其实还隐藏着回溯 (opens new window)</a>。</p><p>回溯是递归的副产品，只要有递归就会有回溯。</p><p><strong>所以以下讲解中，回溯函数也就是递归函数，指的都是一个函数</strong></p><p>在递归中必有回溯，只是之前都没有用到回溯的操作</p><hr><h3 id="回溯法的效率">回溯法的效率</h3><p>回溯法的性能如何呢，这里要和大家说清楚了，<strong>虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法</strong>。</p><p><strong>因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><p>那么既然回溯法并不高效为什么还要用它呢？</p><p>因为没得选，一些问题能暴力搜出来就不错了，撑死了再剪枝一下，还没有更高效的解法。</p><p>此时大家应该好奇了，都什么问题，这么牛逼，只能暴力搜索</p><h3 id="如何理解回溯法">如何理解回溯法</h3><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以<strong>抽象为树形结构</strong>！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度就构成了树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><p>这块可能初学者还不太理解，后面的回溯算法解决的所有题目中，我都会强调这一点并画图举相应的例子，现在有一个印象就行。</p><h3 id="回溯模板">回溯模板</h3><ol><li>确定回溯的输入与输出值（是否有返回值）</li><li>终止条件（必有）</li><li>单层逻辑，在回溯里的单层逻辑往往需要使用for循环（横向遍历），这里的横向遍历是指单层逻辑需要处理的事儿</li></ol><p>回溯函数代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void backtracking(参数)</span><br></pre></td></tr></table></figure><p>终止条件代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (终止条件) &#123;</span><br><span class="line">    存放结果;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单层逻辑代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">    处理节点;</span><br><span class="line">    backtracking(路径，选择列表); // 递归</span><br><span class="line">    回溯，撤销处理结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如下面的例子里，<strong>递归是用来纵向遍历，而for遍历是单层逻辑里的横向遍历</strong>（注意回溯本身就是暴力搜索，或者说本身就是一堆for循环的变体）</p><p>for循环就是遍历子集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次</p><p><img src="https://file1.kamacoder.com/i/algo/20210130173631174.png" alt="img"></p><h1 id="77-组合">77. 组合</h1><p><a href="https://leetcode.cn/problems/combinations/">https://leetcode.cn/problems/combinations/</a></p><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><h2 id="回溯思路">回溯思路</h2><p>输入：n = 100, k = 3 那么就三层for循环，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> u = j + <span class="number">1</span>; u &lt;= n; n++) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; u &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果n=100, k = 50，此时需要写50个for循环吗？大可不必，使用回溯即可替代这么多for循环操作</p><p>将这个问题抽象出来，把它使用树进行展开，每个问题解构成子问题，则(1,2,3,4)的一个子树为(2,3,4)，(3,4), (4), ()；而所谓得到k集合，就是将取出来的数添加到path中；有点儿像<code>257. 二叉树的所有路径</code>；</p><blockquote><p>注意点一：如果子树里也是(1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4)则得到的全排列，但题目里要求的是组合，比如(1,2)和(2,1)被认为一个组合，且组合里的数字只能使用一次</p></blockquote><p><img src="https://file1.kamacoder.com/i/algo/20201123195223940.png" alt="img"></p><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度O(C(n,k)*k)</li><li>空间复杂度O(C(n,k)*k)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, start = <span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="comment"># 注意这里不能只用append(self.path),必须使用self.path[:],否则最终输出的self.res为空</span></span><br><span class="line">            <span class="comment"># 如果直接使用 ⁠self.path，你实际上是在向 ⁠self.res 中添加一个对 ⁠self.path 列表的引用</span></span><br><span class="line">            <span class="comment"># 而不是列表的副本。这会导致后续对 ⁠self.path 的修改影响到已经添加到 ⁠self.res 中的元素，从而导致结果错误。</span></span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n + <span class="number">1</span>):</span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.foo(n, k, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        self.foo(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h2 id="剪枝操作">剪枝操作</h2><p>添加一个判断，如果k大于<code>n - i + 1 + len(self.path)</code> ，说明后面的组合数量不可能满足k个，直接剪掉</p><p><img src="https://file1.kamacoder.com/i/algo/20210130194335207-20230310134409532.png" alt="img"></p><h2 id="包含剪枝的代码">包含剪枝的代码</h2><ul><li>时间复杂度O(C(n, k) * k)</li><li>空间复杂度O(C(n, k)* k + k)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, start = <span class="number">1</span></span>):</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="comment"># 注意这里不能只用append(self.path),必须使用self.path[:],否则最终输出的self.res为空</span></span><br><span class="line">            <span class="comment"># 如果直接使用 ⁠self.path，你实际上是在向 ⁠self.res 中添加一个对 ⁠self.path 列表的引用</span></span><br><span class="line">            <span class="comment"># 而不是列表的副本。这会导致后续对 ⁠self.path 的修改影响到已经添加到 ⁠self.res 中的元素，从而导致结果错误。</span></span><br><span class="line">            self.res.append(self.path[:])</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n + <span class="number">1</span>):</span><br><span class="line">       <span class="comment"># 剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> k &gt; n - i + <span class="number">1</span> + <span class="built_in">len</span>(self.path):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.foo(n, k, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        self.foo(n, k, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="216-组合总和-iii">216. 组合总和 III</h1><p><a href="https://leetcode.cn/problems/combination-sum-iii/">https://leetcode.cn/problems/combination-sum-iii/</a></p><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 6 = 9</span><br><span class="line">1 + 3 + 5 = 9</span><br><span class="line">2 + 3 + 4 = 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 4, n = 1</span><br><span class="line">输出: []</span><br><span class="line">解释: 不存在有效的组合。</span><br><span class="line">在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>2 &lt;= k &lt;= 9</code></li><li><code>1 &lt;= n &lt;= 60</code></li></ul><h2 id="回溯代码">回溯代码</h2><ul><li>时间复杂度O(C(9,k)*k)</li><li>空间复杂度O(C(9,k)*k + k)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, k: <span class="built_in">int</span>, n: <span class="built_in">int</span>, end = <span class="number">9</span>, start = <span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.path) == k:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(self.path[:]) == n:</span><br><span class="line">                self.res.append(self.path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(self.path) &gt; k:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 剪枝一，按个数剪枝</span></span><br><span class="line">            <span class="keyword">if</span> k &gt; n - i + <span class="number">1</span> + <span class="built_in">len</span>(self.path):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 剪枝二，按path的和判断，如果已经大于n，则必须不成立</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(self.path[:]) &gt; n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.foo(k, n, end, i + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum3</span>(<span class="params">self, k: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="comment"># 使用递归，思路和组合1有点儿像，但这次需要将所有的数字仍放在path中</span></span><br><span class="line">        <span class="comment"># 判断sum of path是否等于n，如果等于n则添加到res</span></span><br><span class="line">        self.foo(k, n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h1 id="17-电话号码的字母组合">17. 电话号码的字母组合</h1><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">https://leetcode.cn/problems/letter-combinations-of-a-phone-number/</a></p><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://pic.leetcode.cn/1752723054-mfIHZs-image.png" alt="img"></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>['2', '9']</code> 的一个数字。</li></ul><h2 id="回溯思路">回溯思路</h2><p>先构建个<code>alphaB = [&quot;&quot;, &quot;&quot;, &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;, &quot;pqrs&quot;, &quot;tuv&quot;, &quot;wxyz&quot;]</code></p><p>比如digits=“623”，则</p><ol><li>与前面两个相似，纵向的遍历是6-&gt;2-&gt;3；而第一层是mno，第二层是&quot;abc&quot;, “abc”, “abc”，第三层是九个&quot;def&quot;</li><li>回溯输入digits以及在digits开始的下标，无返回值</li><li>终止条件：如果start大于等于len(digits)说明已经遍历完了，此时若self.path不为空，则添加到self.res里</li><li>单层逻辑：先从alphaB取出当前digits[start]对应数字的字母表，对逐个字母遍历并添加到path里，再递归到下一个digit，最终再path弹出之前添加的字母<ol><li>比如6-&gt;‘mno’，对’mno’进行遍历；将m添加到path里，然后递归到digits[start+1]，即2-&gt;‘abc’，再对’abc’遍历，将a添加到path里，此时path长度等于digits长度，将’ma’添加到res并退出；此时回溯，path弹出’a’，再将b添加到path里，重复……</li></ol></li></ol><p><img src="https://file1.kamacoder.com/i/algo/20201123200304469.png" alt="img"></p><h2 id="回溯代码">回溯代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.alphaB = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>]</span><br><span class="line">        self.path = <span class="built_in">list</span>()</span><br><span class="line">        self.res = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self, digits, start</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(digits) <span class="keyword">or</span> start &gt;= <span class="built_in">len</span>(digits):</span><br><span class="line">            res = <span class="string">&quot;&quot;</span>.join(self.path[:])</span><br><span class="line">            <span class="keyword">if</span> res != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                self.res.append(res)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.alphaB[<span class="built_in">int</span>(digits[start])]:</span><br><span class="line">            self.path.append(i)</span><br><span class="line">            self.foo(digits, start + <span class="number">1</span>)</span><br><span class="line">            self.path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        self.foo(digits, <span class="number">0</span>)        </span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecampsday22回溯part01&quot;&gt;LeetCodeCampsDay22回溯part01&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;包含回溯基础内容，虽然和递归还有点儿像的哦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理论基础&quot;&gt;理论</summary>
      
    
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://blog.lthero.cn/tags/leetcode/"/>
    
  </entry>
  
</feed>
