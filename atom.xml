<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lthero</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://blog.lthero.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.lthero.cn/"/>
  <updated>2025-06-25T16:27:39.908Z</updated>
  <id>https://blog.lthero.cn/</id>
  
  <author>
    <name>lthero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCodeCampsDay2</title>
    <link href="https://blog.lthero.cn/2025/06/26/LeetCodeCampsDay2/"/>
    <id>https://blog.lthero.cn/2025/06/26/LeetCodeCampsDay2/</id>
    <published>2025-06-25T16:12:32.000Z</published>
    <updated>2025-06-25T16:27:39.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecamps-day1">LeetCodeCamps—Day1</h1><blockquote><p>同样需要使用快/慢指针/双指针，另外，可以使用前缀和数组、二分查找</p></blockquote><h1 id="209-长度最小的子数组">209. 长度最小的子数组</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p><h2 id="问题">问题</h2><blockquote><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度**。**如果不存在符合条件的子数组，返回 <code>0</code> 。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><h2 id="核心思路">核心思路</h2><p>外循环：使用for循环，被遍历对象为快指针(right)，通过 ⁠right 指针扩展窗口</p><p>内循环：当窗口和(the sum of windows) &gt;= ⁠target 时，记录当前窗口长度，并尝试收缩(shrink)窗口以找到更小的子数组</p><p>edge case：如果数组为空或没有符合的子数组，⁠min_length 保持为最大值float(‘inf’)时，最终返回 0</p><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        currentSum = <span class="number">0</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># Set the minimumWindows as a positive inf</span></span><br><span class="line">        minimumWindows = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">          <span class="comment"># keep add nums to currentSum</span></span><br><span class="line">            currentSum += nums[right]</span><br><span class="line">            <span class="comment"># if currentSum is bigger than target,</span></span><br><span class="line">            <span class="comment"># try to shrink the minimumWindows from the left to find a smaller currentSum.</span></span><br><span class="line">            <span class="keyword">while</span> currentSum &gt;= target <span class="keyword">and</span> left &lt;= right:</span><br><span class="line">              <span class="comment"># shrink the windows</span></span><br><span class="line">                minimumWindows = <span class="built_in">min</span>(minimumWindows, right - left + <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># remove the leftmost elements from the sum</span></span><br><span class="line">                currentSum -= nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> minimumWindows == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> minimumWindows</span><br></pre></td></tr></table></figure><h2 id="o-nlogn-时间复杂度的解法">O(nlogn)时间复杂度的解法</h2><p>这个解法使用<code>前缀和数组</code>(prefix array)结合<code>二分查找</code>：</p><p>先计算<code>前缀和数组</code>，prefix[i] 表示 nums[0] 到 nums[i-1] 的和</p><p>对于每个右端点 j（对应子数组结束位置），使用二分查找找到满足子数组和 &gt;= target 的最大左端点 i。</p><p>时间复杂度：O(n log n)，因为计算前缀和是 O(n)，每个右端点进行一次二分查找是 O(log n)，总共 O(n log n)</p><p>空间复杂度：O(n)，用于存储前缀和数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecamps-day1&quot;&gt;LeetCodeCamps—Day1&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;同样需要使用快/慢指针/双指针，另外，可以使用前缀和数组、二分查找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;209-长度最小的子数组</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://blog.lthero.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://blog.lthero.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeCampsDay1</title>
    <link href="https://blog.lthero.cn/2025/06/24/LeetCodeCampsDay1/"/>
    <id>https://blog.lthero.cn/2025/06/24/LeetCodeCampsDay1/</id>
    <published>2025-06-24T14:56:55.000Z</published>
    <updated>2025-06-25T02:26:35.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcodecamps-day1">LeetCodeCamps—Day1</h1><blockquote><p>day1的三个题目都可以使用快慢指针/双指针/多指针的思路，</p><p>慢指针用于存放结果，快指针是遍历原数组用的</p></blockquote><h1 id="27-移除元素">27. 移除元素</h1><p><a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a></p><blockquote><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p></blockquote><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br><span class="line">解释：你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">解释：你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。</span><br><span class="line">注意这五个元素可以任意顺序返回。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><h2 id="思路">思路</h2><h3 id="理解问题">理解问题</h3><ul><li>需要原地“移除”等于val的元素，但又不关心留下的前k个元素之后的内容（<strong>暗示不用真的移除</strong>）</li></ul><h3 id="核心步骤">核心步骤</h3><ol><li>派用两个指针，快指针用来遍历nums每个数据，判断是否等于val</li><li>慢指针是res结果数组的下标，用来存放不等于val的数据</li><li>本题可以不使用额外空间，直接原地将nums当成res数组</li></ol><p>动画参考</p><p><img src="https://file1.kamacoder.com/i/algo/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="img"></p><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">      <span class="comment"># resIndex 为慢指针</span></span><br><span class="line">        resIndex = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 先求出L，可以节省每次循环计算len(nums)的时间</span></span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># i其实是快指针，用来遍历每个nums值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != val:</span><br><span class="line">                nums[resIndex] = nums[i]</span><br><span class="line">                resIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resIndex</span><br></pre></td></tr></table></figure><h1 id="704-二分查找">704. 二分查找</h1><h2 id="题目描述">题目描述</h2><p><a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a></p><blockquote><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果 <code>target</code> 存在返回下标，否则返回 <code>-1</code>。</p></blockquote><p>你必须编写一个具有 <code>O(log n)</code> 时间复杂度的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间</li></ol><h2 id="思路">思路</h2><h3 id="理解问题">理解问题</h3><ol><li>有一个<strong>升序排序的数组</strong>和一<strong>个目标值</strong>。</li><li>找到目标值在数组中的<strong>下标</strong>，如果不存在就返回-1。</li><li>算法必须是O(log n)的时间复杂度，这意味着每次操作都要将搜索范围减半（这就是二分查找的精髓）。</li></ol><h3 id="核心步骤">核心步骤</h3><p>初始化指针：用两个指针定义搜索范围：left 指向数组的起始位置（通常是0）。⁠right 指向数组的结束位置（通常是数组长度-1）。</p><p>循环查找：</p><ul><li>计算中间位置：mid = left + (right - left) / 2;  // 这样计算避免整数溢出。</li></ul><p>比较数组中mid位置的元素：</p><ul><li>如果 nums[mid] == target，返回 mid（找到了！）</li><li>如果 nums[mid] &lt; target，说明目标在右半部分，所以更新 left = mid + 1。</li><li>如果 nums[mid] &gt; target，说明目标在左半部分，所以更新 right = mid - 1</li></ul><p>重复这个过程，直到 left &gt; right（搜索范围为空）</p><p>结束处理：如果循环结束还没有找到目标，返回 -1</p><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        leftIndex = <span class="number">0</span></span><br><span class="line">        rightIndex = L - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 注意跳出条件是小于或等于；如果仅有小于，则会出现nums=[5]输出结果为-1的错误情况</span></span><br><span class="line">        <span class="keyword">while</span> leftIndex &lt;= rightIndex:</span><br><span class="line">            <span class="comment"># 找到个中值pivot, 不断让num[pivot]与target进行判断</span></span><br><span class="line">            pivot = (rightIndex + leftIndex) // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 如果nums[pivot]大于target，则target在[left,pivot]区间</span></span><br><span class="line">            <span class="keyword">if</span> nums[pivot] &gt; target:</span><br><span class="line">                rightIndex = pivot - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[pivot] &lt; target:</span><br><span class="line">                leftIndex = pivot + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> pivot</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="977-有序数组的平方">977. 有序数组的平方</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><blockquote><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><p><strong>进阶：</strong></p><ul><li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li></ul><h2 id="思路">思路</h2><h3 id="理解问题">理解问题</h3><ul><li><strong>nums已经有序</strong></li><li>每个数字平方后的<strong>结果数组</strong>也要有<strong>非递减序</strong></li></ul><h3 id="核心步骤">核心步骤</h3><p>数组平方后的最大值，一定出自nums的两端，[-4,-1,0,3]-&gt;[0,1,9,16]</p><p>所以可以在两端使用两个“快指针”，</p><ol><li>比较<strong>两端数字平方后的结果</strong>，将更大的数字放在“慢指针”的位置</li><li>需要用个res数组，<strong>慢指针指向这个res数组</strong></li><li>需要从后向前遍历慢指针，因为题目要求结果数组非递减序</li></ol><p>可以参考这个动画（偷来的）</p><p><img src="https://file1.kamacoder.com/i/algo/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif" alt="img"></p><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        L = <span class="built_in">len</span>(nums)</span><br><span class="line">        res = [<span class="number">0</span>] * L</span><br><span class="line">        <span class="comment"># resIndex作为结果数组的下标（当成慢指针也行）</span></span><br><span class="line">        resIndex = L - <span class="number">1</span></span><br><span class="line">        <span class="comment"># leftIndex和rightIndex当成快指针</span></span><br><span class="line">        leftIndex = <span class="number">0</span></span><br><span class="line">        rightIndex = L - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> resIndex &gt;= <span class="number">0</span>:</span><br><span class="line">            leftNumSquare = nums[leftIndex]*nums[leftIndex]</span><br><span class="line">            rightNumSquare = nums[rightIndex]*nums[rightIndex]</span><br><span class="line">            <span class="keyword">if</span> leftNumSquare &lt; rightNumSquare:</span><br><span class="line">                res[resIndex] = rightNumSquare</span><br><span class="line">                rightIndex -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res[resIndex] = leftNumSquare</span><br><span class="line">                leftIndex += <span class="number">1</span></span><br><span class="line">            resIndex -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcodecamps-day1&quot;&gt;LeetCodeCamps—Day1&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;day1的三个题目都可以使用快慢指针/双指针/多指针的思路，&lt;/p&gt;
&lt;p&gt;慢指针用于存放结果，快指针是遍历原数组用的&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://blog.lthero.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://blog.lthero.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>HBO Max 低价开通</title>
    <link href="https://blog.lthero.cn/2025/06/24/RegisterHBO/"/>
    <id>https://blog.lthero.cn/2025/06/24/RegisterHBO/</id>
    <published>2025-06-24T14:29:36.000Z</published>
    <updated>2025-06-24T14:30:00.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hbo-max-低价开通">HBO Max 低价开通</h1><blockquote><p>本文将讲述如何通过网页、Google Play 和 AppStore 订阅阿根廷的 HBO Max 服务</p></blockquote><p>亚洲区 Max 已正式上线，<strong>新加坡ip下有简体中文界面，港台为繁体中文</strong></p><h2 id="关于-max">关于 Max</h2><p>Max 是华纳媒体提供的流媒体视频服务平台，于 2020 年 5 月 27 日正式运行。虽然平台是根据同名的付费有线电视频道 HBO 的内容构建，但它主要作为华纳媒体制作的影视内容提供，也包含通过第三方许可的其他内容。</p><blockquote><p>HBO Max 于 2023年 5 月 23 日，更名为 Max。<br>在美国，Discovery+ 已被合并入 Max。</p></blockquote><h3 id="hbo-go-升级为-max">HBO GO 升级为 Max</h3><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-19-at-12.18.08@2x.png" alt="img" style="zoom:67%;" /><p>Max 推出初期仅在美国运营，支持4K UDH和双杜比。其他地区则为 HBO Go，只有 720p 分辨率。</p><p>后来于 2021 年 6 月 29 日在南美洲上线，其中就包括阿根廷。2024 年 11 月 19 日正式在亚洲地区上线。</p><ul><li>现在订阅阿根廷可享受50%off （仅限南美开业首年）</li></ul><p>Max 亚洲区上线后，原 HBO GO 订阅已被迁移至 Max 的标准订阅(Full HD），无法直接享受 4K + 双杜比.</p><hr><h2 id="低价区开通方式">低价区开通方式</h2><p><strong>目前，价格最低的是阿根廷区，需要通过应用内购买，价格为 $39.99。</strong></p><p>其次是菲律宾，价格为 2790 PHP/年 ≈ $47.40</p><p>截止至撰稿，价格最低的为通过 AppStore 或 Google Play 开通阿根廷区 Max ，<strong>价格为 $39.99，均以美元计价</strong>。</p><p><strong>通过网页购买则需要缴纳 21% 的税款</strong>，由于订阅价格原本就比内购贵，税后价格将比内购贵出 $20。 ARS 60,487.9 ≈ $60.37</p><p><a href="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6190293710860830359-y.jpg"><img src="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6190293710860830359-y.jpg" alt="img"></a>🇦🇷阿根廷 Google Play 价格</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-19-at-20.06.10@2x.png" alt="img"></p><hr><h3 id="1-通过网页端订阅-需额外缴税">1️⃣ 通过网页端订阅（需额外缴税）</h3><p>注意事项：</p><ol><li><p>网页显示的是税前价格，你还需额外缴纳 21% 的税款。</p></li><li><p>Max 的网页会有 Cookies 缓存，假如你之前或是首次打开时，没有使用阿根廷节点，由于 Cookies 已经被记录，网页将不会跳转至更换节点后相应的地区页面。</p></li></ol><p>例如：一开始使用了<code>美国节点</code>打开 <a href="https://www.max.com/ar/es?ref=yummy.best">max.com/ar/es</a> ，发现用错了节点。切换至<code>阿根廷节点</code>后，请<code>清理浏览器缓存</code>，否则网页仍将指向 美国地区的 <a href="http://Max.com">Max.com</a>（手动修改网页后缀也无效）</p><ol start="3"><li>由于阿根廷区页面只能选择西班牙语，因此请搭配浏览器翻译进行订阅。</li></ol><p>1、 连接阿根廷节点，进入阿根廷 <a href="https://www.max.com/ar/es?ref=yummy.best"><strong>Max 订阅界面</strong></a></p><p>2、下滑找到价格表</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-00.20.00@2x-1.png" alt="img"></p><p><strong>3、 选择 ANUAL（年度），选择 Platino 订阅（4设备同屏、4K）</strong></p><p><em><strong>*Platino*</strong></em> 订阅支持 4 设备同屏，4K UHD 以及双杜比。</p><p><strong>4、 创建/登入已有账户，正确填写信用卡信息付款即可。</strong></p><p>需使用 MasterCard（万事达）或 Amex 进行付款，Visa 无法在网页端支付。</p><hr><h3 id="通过-google-play-订阅-推荐">通过 Google Play 订阅（推荐）</h3><p><img src="/Users/lthero/Library/CloudStorage/OneDrive-%E4%B8%AA%E4%BA%BA/Documents/%E7%AC%94%E8%AE%B0/Hexo%E5%BE%85%E5%8F%91%E5%B8%83/%E5%9B%BE/%E5%BC%80%E9%80%9AHBO-%E9%98%BF%E6%A0%B9%E6%8C%BA%E5%8C%BA.png" alt="开通HBO-阿根挺区"></p><blockquote><p>iOS 用户从 第一步 开始，Android 用户从 第三步 开始</p></blockquote><p>1、在电脑下载安卓模拟器，可以选择 <a href="https://www.yeshen.com/?ref=yummy.best">夜神</a>、<a href="https://www.ldmnq.com/?ref=yummy.best">雷电</a>、<a href="https://www.bluestacks.com/tw/index.html?ref=yummy.best">BlueStacks</a> （推荐）;</p><p>部分模拟器可能没有 GMS 框架，请自行安装！</p><p><strong>2、在模拟器下载并安装</strong> <a href="https://github.com/chen08209/FlClash/blob/main/README_zh_CN.md?ref=yummy.best#download"><strong>FLClash</strong></a> ，连接阿根廷节点</p><p>需代理 Google 以及 Max，不会分流直接开全局模式, 可以上<a href="ipcheck.ing">ipcheck.ing</a> 查看当前ip位置</p><p><strong>3、 登录 Google 账户并从 Google Play 下载 Max App（下载时可以选择较快的节点，记得下完切回去）;</strong></p><p>这里登录的 Google 帐号建议使用<strong>未锁区帐号</strong>（或是全新的Google 账号），否则<strong>可能出现无法选购订阅</strong>（如下图）</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-01.10.48@2x.png" alt="img"></p><p>简单来说，<strong>你只能使用阿根廷 Google Play 订阅阿根廷 Max</strong></p><p>如果你的 Google 帐号之前开通过 YouTube Premium ，大概率已经锁在了某个区。</p><blockquote><p>有两种处理方案</p></blockquote><p>方案一、希望继续使用主帐号：如果确定已经锁了阿根廷，请检查是否登录了多个 Google 账号，然后退出无关账号重试。未锁区/不确定是否锁区，请先<strong>查看账号锁区情况</strong>，有三种方法</p><ul><li>方式1、前往 <a href="https://policies.google.com/terms?hl=zh-CN&amp;fg=1&amp;ref=yummy.best">Google 服务条款</a> 直接查看归属地.</li><li>方式2、前往 <a href="https://one.google.com/plans?ref=yummy.best">Google One</a> 订阅界面查看，使用不同的节点，显示的价格与货币单位也会发生变化，即为未锁区。</li><li>方式3、前往 <a href="https://play.google.com/settings?ref=yummy.best">Google Play</a> 页面查看，假如当前你正在使用<code>美国</code>节点**，<a href="https://play.google.com/settings?ref=yummy.best">Google Play</a> 网页最下方会显示为**<code>美国</code>，<strong>当你更换</strong><code>阿根廷</code>**节点以后，Google Play 网页最下面的地址显示为<code>阿根廷</code></li></ul><p>如果不是阿根廷地区，可以在 <a href="https://payments.google.com/?ref=yummy.best">Google Payment</a> 中删除所有非阿根廷的付款资料(可能会影响当前的 You Tube Premium 续订/解散家庭组？）</p><p>保留/<a href="https://yummy.best/youtube/#%E5%9B%9B%E3%80%81%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2%E6%94%AF%E4%BB%98%E8%A2%AB%E9%A3%8E%E6%8E%A7">新增阿根廷的付款资料</a>，尝试购买一本免费图书锁到阿根廷，返回订阅界面重新尝试。</p><p>方案二、直接使用新 Google 帐号：由于新账号并未进行过购买，因此 Google Play 地区仍可根据 ip 灵活变动。</p><p>直接在 <a href="https://payments.google.com/?ref=yummy.best">Google Payment</a> 添加一个阿根廷的付款资料并尝试购买一本免费图书锁到阿根廷，返回订阅界面重新尝试。</p><p><strong>4、下载完毕后，切换阿根廷节点，并进入 Max App ；</strong></p><p><strong>5、没有阿根廷帐号的话，点击第一个选项，后面的操作无论界面是英语还是西班牙语，均一致；</strong></p><p>有阿根廷帐号可以选择 Sign In，然后点击 Renew 即可续订。</p><p>需要使用当地 ip 创建的 Max 帐号进行订阅，例如：美国 IP 创建的 Max 帐号，无法在阿根廷订阅。</p><img src="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6192467638622470609-x-1.jpg" alt="Gallery Image" style="zoom:67%;" /><img src="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6192467638622470617-y.jpg" alt="Gallery Image" style="zoom:67%;" /><p>如果显示点击“subscribe now”显示如下信息，则还是google进行了锁区；</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-01.10.48@2x.png" alt="img"></p><blockquote><p>如果你上述操作都没问题（哪怕使用了全新的google账号并且填写了阿根挺地区账号）, 这里有种解决方法</p></blockquote><p>使用你的全新的阿根挺google账号，在payment里修改地址位置（在设置时，如果你已经填写了阿区地址，google会给个定位，允许你使用google map进行拖动选点，你只要稍微拖动下即可，随便保存修改的信息），然后重新打开HBO MAX软件进行尝试</p><p><strong>6. 选择 Anual，并选择 US$39.99 的订阅，点击<code>白色按钮</code>继续；</strong></p><p>US$ 39.99 的订阅支持 4 设备同屏，4K UHD 以及双杜比。</p><img src="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6190293710860830359-y-2.jpg" alt="img" style="zoom:67%;" /><p><strong>7、创建新账号（为了方便阅读，放上英文界面图）；</strong></p><p>如果你已经有阿根廷帐号，不想再创建。可以返回至初始页面，选择 Signin（登入）</p><img src="https://yummy.best/content/images/2024/11/telegram-cloud-photo-size-5-6192467638622470630-y.jpg" alt="img" style="zoom:67%;" /><p><strong>8、添加/选择付款信息 &gt; 验证密码 &gt; 购买成功</strong></p><hr><h4 id="遇到需要确认方案-但是点进去后无法确认方案的"><strong>遇到需要确认方案，但是点进去后无法确认方案的</strong></h4><p>1、请先确认是否登录了多个 Google 账号，退出无关 Google 账号后，仅保留订阅用的 Google 账号，重新尝试确认方案；</p><p>2、其次， 可能<strong>与节点有关系，大概率是近期被太多人使用，尝试更换节点再试；</strong></p><p>3、卸载 Max 并重启手机，重新安装 Max，再次尝试确认方案。</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-22.09.35@2x.png" alt="img"></p><hr><h4 id="遇到所有银行卡均显示不可用-请检查-google-play-商店所属地是否为阿根廷"><strong>遇到所有银行卡均显示不可用，请检查 Google Play 商店所属地是否为阿根廷</strong></h4><p>必须使用阿根廷 ip 注册的 Max 加阿根廷 Google Play 才可以订阅。</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-22.11.52@2x.png" alt="img"></p><hr><h3 id="3-通过-appstore-订阅">3️⃣ 通过 AppStore 订阅</h3><p>由于阿根廷地区的 AppStore 没有礼品卡，因此你只能绑定当地发行的银行卡进行购买。</p><p><img src="https://yummy.best/content/images/2024/11/CleanShot-2024-11-20-at-13.30.07@2x.png" alt="img"></p><p><a href="https://support.apple.com/zh-cn/111741?ref=yummy.best">可与 Apple ID 搭配使用的付款方式</a></p><p><strong>1、 连接阿根廷节点，注册一个阿根廷 Apple ID；</strong></p><p><strong>2、 在手机登录 Apple ID 后绑定付款方式；</strong></p><p><strong>3、务必使用使用此 ID 重新下载 Max App，否则无法正常内购；</strong></p><p><strong>4、进入 Max 完成内购。（注册账号请参考</strong><a href="https://yummy.best/hbomax/#%E9%80%9A%E8%BF%87-google-play-%E8%AE%A2%E9%98%85%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89"> <strong>Google Play 订阅界面</strong></a><strong>）</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hbo-max-低价开通&quot;&gt;HBO Max 低价开通&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文将讲述如何通过网页、Google Play 和 AppStore 订阅阿根廷的 HBO Max 服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;亚洲区 Max 已正</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="HBO" scheme="https://blog.lthero.cn/tags/HBO/"/>
    
  </entry>
  
  <entry>
    <title>IELTsWriting</title>
    <link href="https://blog.lthero.cn/2025/04/26/IELTsWriting/"/>
    <id>https://blog.lthero.cn/2025/04/26/IELTsWriting/</id>
    <published>2025-04-26T05:23:38.000Z</published>
    <updated>2025-06-26T05:24:15.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="p18-example-1">P18, Example 1.</h3><p><code>按类别划分</code></p><p>Britain: 在所有商品类别的消费最多，其中photographic film最高</p><p>France, 在3种商品第二高，而另外3种最低</p><p>Italy, 在Toys的消费超过该国其它商品各类，并且和France一样高</p><p>Germany,  在所有商品类别的消费最低，6种商品消费量差不多</p><p>The number of people spent on photographic film in Britain stood at around 170,000, which is <strong>the highest figure shown on the chart</strong>. By contrast, Germans were the lowest overall spenders, with the same figure (just under 150,000) for each of the six products.</p><p><strong>The figures for spending on toys were the same</strong> both in Italy and France, at nearly 160,000 sterling. However, while Frence people <strong>paid out more than Italians for</strong> photographic film and CDs, the latter <strong>spent more on</strong> perfumes, tennis racquets and personal stereos. The amount spent by Frence people on tennis racquets is <strong>the lowest number shown on the chart</strong>, at around 145,000 sterling.</p><ol><li><strong>the highest / lowest figure shown on the chart.</strong></li><li>stood at around xxx</li><li>just around/ under/ above/ over/ nearly/ only</li><li>pay out for xxx ==== spend on xxx</li><li>the number of xxx(doing) ==== the figure for xxx(doing)</li></ol><h3 id="p19-example-2">P19, Example 2.</h3><p><code>按时间节划分</code></p><p>1999年， USA 20%, CAnada 10%, Mexico 5%</p><p>2005年， USA 70%, Canada 70%, Mexico 25%</p><p>2009年， USA 80%, Canada 95%, Mexico 45%</p><p>In 1999, the proportion of people using the Internet in the USA was approximately 20%. The figures in Canada and Mexico were lower, at about 10% and 5% respectively.</p><p>可以使用<code>Saw/Witness</code>，适合用 <code>国家/地区/时间</code> 开头，比如</p><p>Both USA and Canada <strong>saw a rose in 2005</strong> on Internet usage <strong>with around 70%</strong> of the population, whereas the figure for Mexico reached just over 25%.</p><p>或者直接用<code>类别</code>开头</p><p>In 2005, the <strong>Internet usage</strong> in both the USA and Canada <strong>rose to around 70%</strong> of the population, while/ by contrast, the figure for Mexico reached just over 25%.</p><p>In the year 2009, <strong>the percentage of</strong> Internet users was the highest in Canada, at over 95%. <strong>Nearly all Canadians used the Internet</strong>（这是个总结句）, compared to about 80% in the USA and only 45% in Mexico.</p><p>还可以用``the highest figure shown on the chart`，比如</p><p><strong>the percentage of</strong> Internet users in Canada was over 95%, which is the highest figure shown on the chart.</p><p>或使用``reach its highest 再配搭 , at over 95%` 比如</p><p>Internet usage in Canada <strong>reached its highest level in 2009</strong>, at over 95%</p><p>或The usage of Internet in Canada reached its highest level…</p><ol><li>the proportion of xxx ==== the percentage of xxx</li><li>the figure for xxx <strong>reached xxx</strong></li><li>XXX <strong>saw a rose</strong> in 2005 <strong>with arount 60%</strong></li><li>XXX reached <strong>its highest level in 2005</strong>, at over 10%.</li><li>Compare to xxx</li></ol><h1 id="table-chart">Table Chart</h1><h2 id="example-1">Example 1.</h2><h3 id="开头段">开头段</h3><p>（改写题目）</p><p>The table compares(gives the information of) the top five countries(the five hightest ranking countries) in terms of (或仅用for) the figures for visits and the money spent by tourists over a period of two years( between 2013 and 2013).</p><h3 id="概括段">概括段</h3><p>（不出现具体数字，仅描述两个趋势/一个最大和一个最小），比如法国游客人数最多（2012和2013），美国钱最多（over the same period) , 写概括段只能从表中看到数据，然后自己捏句子，谁最欢迎，谁挣得钱最多；谁增长飞快等</p><p>It is noticeable that <strong>France was the world’s most popular tourist country(destination)</strong> in the year 2012 and 2013. By contrast(However), the <strong>USA earned by far the most revenue</strong> from tourism <strong>over the same period.</strong></p><h3 id="描述段">描述段</h3><p>段一：讲游客数量</p><p>先按2012和2013划分，再按从高到低讲游客数量（第一梯队，第二梯队，最后梯队等）</p><p>In 2012, there were 83 million tourists visited France, and the USA was <strong>the second most visited destination(country)</strong>, with 66.7 million visitors. Spain and China <strong>received</strong> just under 58 million tourists, whereas <strong>Italy was ranked fifth, at 46.4 million visitors.</strong> 2013 saw a increase of between 1 and 4 million tourists   on each country, with the exception of China, which received a 2 million fewer visitors than <strong>in the previous year.</strong></p><ol><li>Italy <strong>was ranked fifth</strong>, at 46.4 million visitors 和 the five hightest ranking countries，利用rank这个词</li><li>2013 <strong>saw a increase of between 1 and 4 million</strong>， 时间作主语，描述趋势</li><li>in the previous year 前一年</li></ol><p>段二：讲游客花费</p><p>先按2012和2013划分，后续和段一差不多</p><p>People visited the USA spent more in 2013 than 2012 with 139.6 billion and 126.2 billion respectively.</p><p>The figures for spending by visitors in the USA increased from 126.2 billion in 2012 to 139.6 billion in 2013, and which were <strong>well over</strong>(more than) <strong>twice as high as</strong> those for any other country.</p><blockquote><p>When you add a multiplier like&quot;twice,&quot; on “as high as”, it specifies that <strong>the first thing is exactly (or more than) double the second thing.</strong></p></blockquote><p>Spain received <strong>the second highest amounts of</strong> tourists spending(revenue), rising from 56.3 billion to 60.4 billion, followed by France, China and Italy. Interestingly, despite falling numbers of tourists, the number of revenue in China <strong>rose by 1.7 billion in 2013.</strong></p><ol><li>followed by France, China and Italy 表示France, China Italy在Spain后面，这句可以使用respectively句型接具体数字。</li><li><strong>rose by</strong> 表示增加了1.7 billion，通过两个数字减出来的</li><li>despite <strong>falling numbers</strong> of tourists， 中国的游客数量少了，但花销更高了</li><li>the second highest amounts of / the second most visited destination / the widely spoen second language. 表示第二</li></ol><h2 id="c12-test-5-part-1">C12 Test 5-Part 1</h2><p>*<strong>The bar chart below shows the percentage of Australian men and women in different age groups who did regular physical activity in 2010.*</strong></p><p>*<strong>Summarise the information by selecting and reporting the main features, and make comparisons where relevant*</strong></p><p>Write at least 150 words.</p><p>![image-20250612200421842](/Users/lthero/Library/Application Support/typora-user-images/image-20250612200421842.png)</p><p>The bar chart compares the proportion of Australian men and women, categorized into six age groups, who participated in periodic physical activity during 2010.</p><p>Overall, a clear gender disparity is evident, with female participation rates exceeding those of males across almost all age groups. Furthermore, the two genders display contrasting trends over their lifespan: male activity levels formed a U-shaped curve, whereas female participation peaked in middle age before declining.</p><p>Focusing on the males, the highest engagement was recorded among the youngest group (15-24) at 52.8%. <strong>Following this peak</strong>, there was a significant and <strong>steady deterioration</strong> in <strong>activity levels</strong>, which <strong>fell to 42.2%</strong> for the 25-34 age group and subsequently <strong>bottomed out at 39.5% for men aged 35-44</strong>. From this trough, a gradual recovery is observed in the older demographics, with the rate climbing to 46.7% for those aged 65 and over.</p><p>In stark contrast, Australian women <strong>consistently showed higher engagement</strong> from the age of 25 onwards. Their participation rate began at 47.7% for the 15-24 bracket and steadily climbed to a zenith of 53.3% in the 45-54 age group. Thereafter, the figure for women <strong>experienced</strong> a <strong>modest</strong> decline. Notably, the gap in activity between the genders narrowed with age, with the figures converging towards parity in the eldest group (47.1% for women versus 46.7% for men).</p><ul><li>the figure for women <strong>experienced</strong> a <strong>modest</strong> decline. (不一定一直使用see/witness)</li><li>of six age groups/ categorized into six age groups</li></ul><h2 id="p53练习2">P53练习2</h2><p>The first chart below gives information about the money spent by British parents on their children’s sports between 2008 and 2014. The second chart shows the number of children who participated in three sports in Britain over the same time period.</p><p>![image-20250613142305326](/Users/lthero/Library/Application Support/typora-user-images/image-20250613142305326.png)</p><p>开关</p><p>The line graphs show the average amount of money that parents in Birtain spent on their children’s sporting activities per month and the figure for British children who were enrolled in three different sports from 2008 to 2014.</p><p>The line graphs show the average monthly expenditure spent by parents in Birtain on their children’s sporting activities and the number of children in Britain participating three different sporting activities between 2008 and 2014.</p><p>The line graphs show the mean amount of money that British parents spent on their children’s sporting activities every month and the figure for British children who took part in three different sport activities in a period of six years.</p><p>概括</p><p>It is clear that British parents spent more money each year on their children’s participation in sports throughout the period shown. In terms of the figure for children taking part, football was by far the most popular activity , significantly more welcomed by children than athletics and swimming.</p><p>描述</p><p>In 2008, British parents spent an average amount of around 20 pounds every month on their children’s sports. Over the following six years, parents’ spending on children’s sporting activities increased steadly, and by 2014 the average monthly amount had risen to just over 30 pounds.</p><p>In 2008, British parents spent an average monthly amount of around 20 pounds on their children’s sporting activities. Parents’ expenditure on children’s sport increased steadly over the following six years, and by 2014 the figure for average monthly amount of spending had risen to just over 30 pounds.</p><p>描述</p><p>Looking at the participation numbers, in 2008, children enrolled in football account for nearly 8 million, which is nearly four times as high as the figure for those taking part in swimming, and less than 1 million participated athietics. The figure for football participation remained relatively stable over the following six years. By contrast, participation in swimming almost doubled, to nearly 4 million children in the year 2014, and there was a dramatic increase in the number of children doing athietics.</p><p>Looking at the participation numbers, in 2008 approximately 8 million British children were enrolled in football, while only 2 million children taking part in swimming course and less than one million participated athletics. The figure for football participation remained relatively stable around 8 to 9 million over the following years. By contrast, participation in swimming almost doubled, to nearly 4 million children in 2014, and there was a nearly fivefold increase in the figure for children doing athletics.</p><p>这是的第二个图，先写2008的三个数据点，再写一个趋势（可以是football的reamin stable，也可以是swimming doubled），最后写在2014的三个数据点</p><p>比如2008年的三个点</p><ol><li>8 million children played football.<ol><li>扩展： nearly/approximately 8 million British children were enrolled in football.</li></ol></li><li>2 million children played swimming.<ol><li>扩展： only 2 million children signed up for/took part in swimming clubs.</li></ol></li><li>1 million children played athletics.<ol><li>扩展： less than one million participated athletics.(前面已经提到两次children了，这次直接省略)</li></ol></li></ol><p>P53练习2</p><ul><li>there was a dramatic/fivefold increase in the number of xxx  [在xx方面有几倍的增长]</li><li>over the following xx years [在随后的几年内]</li><li>Participation in xx = xx participation [参与xx活动]</li><li>the figure for xx remained relatively stable [xx的数据保持稳定]</li><li>rising steadily between xx and xx [在xx到xx期间稳定增加]</li><li>be enrolled in/taking part/doing/took part in/played/practised/ 都可以表示参加</li></ul><h2 id="p56-练习3">P56 练习3</h2><p>the chart below shows the value of one countries exports in various categories during 2015 and 2016.the table shows the percentage change in each category of exports in 2016 compared with 2015.</p><p>![image-20250615133439307](/Users/lthero/Library/Application Support/typora-user-images/image-20250615133439307.png)</p><p>The bar chart and table compare a country’s exporting revenue on five different group of products in the year 2015 and 2016.</p><p>It is clear that all products, with the exception of germs and jewllery, experienced growth in their export proportion, and textiles had the most significant growth in earnings. Furthermore, petroleum industry had by far the highest earning products in both years.</p><p>Export earnings from petroleum products rose from 61 billion in 2015 to 63 billion in 2016, with an increase of 3%. Revenue from engineered goods had a similar trend, witnessing a marked growth of 8.5% in 2016, stood at around 60 billion.</p><p>With regarding to other categories, between 2015 and 2016, there was a significant growth in export revenue from textiles industry of 15.24%, with earnings rising from 35 billion to over 40 billion. By contrast, <strong>there was no significant change</strong> in the amount of money earned from agricultural industry, which remained stable around 40 billion in both year. Finally, the export earning from gems and jewellery industry dropped by 5.18% during the same period, with revenue falling to around 50 billion.</p><p>Regarding the remaining categories, gems and jewellery, agricultural products, and textiles recorded lower earnings in 2015, roughly 53 billion, 40 billion and 35 billion respectively. Textiles showed the most significant proportion increase at 15.24, reaching to nearly 40 billion in 2016. Agricultural industry remained relatively stable, <strong>with no significant change</strong> in value around 40 billion, while gems and jewellery dropped by 5.18%, falling to approximately 50 billion.</p><h3 id="素材">素材</h3><p>P56 练习3</p><ul><li><p>with no significant change xx/there was almost no change in xx/</p></li><li><p>xx(earnings from xx) dropped by xx, falling to around xx</p></li><li><p>Earnings from/revenue from /the amount of money earned from xx</p></li><li><p>Rose/had rosen/increase/growth</p></li><li><p>Decline/falling to/dropped by/down to</p></li><li><p>Nearly/approximately/around/close to/roughly/</p></li></ul><h2 id="part1-c14test1">Part1 C14Test1</h2><p>The charts below show the average percentages in typical meals of three types of nutrients, all of which may be unhealthy if eaten too much.</p><p>*Summarise the information by selecting and reporting the main features, and make comparisons where relevant.*</p><p>Write at least 150 words.</p><p>![image-20250615161302360](/Users/lthero/Library/Application Support/typora-user-images/image-20250615161302360.png)</p><p>The pie chart illustrates the average proportions of three categories of nutrients added to daily meals consumed by people in America, which can be harmful if consumed in excess.</p><p>It is clear that the percentages for saturated fat and sodium contained in dinner account for the highest percentages among all meals, while the figures for all nutrients during breakfast are the lowest.</p><p>Dinner contains over three times as much sodium as breakfast, standing at 43%,compared to breakfast’s 14%. A similar pattern was observed in the case of saturated fat. The sodium content in lunch exceeds that in snacks and breakfast combined, at 29%.</p><p>With regard to the other nutrients, added sugar in snacks makes up 42%, while the figures for breakfast, lunch, and dinner~~,~~ are only 16%, 19% and 23% respectively. Finally, saturated fat is distributed relatively evenly across the four daily meals, with ~~37% in ~~dinner containing the highest percentage at 37%.</p><h2 id="part1-c15test1">Part1 C15Test1</h2><p>The chart below shows the results of a survey about people’s coffee and tea buying and drinking habits in five Australian cities. Summarise the information by selecting and reporting the main features, and make comparisons where relevant.</p><p>![image-20250615170747157](/Users/lthero/Library/Application Support/typora-user-images/image-20250615170747157.png)</p><p>7分</p><p>The bar chart compares the analysis of a survey conducted among residents of five Australian cities in terms of their coffee and tea comsumption hobbies.</p><p>It is clear that the vast majority of residents visited cafes for coffee or tea in last four weeks across all cities. By contrast, there was no significant difference in the percentage of those who chose to buy instant coffee over the same period.</p><p>Looking first at the metropolitan areas, people living in Melbourne prefer going to cafe for coffee or tea, standing at nearly 64% of the total. In comparison, only 42% of Melburnians prefer buying fresh coffee, while Sydney residents have a slightly higher preference at 44%.</p><p>With regard to other cities, it is noticable that Hobart has the second-highest percentage of residents who enjoy going to stores for coffee or tea, at approximately 63%. There is no t a clear difference between the figures for people living in Adelaide who prefer buying instant coffee versus those who prefer going out for a drink, both of which are around 50%. Finally, only less than 35% of residents in Brisbane and Adelaide purchased fresh coffee during last four weeks.</p><p>9分</p><p>The bar chart illustrates the findings of a survey concerning the coffee and tea consumption habits of residents in five Australian cities: Sydney, Melbourne, Brisbane, Adelaide, and Hobart.</p><p><strong>Overall, the data indicates a clear preference for instant coffee and café visits, while fresh coffee purchases remain comparatively low across all surveyed cities.</strong>  （保持上面7分其它不变，只把这个概括段替换，就能加0.5分）</p><p>In Melbourne and Hobart, the preference for instant coffee is particularly pronounced, with approximately 60% of respondents indicating they purchased instant coffee within the last four weeks. Conversely, fresh coffee purchases are markedly less popular, with only 42% of Melburnians and just 25% of Adelaide residents opting for this choice. Sydney exhibits a similar trend, as 44% of its inhabitants reported buying fresh coffee, but still lagging behind the popularity of instant coffee. <strong>（保持上面7分其它不变，只把这个描述段替换，就能加1分）</strong></p><p>Examining café visits, Sydney and Brisbane reveal significant engagement, with 50% and 55% of their respective populations frequenting cafés for coffee or tea in the same timeframe. Hobart follows closely with around 63%, indicating a robust café culture. Interestingly, Adelaide presents a unique scenario where the tendencies to purchase instant coffee and to visit cafés approximate 50%, highlighting a balanced consumer preference in that city. Overall, fresh coffee emerges as the least favored option across all regions surveyed.</p><h2 id="part1-c15test2">Part1 C15Test2</h2><p>The graph below shows the number of tourists visiting a particular Caribbean island between 2010 and 2017.</p><p>![image-20250616235309231](/Users/lthero/Library/Application Support/typora-user-images/image-20250616235309231.png)</p><p>7分</p><p>This line chart illustrates the figures for visitors to a Caribbean island over a period of eight years.</p><p>It is evident that there was a clear preference for people visiting the Caribbean island between 2010 and 2017, while the figure for people choosing to stay on the island remained relatively stable.</p><p>In 2010, approximately one million tourists visited the island, with merely 0.25 million of them opting to stay on cruise ships. Over the following six years, the figure for those visiting on cruise ships increased considerably, reaching nearly 1.5 million in 2016. By contrast, there was no significant difference in the number of travelers staying on the island during the same period, which stayed around 1.2 million to 1.5 million per year.</p><p>Between 2016 and 2017, the total number of visitors increased dramatically, more than threefold, reaching 3.5 million. During this time, visitors staying on cruise ships made a greater contribution than tourists staying on the island, with 2 million and 1.5 million respectively.</p><p>9分</p><p>The line graph presented delineates the influx of tourists to a Caribbean island from 2010 to 2017, disaggregated by the type of accommodation chosen.</p><p>Overall, there is a notable upward trajectory in the number of visitors across all categories, with those opting to stay on the island consistently outnumbering cruise ship visitors throughout the period under review.</p><p>In 2010, the total number of tourists reached approximately 1 million, comprised of around 0.25 million visitors on cruise ships and around 0.75 million choosing to stay on the island. <strong>The trend over the subsequent years reveals a significant increase in tourist numbers</strong>, with visitors staying on cruise ships experiencing a robust rise. By 2017, numbers for cruise ship visitors had surged to about 1.25 million, while those staying on the island escalated to approximately 2.75 million, reflecting substantial growth in both categories.</p><p>The overall total of visitors to the Caribbean island reached 4 million by 2017, marking a marked increase from previous years. Specifically, the number of tourists on cruise ships and those staying on the island demonstrated a coordinated growth trend. The figure for visitors residing on the island consistently constituted the majority, revealing a sustained preference among tourists for land-based accommodation over the cruise option. This trend underscores the island’s appeal as a desirable destination for extended stays.</p><p>素材</p><ul><li>there was a clear/notable preference for xxx between xx and xx</li><li>Opt to do sth/choosing to do sth.</li><li>there was no significant difference in xxx</li><li>there was a notable/clear upward trajectory in xxx</li><li>The trend over the subsequent(following) years reveals a significant increase in xx number.</li><li>a robust rise (强力提升)</li></ul><h2 id="素材">素材</h2><h4 id="开头">开头</h4><ul><li><strong>单一图表</strong><ul><li>The provided line graph illustrates/depicts/shows the changes in [topic] in [place] over a period of [X] years, from [year] to [year].</li><li>The bar chart compares the [data being compared] across several [categories] in the year [year].</li><li>The pie chart gives information about the proportion of [what is being shown] in [place/context].</li><li>The table provides a breakdown of statistics regarding [topic].</li></ul></li><li><strong>多个图表</strong><ul><li>The two pie charts illustrate the differences in [topic] between the years [year 1] and [year 2].</li><li>The line graph shows [what the line graph shows], while the bar chart reveals [what the bar chart shows].</li></ul></li></ul><h3 id="none"></h3><h4 id="概括-总结句式-overall-conclusion">概括/总结句式 (Overall/Conclusion)</h4><p>用于在开头段之后或结尾段，总结图表最核心、最显著的特征。</p><ul><li>总体趋势<ul><li>Overall, what stands out from the graph is that there was a clear upward/downward trend in [topic] over the period.</li><li>In general, it is evident that [A] experienced a significant increase, whereas [B] saw a steady decline.</li></ul></li><li>最值/最突出特点<ul><li>It is immediately apparent that [category] was the most popular/significant [item] throughout the entire period.</li><li><strong>Another noticeable feature</strong> is that [A] reached its peak in [year], while [B] hit a low point.</li><li></li></ul></li></ul><p>几种固定句式</p><ol><li>N% of 群体/物体 had</li></ol><p>增涨句式</p><ol><li>There was a marked/significant/dramatic/ increase[替换其它涨词] in (the amount of money earned from/ spent by xxx) [主句]</li><li>There was a <strong>fivefold increase</strong> in the number of xxx  [主句，在xx方面有几倍的增长]</li><li>the production <strong>increased more than eightfold</strong> [主句，xx增涨了8倍]</li><li>the oil price had (more than) <strong>doubled/quadrupled</strong> [主句，已经翻2/4倍了]</li><li>物体 experienced/showed a significant an increase of 20% (增长了20%)。 [主句], reaching N[数字] in 2020. [分句，这里不加to]</li><li>The figure for 物体 rose steadily from N in 2020 to N’ in 2021. [主句]</li><li><strong>rising steadily</strong> between xx and xx [在xx到xx期间稳定增加] / before rising steadily [作为<strong>分句</strong>式，主句通常表示稳定一段期间]</li><li>Starting at N in [年份], the figure rose steadily to M in [年份]. [主句]</li><li>the oil price <strong>went up once again</strong> [主句]</li></ol><p>下降句式</p><ol><li>xx(earnings from xx) <strong>dropped by</strong> 50 million(50%, half) / <strong>dropped from xx to</strong> xx [主句]</li><li>xx <strong>fell from 20% in 2019 to</strong> 12% in 2020. [主句]</li><li>xx <strong>rose to</strong> 20% in 2019 but <strong>fell again to</strong> 12% in 2020. [主句，先上升再下降]</li><li>the oil price <strong>had halved</strong> [主句, 半价]</li><li>the oil price <strong>had dropped by(fell to) half</strong> [主句, 半价]</li><li>Decline/falling to/dropped by/down to [作为<strong>分句</strong>]</li><li>the sales of [A] hit a low/bottomed out at just under N in [year]</li><li>After peaking at [N], the number of [A] started to decline. [主句] (在达到顶峰后开始下降)</li></ol><p>稳定句式</p><ol><li><p>the figure for xx <strong>remained relatively stable</strong> [主句，xx的数据保持稳定]</p></li><li><p>spending by American <strong>increased</strong> dramatically/slightly [主句]</p></li><li><p>daily spending <strong>had risen to</strong> around $200 in the year 2020 [主句]</p></li><li><p>The daily expenditure <strong>fluctuated</strong> around $200 / <strong>many fluctuations can be seen</strong> during… [主句]</p></li><li><p>The daily expenditure saw/witnessed significant fluctuations.</p></li><li><p>there <strong>was almost no change</strong> in the daily spending in the year 2020 [主句]</p></li><li><p><strong>with no significant change</strong> in the daily spending [作为<strong>分句</strong>]</p></li></ol><p>描述数字</p><ol><li>Earnings from/revenue from /the amount of money earned from xx [主句]</li><li>主体 spent/employed/recycled 69% of xxx [主句]</li><li>reaching its peak of $100 [作为分句]</li><li>to nearly $100 (单位) [作为分句]</li><li>stood at nearly $100 [作为分句]</li></ol><p>衔接句式</p><ol><li>over the following xx years</li><li>Overall / By contrast /Furthermore /</li><li>We can also see that</li><li>Looking (first) at xxx number(participation numbers)/ the older age group</li><li>In each of the years shown on the chart</li><li>Throughout the 8-year period shown / throughout the period shown</li><li>With the regard to other xxx/ Regrading other xxx</li><li>Over the following five/six years / over the 8-year period (shown),</li></ol><p>自我翻倍</p><ol><li>Increased X-fold / Become X times as much</li><li>Doubled/quadrupled/常见只用doubled，其它的多数用increased X-fold</li></ol><p>倍数关系</p><ol><li>The number of [A] was three times higher than that of [B] (A是B的三倍)</li><li>The number of [A] was three times/twice as high as that of [B] (A是B的三倍)</li><li>[A] spent twice as much money on [X] as on [Y] (A在X上花的钱是Y的2倍)</li></ol><p>趋势相似与不同</p><ol><li><p><strong>a similar pattern was observed</strong> in the case of [B].   [主句] (B也呈现了相似的模式)</p></li><li><p>In contrast, the figure for [B] <strong>showed an opposite trend</strong>.  [主句] (B的数据呈现了相反趋势)</p></li><li><p>[A] and [B] <strong>followed a noticeably different trajectory</strong> over the period. (A和B的轨迹截然不同)</p></li><li><p>the <strong>trends for</strong> both commodity <strong>were noticeably different</strong> from each other/those described above [主句，表示不同]</p></li><li><p>the <strong>trends for</strong> both commodity <strong>were very similar</strong> [主句，表示相同]</p></li><li><p>the <strong>trend reversed itself</strong></p></li><li><p>The <strong>trend</strong> [over the subsequent(following) years] reveals/indicates/shows a significant increase(decrease) in tourist numbers</p></li></ol><p>排名</p><ol><li>[A] accounted for <strong>the largest proportion of the total</strong>, with N% [主句]</li><li>[A] <strong>was followed by</strong> [B] and [C], at N% and M% respectively. [主句]</li><li><strong>The figure for</strong> [A], [B], and [C] were N, M, and P, respectively. [主句]</li></ol><p>描述占比</p><ol><li>[A] made up/accounted for/constituted/comprised nearly 60% of the total.</li><li>A small <strong>fraction</strong> (5%) of resondents indicated/showed/illustrated that</li><li>The vast majority of [A], over 80%, prefered [B].  [主句]</li></ol><p>描述未来</p><ol><li>The number of [A] is projected/forecast/predicted to rise to N by [future year]</li><li>It is anticipated that this trend will continue in the coming years.</li><li>Looking ahead, [A] is expected to overtake [B] as the leading category. [A有希望超过B, 成为领先类别]</li></ol><p>常见同义词</p><ol><li>Spending, expenditure, the amount of money that xx spent, paid out</li><li>revenue, earnings, the amount of money earned, Sales</li><li>Category, group, type</li><li>Company, industry, manufacturers, brand, firm, producer,</li><li>the average amount of money, an average of $200 on</li><li>Annually, average yearly, per year, monthly, per month, weekly, per week, daily, every day, per day</li><li>Feedback, response,</li><li>trend, fluctuation, movement, variation, shift</li><li>proportion, percentage, share, fraction</li><li>Illustrate,  depict, reveal, indicate, represent</li><li>the level of , the rate of, the amount of, the quantity of,</li><li>surge, increase, go up, rise(rose, risen),</li><li>Decline, down to, dropped to , fell to,</li></ol><p>副词</p><ol><li>Nearly/approximately/around/close to/roughly/only</li><li>Respectively</li><li>significantly/slightly/considerably/noticeably</li></ol><p>形容词</p><ol><li>Vast/sifnificant/clear/excellent/</li></ol><p>最高级</p><ol><li>the five most popular</li><li>the vast majority of xxx 谓语 xxx</li><li></li></ol><p>比较级</p><ol><li>two times as high as …</li></ol><h1 id="大作文">大作文</h1><h2 id="观点类">观点类</h2><h3 id="p119">P119</h3><p>开头段</p><p>It is often said that modern life presents us an overwhelming number of choices.</p><p>[由<code>modern life give us more choices</code>扩展]</p><p>I completely agree with this, and I believe that the Internet and globalisation are the two main (major) factors involved.</p><p>[先<strong>一边倒地认同</strong>, 再说原因：Internet&amp;Globalisation are the major factors.]</p><p>主体段一：<strong>网络让人有更多选择</strong></p><p>It is undeniable that the Internet has led to a dramatic expansion in the number of choices that are available to us.</p><p>[同样，主体段一内先说state: <strong>Internet led to expansion in the number of choices.</strong></p><p>再扩展，比如添加形容词dramatic/添加从句that are available to us.]</p><p>For instance, the number of online media options is now almost endless. There are countless websites offering entertainment, news, videos, on-demand TV and music streaming, many of which are free.</p><p>[解释1，同样先说state: <strong>online media options is endless</strong>，然后举例各种实例entertainment, news, videos, on-demand TV and music streaming, 最后再使用个从句 many of which are free.]</p><p>I would argue that this abundance of media leads to confusion on the part of the average user, as we have to make so many decisions about the content that we consume.</p><p>[结果1, 同样先说state: <strong>media leads to confusion on people.</strong> 再说原因 as we have to make decisions on xxx]</p><p>主体段二：<strong>全球化导致人有更多选择</strong></p><p>Alongside the influence of the Internet, globalisation is making the world smaller and compounding this problem of too much choice.</p><p>[除了网络Alongside the Internet,</p><p><strong>State</strong>: 全球化让世界更小，加剧|造成了问题<strong>globalisation makes the world smaller and compound the problem</strong></p><p>太多选择是一种问题：problem of too much choice]</p><p>compound v.复合，加剧，造成</p><p>Cheap international flights have made overseas travel possible for millions of people, but this also means that we are faced with a world of options when deciding where to go on holiday or even where to live.</p><p>[从留学和旅行两个角度补充]</p><p>[旅行：廉价跨国飞行/机票让出国旅行成为可能<strong>cheap international flights makes overseas travel possible</strong></p><p><strong>but this also means 过渡句子</strong></p><p>面对太多选择，无法决定假期去哪儿，或者去哪儿生活<strong>where to go on holiday or where to live.</strong>]</p><p>We no longer <strong>have the limited but simple travel choices</strong> of our grandparents’ generation.</p><p>[旅行角度的解释]</p><p>The same is true if we look at the increasing tendency for young people to study abroad.</p><p>[留学角度：the increasing tendency of study abroad扩展成的一句话,添加主语for young people]</p><p>While the opportunity for overseas study seems appealing, many students are confused about where to go and which path to take</p><p>[留学的解释：people are confused about <strong>where to go and which path to take</strong>]</p><p>总结</p><p>In conclusion, we are faced with a huge number of options in most areas of life nowadays, and this is often more bewildering than beneficial.</p><p>[总结就是改写标题+重申观点：我同意选择太多了]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;p18-example-1&quot;&gt;P18, Example 1.&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;按类别划分&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Britain: 在所有商品类别的消费最多，其中photographic film最高&lt;/p&gt;
&lt;p&gt;France, 在3种商品第二高</summary>
      
    
    
    
    <category term="IELTs" scheme="https://blog.lthero.cn/categories/IELTs/"/>
    
    
    <category term="IELTs" scheme="https://blog.lthero.cn/tags/IELTs/"/>
    
  </entry>
  
  <entry>
    <title>在ComfyUI发布节点</title>
    <link href="https://blog.lthero.cn/2025/04/24/ReleaseNodesForComfyui/"/>
    <id>https://blog.lthero.cn/2025/04/24/ReleaseNodesForComfyui/</id>
    <published>2025-04-24T14:31:31.000Z</published>
    <updated>2025-06-24T14:32:36.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在comfyui发布节点">在ComfyUI发布节点</h1><h2 id="创建一个comfyui-registry账号">创建一个ComfyUI-registry账号</h2><p>在 <a href="https://registry.comfy.org/">Comfy Registry</a> 注册账号</p><h3 id="创建一个publisher">创建一个Publisher</h3><p>「Publisher」是创建自定义节点的ID标识，一旦创建后不可以被修改</p><p><img src="https://mintlify.s3.us-west-1.amazonaws.com/dripart/images/publisherid.png" alt="Hero Dark"></p><h3 id="创建一个api-key">创建一个API Key</h3><p><a href="https://registry.comfy.org/nodes">链接</a>，后续使用CLI工具上传文件需要用上</p><p><img src="https://mintlify.s3.us-west-1.amazonaws.com/dripart/images/pat-1.png" alt="Create key for Specific Publisher"></p><p>将APIKey保存好，它只显示一次</p><p><img src="https://mintlify.s3.us-west-1.amazonaws.com/dripart/images/pat-2.png" alt="Create API Key"></p><h3 id="在节点文件中添加meta信息">在节点文件中添加Meta信息</h3><p>先安装comfy-cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install comfy-cli</span><br></pre></td></tr></table></figure><p>再进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comfy node init</span><br></pre></td></tr></table></figure><p>这行代码会在节点项目中生成<code>pyproject.toml</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml</span></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;&quot;</span> <span class="comment"># Unique identifier for your node. Immutable after creation.</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;1.0.0&quot;</span> <span class="comment"># Custom Node version. Must be semantically versioned.</span></span><br><span class="line"><span class="attr">license</span> = &#123; file = <span class="string">&quot;LICENSE.txt&quot;</span> &#125;</span><br><span class="line"><span class="attr">dependencies</span>  = [] <span class="comment"># Filled in from requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="section">[project.urls]</span></span><br><span class="line"><span class="attr">Repository</span> = <span class="string">&quot;https://github.com/...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.comfy]</span></span><br><span class="line"><span class="attr">PublisherId</span> = <span class="string">&quot;&quot;</span> <span class="comment"># TODO (fill in Publisher ID from Comfy Registry Website).</span></span><br><span class="line"><span class="attr">DisplayName</span> = <span class="string">&quot;&quot;</span> <span class="comment"># Display name for the Custom Node. Can be changed later.</span></span><br><span class="line"><span class="attr">Icon</span> = <span class="string">&quot;https://example.com/icon.png&quot;</span> <span class="comment"># SVG, PNG, JPG or GIF (MAX. 800x400px)</span></span><br></pre></td></tr></table></figure><p>查看pyproject.toml的更多信息：<a href="https://docs.comfy.org/registry/specifications">链接</a></p><h2 id="公开到comfy-registry">公开到Comfy-Registry</h2><h3 id="方式一-comfy-cli">方式一: Comfy CLI</h3><p><strong>每次手动</strong>运行下方的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comfy node publish</span><br></pre></td></tr></table></figure><p>随后被要求输入API Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">API Key <span class="keyword">for</span> publisher <span class="string">&#x27;&lt;publisher id&gt;&#x27;</span>: ****************************************************</span><br><span class="line"></span><br><span class="line">...Version 1.0.0 Published. </span><br><span class="line">See it here: https://registry.comfy.org/publisherId/your-node</span><br></pre></td></tr></table></figure><h3 id="方式二-github-actions">方式二: Github Actions</h3><p>每次自动更新到comfy-registry，这需要用到GitHub Actions</p><h4 id="创建一个github-secret">创建一个Github Secret</h4><p>找到 Settings -&gt; Secrets and Variables -&gt; Actions -&gt; Under Secrets Tab and Repository secrets -&gt; New Repository Secret.</p><p>名字(name)： <code>REGISTRY_ACCESS_TOKEN</code></p><p>值(value)：``API key`（在Comfy-registry创建的)</p><h4 id="创建一个github-action">创建一个Github Action</h4><p>将下面的代码复制到项目的： <code>/.github/workflows/publish_action.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name: Publish to Comfy registry</span><br><span class="line">on:</span><br><span class="line">  workflow_dispatch:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">    paths:</span><br><span class="line">      - <span class="string">&quot;pyproject.toml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  publish-node:</span><br><span class="line">    name: Publish Custom Node to registry</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Check out code</span><br><span class="line">        uses: actions/checkout@v4</span><br><span class="line">      - name: Publish Custom Node</span><br><span class="line">        uses: Comfy-Org/publish-node-action@main</span><br><span class="line">        with:</span><br><span class="line">          personal_access_token: <span class="variable">$&#123;&#123; secrets.REGISTRY_ACCESS_TOKEN &#125;</span>&#125; <span class="comment">## Add your own personal access token to your Github Repository secrets and reference it here.</span></span><br></pre></td></tr></table></figure><p>如果你的项目拥有除<code>main</code>外的其它分支，如<code>master</code>，也需要将它添加到<code>publish_action.yml</code>的<strong>branches</strong>中</p><h4 id="测试github-action">测试Github Action</h4><p>更新<code>pyproject.toml</code>的版本号，检查是否已经推着到comfy-registry成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在comfyui发布节点&quot;&gt;在ComfyUI发布节点&lt;/h1&gt;
&lt;h2 id=&quot;创建一个comfyui-registry账号&quot;&gt;创建一个ComfyUI-registry账号&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&quot;https://registry.comfy.org</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="ComfyUI" scheme="https://blog.lthero.cn/tags/ComfyUI/"/>
    
  </entry>
  
  <entry>
    <title>开通土耳其区Prime会员</title>
    <link href="https://blog.lthero.cn/2025/03/24/RegisterPrimeOfTurkey/"/>
    <id>https://blog.lthero.cn/2025/03/24/RegisterPrimeOfTurkey/</id>
    <published>2025-03-24T14:28:18.000Z</published>
    <updated>2025-06-24T14:29:08.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>土区 Amazon Prime Video 涨价，由 7.99 TL 上涨至 39 TL，相当于每月不到2.8 CNY涨至 8 CNY</p></blockquote><h1 id="关于amazon">关于Amazon</h1><p>Amazon Prime Video是亚马逊公司开发、持有并运营的互联网视频点播服务，它提供包括亚马逊工作室原创内容在内的电视节目和影音的租借、购买及在线观看。</p><p>最令人耳熟能详的莫过于:</p><ul><li>《<strong>The Boys 黑袍纠察队</strong>》</li><li>《 Upload 上载新生》</li><li>《<strong>The Man in the High Castle 高堡奇人</strong>》</li><li>《<strong>The Marvelous Mrs. Maisel 了不起的麦瑟尔夫人</strong>》</li><li>等等一系列剧集</li></ul><h2 id="amazon-prime-权益">Amazon Prime 权益</h2><p>土耳其的 Prime 权益除包含专属的购物权益外，还有 Prime Video，Prime Gaming</p><blockquote><p>Prime Gaming每月可以免费领取游戏以及 Twitch的频道订阅</p></blockquote><p><a href="https://yummy.best/content/images/2022/07/image-7.png"><img src="https://yummy.best/content/images/2022/07/image-7.png" alt="img"></a>土耳其的 Prime 权益</p><p><a href="https://www.amazon.in/?ref=yummy.best">印度</a> 的 Prime 权益则是 <strong>将 Prime Gaming 换成了 Amazon Music 会员</strong></p><blockquote><p>和免费版没啥区别的会员，不如 Gaming 权益来的实在</p></blockquote><h2 id="开通方式">开通方式</h2><h3 id="一-以土耳其订阅为例子-学生免费白嫖半年请看-方法二">一、以土耳其订阅为例子 （学生免费白嫖半年请看 方法二）</h3><p><strong>1. 进入 <a href="https://www.amazon.com.tr/?ref=yummy.best">*<em>亚马逊土耳其官网*</em></a> 。</strong></p><p>💡网页均为土耳其语,建议使用 Edge / Chrome 浏览器访问,并开启网页翻译</p><blockquote><p><strong>注： 后面出现的截图可能会由于翻译API的问题，显示的文字未必完全相同。</strong></p></blockquote><p><strong>2. 点击网页右上角的按钮(如图) ，完成登录/注册。</strong></p><p>⚠️注意: 这一步注册的邮箱推荐使用Gmail，用自定义域名邮箱接验证码基本上都会直接报错。</p><p><a href="https://yummy.best/content/images/2022/07/image.png"><img src="https://yummy.best/content/images/2022/07/image.png" alt="img"></a></p><p>点击 登录 / 成为新会员</p><p><a href="https://yummy.best/content/images/2022/07/image-1.png"><img src="https://yummy.best/content/images/2022/07/image-1.png" alt="img"></a></p><p><a href="https://yummy.best/content/images/2022/07/image-2.png"><img src="https://yummy.best/content/images/2022/07/image-2.png" alt="img"></a></p><p>推荐使用 Gmail 邮箱接收验证码，否则容易显示系统出错。</p><ol start="3"><li>完成 登录 / 注册 后，点击 我的 Prime 会员资格 ，并点击 免费试用 30 天的按钮</li></ol><p><a href="https://yummy.best/content/images/2022/07/image-4.png"><img src="https://yummy.best/content/images/2022/07/image-4.png" alt="img"></a></p><p><a href="https://yummy.best/content/images/2022/07/image-6.png"><img src="https://yummy.best/content/images/2022/07/image-6.png" alt="img"></a></p><ol start="4"><li>点击 添加信用卡或借记卡</li></ol><p><a href="https://yummy.best/content/images/2022/07/image-8.png"><img src="https://yummy.best/content/images/2022/07/image-8.png" alt="img"></a></p><ol start="5"><li>依次输入 卡片上的姓名、卡号、有效期 ，然后点击 黄色按钮 完成订阅。</li></ol><blockquote><p><strong>P.S 亚马逊这些大厂由于安全度较高且风控严格，所以这一步无需输入CVV</strong></p></blockquote><h4 id="你需要知道的冷知识">你需要知道的冷知识</h4><p>冷知识1： 即使商家收集了您的CVV并发现它不正确，商家仍然可以自行决定向您收取费用。</p><p>冷知识2：亚马逊风控非常严格，别想着不验证CVV就动歪脑筋，商家也不是傻子。</p><p>冷知识3：亚马逊的风控虽然非常严格，但只要你自己是卡主人，跟随风控邮件要求，发送该卡的的账单或者流水即可轻松解除风控。</p><p><a href="https://yummy.best/content/images/2022/07/image-9.png"><img src="https://yummy.best/content/images/2022/07/image-9.png" alt="img"></a></p><p><strong>6. 尽情享受 Prime 权益吧！</strong></p><h3 id="二-美亚amazon-可以白嫖6个月学生会员">二、美亚Amazon 可以白嫖6个月学生会员</h3><ol><li>使用美国节点注册亚马逊Amazon账号，并绑定自己信用卡/借记卡。</li></ol><blockquote><p>注册请参考 方法一 里的内容，这里不再复述。</p></blockquote><ol><li>进入 <a href="https://amzn.to/46t50De?ref=yummy.best">开通页面</a> ，登陆教育邮箱，点击Try Prime Student，根据步骤完成即可白嫖半年Prime。</li></ol><p><a href="https://yummy.best/content/images/2022/07/image-11.png"><img src="https://yummy.best/content/images/2022/07/image-11.png" alt="img"></a></p><p>三、无教育邮箱，正常试用</p><ol><li>如果你没有教育邮箱也通过 <a href="https://amzn.to/3ZWEqQv?ref=yummy.best">这个链接</a> 免费试用一个月Amazon Prime</li><li>如果只想要Prime Video 且试用完需要正常续费的，可以通过 <a href="https://amzn.to/3tsd1Ka?ref=yummy.best">这个链接</a> 开通 , 再通过 <a href="https://amzn.to/3LWSyn8?ref=yummy.best">这个链接</a> 免费获取多达100个频道的免费试用。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;土区 Amazon Prime Video 涨价，由 7.99 TL 上涨至 39 TL，相当于每月不到2.8 CNY涨至 8 CNY&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;关于amazon&quot;&gt;关于Amazon&lt;/h1&gt;
&lt;p&gt;Ama</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="prime" scheme="https://blog.lthero.cn/tags/prime/"/>
    
  </entry>
  
  <entry>
    <title>开通尼日利亚地区Netflix</title>
    <link href="https://blog.lthero.cn/2025/03/24/RegisterNetflixAccountOfNigeria/"/>
    <id>https://blog.lthero.cn/2025/03/24/RegisterNetflixAccountOfNigeria/</id>
    <published>2025-03-24T14:26:56.000Z</published>
    <updated>2025-06-24T14:29:15.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开通尼日利亚地区netflix">开通尼日利亚地区Netflix</h1><blockquote><p>文章的截图是从https://uuzi.net/subscribe-hongkong-netflix-guide/拿的，图不同，但流程是相似的</p></blockquote><h2 id="准备工作">准备工作</h2><ul><li>一个尼日利亚地区的代理（如机场、VPN或住宅IP）</li><li>指纹浏览器adsPower</li><li>一张尼日利亚信用卡(使用Paga创建虚拟信用卡)</li><li>一个尼日利亚地区手机号</li></ul><h2 id="尼日利亚代理">尼日利亚代理</h2><p><a href="https://iproyal.cn/?r=tuge">iproyal</a>或<a href="https://proxy302.com/">proxy302</a></p><p>花了7美元买了1个G的流量，用了好几个月，每次涉及到转区，开通一些比较稀有国家例如巴基斯坦、尼日利亚、埃及等地区的服务都能用上，开通服务每次也只用十几兆的流量，如果关闭图片显示，更节省流量，能用好久确实很方便。下面我直接跳过购买界面，选择香港代理ip如下：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.34.37-scaled.webp" alt="img"></p><h2 id="指纹浏览器adspower">指纹浏览器adsPower</h2><p>指纹浏览器官方地址：<a href="https://www.adspower.net/">https://www.adspower.net/</a></p><p>新建浏览器环境，将如下的信息参照上图的配置信息填入：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.37.43-1-scaled.webp" alt="img"></p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.40.59.webp" alt="img"></p><p>打开新建的环境：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.42.02.webp" alt="img"></p><p>显示国家/地区为尼区说明环境没问题</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.44.55-scaled.webp" alt="img"></p><h2 id="netflix注册与支付流程">netflix注册与支付流程</h2><p><a href="http://xn--netflix-f43kh3vnqptc6ik5nn03aymlilwmf9b3wkv69i.com/ng%EF%BC%8C%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%88%B0ng%E7%9A%84%E7%BD%91%E5%9D%80%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BAng%E5%88%99%E7%BB%A7%E7%BB%AD%E5%9C%A8%E4%B8%8B%E5%9B%BE%E4%B8%AD%E5%A1%AB%E5%85%A5%E5%BC%80%E9%80%9A%E7%9A%84%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80%EF%BC%9A">在打开的环境中地址栏输入netflix.com/ng，确认是否会自动跳转到到ng的网址，如果显示ng则继续在下图中填入开通的邮箱地址：</a></p><p><strong>下图用hk举例</strong></p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.49.55-scaled.webp" alt="img"></p><p>完成账户设定，点击下一步：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.51.05-scaled.webp" alt="img"></p><p>根据需求，选择合适的套餐。我的因为是拼车，所以选择了最高的套餐：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.56.23-scaled.webp" alt="img"></p><p>选择付款方式，可以看到竟然有银联的支持：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_19.57.18-scaled.webp" alt="img"></p><p>填入信用卡信息，填写完毕后点击启用会员资格：</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/2024-01-12-20.00.58.jpg" alt="img"></p><p>这里会要求输入尼区地区的手机号，关于手机号也简单，<a href="https://sms-activate.guru/en">SMS-Activate</a>找到尼区奈飞接码即可</p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_20.03.29-scaled.webp" alt="img"></p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_20.04.45-scaled.webp" alt="img"></p><p><img src="https://uuzi.net/wp-content/uploads/2024/01/iShot_2024-01-12_20.06.17-scaled.webp" alt="img"></p><h2 id="尼区信用卡">尼区信用卡</h2><p>这步最麻烦，目前比较好用的虚拟信用卡开通服务商是Paga</p><h3 id="自己注册-更安全">自己注册（更安全）</h3><p>需要本地人注册认证（需要本地人的身份信息等）；而一套身份信息大概需要30刀；200块左右买断这个身份；还需要本地人的手机号（大概10美元）；所以加起来一共要40刀左右；此方案也有小概率被身份人将账号找回……</p><h3 id="直接购买注册好的账号-不太推荐">直接购买注册好的账号（不太推荐）</h3><p>一个注册好的账号大概6美元，但它的身份信息可能会被别人共用，不太安全；</p><p>有了paga账号后，需要先给paga充值，充值后才能开虚拟卡；</p><h3 id="充值方式">充值方式</h3><p>1、找其它有paga账号的人进行转账</p><p>2、使用wise转账（似乎不太行，会被wise限制）</p><p>3、使用cipper转账</p><p>假设已经充值好了，则可以在paga的&quot;card&quot;里开通奈拉虚拟卡（手续费500奈拉），开通后向卡里充一些钱（结合网飞的实时价格），再去netflix支付即可。</p><h2 id="总结">总结</h2><p>尼区虽然低价（4k版本大概40元/月），但有几个缺点</p><p>1、网飞的尼区账号首月会被限制ip，只能尼区ip或美区能观看；一个月后会解锁，可以各地区使用；但不排除网飞继续限制……</p><p>2、网飞会针对低价区，随时有翻车可能，且费用不退；</p><p>3、paga软件做得非常差，哪怕是自己买了身份信息并做kyc认证，账号还是有被找回的可能，从长期性来看，这种卡早晚会被取消；</p><p>综合上述内容，如果想长期使用netflix（自己开车），还是注册香港区的netflix（4k版本大概100元/月），均摊下每人20/月；</p><p>此外，目前的netflix低价区还有埃及、土耳其，不过也都不太稳定；</p><p>最近折腾了一圈，想靠这个方案挣钱还是难的，也就刚好cover掉成本挣不了多少（卖40/季度），而且随时有翻车风险，以及入金的不安全性和风险</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开通尼日利亚地区netflix&quot;&gt;开通尼日利亚地区Netflix&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;文章的截图是从https://uuzi.net/subscribe-hongkong-netflix-guide/拿的，图不同，但流程是相似的&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Netflix" scheme="https://blog.lthero.cn/tags/Netflix/"/>
    
  </entry>
  
  <entry>
    <title>Zerotier自建Planet服务器的使用说明</title>
    <link href="https://blog.lthero.cn/2025/03/11/BuildYourOwnZerotierPlanet/"/>
    <id>https://blog.lthero.cn/2025/03/11/BuildYourOwnZerotierPlanet/</id>
    <published>2025-03-11T02:32:10.000Z</published>
    <updated>2025-06-24T14:24:27.269Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总体分为两大步骤</strong></p><p>第一步、下载并导入 <code>planet</code> 文件：<a href="http://114.66.63.134:3223/planet?key=63122304d122157b">点击下载planet文件</a></p><p>第二步、加入到虚拟局域网网络（由我发送给你的网络ID）</p><h1 id="不同平台的客户端配置过程">不同平台的客户端配置过程</h1><h2 id="windows-配置">Windows 配置</h2><p>1、首先去zerotier官网下载一个zerotier客户端</p><p>2、下载 <code>planet</code> 文件：<a href="http://114.66.63.134:3223/planet?key=63122304d122157b">点击下载planet文件</a></p><p>3、将 <code>planet</code> 文件覆盖粘贴到<code>C:\ProgramData\ZeroTier\One</code>中(这个目录是个隐藏目录，需要运允许查看隐藏目录才行)</p><p>4、按Win+S 搜索 <code>服务</code></p><p>![image-20250310132508140](/Users/lthero/Library/Application Support/typora-user-images/image-20250310132508140.png)</p><p>找到<strong>ZeroTier One</strong>，并且重启服务</p><p>![image-20250310132517587](/Users/lthero/Library/Application Support/typora-user-images/image-20250310132517587.png)</p><h3 id="加入网络">加入网络</h3><p>使用管理员身份打开PowerShell</p><p>执行如下命令，看到<strong>join ok</strong>字样就成功了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt; zerotier-cli <span class="built_in">join</span> 网络<span class="built_in">id</span></span><br><span class="line">200 <span class="built_in">join</span> OK</span><br></pre></td></tr></table></figure><p>如果有加入到其它网络，先离开其它网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli leave 网络id</span><br></pre></td></tr></table></figure><h3 id="检查">检查</h3><p>执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; zerotier-cli peers</span><br><span class="line">200 peers</span><br><span class="line">&lt;ztaddr&gt;   &lt;ver&gt;  &lt;role&gt; &lt;lat&gt; &lt;link&gt; &lt;lastTX&gt; &lt;lastRX&gt; &lt;path&gt;</span><br><span class="line">0651177f3e x.x.x  PLANET    52 DIRECT 16       8994     1.1.1.1/9994</span><br><span class="line">PS C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure><p>可以看到有一个 <strong>PLANTET</strong> 连接方式为 DIRECT(直连) 即可</p><h2 id="linux-客户端">Linux 客户端</h2><ol><li>安装linux客户端软件</li><li>进入目录 <code>/var/lib/zerotier-one</code></li><li>替换目录下的 <code>planet</code> 文件</li><li>重启 <code>zerotier-one</code> 服务(<code>service zerotier-one restart</code>)</li><li>加入网络 <code>zerotier-cli join</code> 网络 <code>id</code></li><li>管理后台同意加入请求</li><li><code>zerotier-cli peers</code> 可以看到<code> planet</code> 角色</li></ol><h2 id="安卓客户端配置">安卓客户端配置</h2><p><strong>ZerotierFix</strong> 软件下载链接：<a href="https://drive.lthero.cn/s/u26yqa">https://drive.lthero.cn/s/u26yqa</a></p><p>一共两个步骤，先点击右上角，找到“设置”</p><img src="/Users/lthero/Desktop/PixPin_2025-03-11_09-03-18.png" alt="一共两大步骤" style="zoom:50%;" /><p>点击“设置planet文件”并从URL导入文件，随后点击启用</p><img src="/Users/lthero/Desktop/PixPin_2025-03-11_09-01-23.png" alt="替换planet文件" style="zoom:50%;" /><p>返回主界面，选择右下角，输入网络ID并添加网络；</p><img src="/Users/lthero/Desktop/PixPin_2025-03-11_09-02-08.png" alt="添加网络" style="zoom:50%;" /><h2 id="macos-客户端配置">MacOS 客户端配置</h2><ol><li>进入 <code>/Library/Application\ Support/ZeroTier/One/</code> 目录，并替换目录下的 <code>planet</code> 文件</li><li>重启 ZeroTier-One：<code>cat /Library/Application\ Support/ZeroTier/One/zerotier-one.pid | sudo xargs kill</code></li><li>加入网络 <code>zerotier-cli join</code> 网络 <code>id</code></li><li>管理后台同意加入请求</li><li><code>zerotier-cli peers</code> 可以看到<code> planet</code> 角色</li></ol><h2 id="openwrt-客户端配置">OpenWRT 客户端配置</h2><ol><li>安装zerotier客户端</li><li>进入目录 <code>/etc/config/zero/planet</code></li><li>替换目录下的 <code>planet</code> 文件</li><li>在openwrt网页后台先关闭zerotier服务，在开启zerotier服务</li><li>在openwrt网页后台加入网络</li><li>管理后台同意加入请求</li><li>执行 <code>ln -s /etc/config/zero /var/lib/zerotier-one </code></li><li><code>zerotier-cli peers</code> 可以看到<code> planet</code> 角色</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总体分为两大步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一步、下载并导入 &lt;code&gt;planet&lt;/code&gt; 文件：&lt;a href=&quot;http://114.66.63.134:3223/planet?key=63122304d122157b&quot;&gt;点击下载pla</summary>
      
    
    
    
    <category term="zerotier" scheme="https://blog.lthero.cn/categories/zerotier/"/>
    
    
    <category term="zerotier" scheme="https://blog.lthero.cn/tags/zerotier/"/>
    
  </entry>
  
  <entry>
    <title>【汇总】代理工具</title>
    <link href="https://blog.lthero.cn/2025/02/10/ProxyTools/"/>
    <id>https://blog.lthero.cn/2025/02/10/ProxyTools/</id>
    <published>2025-02-10T11:42:08.000Z</published>
    <updated>2025-02-11T06:34:58.378Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>名称</th><th>平台</th><th>备注</th><th>特点</th></tr></thead><tbody><tr><td><a href="https://github.com/2dust/v2rayN">V2rayN</a></td><td><code>Win/Mac/Linux</code></td><td>不适合新人！功能强！</td><td>支持测速、支持最新协议（Xhttp）</td></tr><tr><td><a href="https://github.com/clash-verge-rev/clash-verge-rev/releases">Clash-verge-rev</a></td><td><code>Win/Mac/Linux</code></td><td>简单好用！适合新手！<strong>PC端强烈推荐</strong></td><td>支持测速、多协议</td></tr><tr><td><a href="https://github.com/2dust/v2rayNG">V2rayNG</a></td><td><code>Android</code></td><td>不适合新人！功能强！</td><td>支持测速、支持最新协议（Xhttp）</td></tr><tr><td><a href="https://github.com/MatsuriDayo/NekoBoxForAndroid">Nekobox</a></td><td><code>Android</code></td><td>简单好用！适合新手！<strong>安卓强烈推荐</strong></td><td>支持测速、多协议</td></tr><tr><td><a href="https://sing-box.sagernet.org/">Sing-box</a></td><td>全平台</td><td>不适合新人！功能强！</td><td>支持测速、支持最新协议（Xhttp）</td></tr><tr><td><a href="https://apps.apple.com/ae/app/shadowrocket/id932747118">Shadowrocket</a></td><td><code>IOS/Mac/Apple TV</code></td><td>最常见，更新最多！<strong>苹果手机推荐</strong></td><td>支持多协议</td></tr><tr><td><a href="https://nssurge.com/">Surge</a></td><td><code>IOS/Mac/Apple TV</code></td><td>苹果系通用，付费版可授权5个设备</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;平台&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/2dust/v2ray</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EnglishPod_S02</title>
    <link href="https://blog.lthero.cn/2025/02/09/EnglishPod-S02/"/>
    <id>https://blog.lthero.cn/2025/02/09/EnglishPod-S02/</id>
    <published>2025-02-09T04:38:44.000Z</published>
    <updated>2025-02-11T06:59:17.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="englishpodseason02">EnglishPodSeason02</h1><h2 id="105-职场夸奖">105 职场夸奖</h2><h3 id="wiz">wiz</h3><blockquote><p>someone who is <strong>really good at</strong> something.</p></blockquote><h3 id="slides">slides</h3><blockquote><p>ppt slides, one page in that presentation.</p></blockquote><h3 id="to-be-completely-blown-away">to be completely blown away</h3><blockquote><p>to be surprised/amazed but in a very positive way.</p></blockquote><p>Carl <strong>blown me away</strong> with his knowledge of science.</p><h3 id="wow">Wow</h3><blockquote><p>to wow someone / impress someone.</p></blockquote><h3 id="it-s-nothing">It’s nothing</h3><blockquote><p>it’s not a big deal. / it isn’t hard.</p><p>这没什么</p></blockquote><p>Thanks for lending me your car this week i really appreciated it.</p><ul><li>It’s okay really it was nothing</li></ul><p>I can’t believe you organize the surprise birthday party thank you so much</p><ul><li>don’t worry about it, it was nothing.</li></ul><h3 id="give-sb-a-hand">give sb. a hand</h3><blockquote><p>to help/assist someone</p></blockquote><h3 id="quite">quite</h3><blockquote><p>very good + n.</p></blockquote><p>quite the baskball player/dancer/</p><p>Nancy is <strong>quite gifted at math</strong> she can solve any math problem you give her</p><h3 id="take-on-board">take on board</h3><blockquote><p>to accept and <strong>use</strong> it.</p></blockquote><p>take on board my ideads/suggestions</p><h3 id="think-it-through-sth">think (it) through sth.</h3><blockquote><p>take it to consideration all the aspections.</p><p>think carefully about all of the small details or something.</p><p>深思熟虑</p></blockquote><p>Have you <strong>thought through</strong> my suggestions.</p><p>You guys are very young i think you have to <strong>think throught</strong> before you get married.</p><h3 id="原文">原文</h3><p>Elementary ‐ The Office ‐ Job Well Done (C0105)</p><p>A: And so, that concludes my outline for our marketing strategy next year. Thank you very much for your time.</p><p>B: Hey, that was <strong>quite</strong> the Presentation! Honestly, I <strong>was</strong> completely <strong>blown away</strong> by your strategy outline. I’ve gotta say, Alex, you really <strong>wowed</strong> me today.</p><p>A: Aw, come on; it was nothing. Im just doing my job.</p><p>B: No, I think you deserve some recognition here; I mean, if I look back on your previous Presentations, this is a huge improvement.</p><p>A: Well, Kristin did <strong>give me a hand</strong> with the <strong>slides</strong>. She’s a real <strong>wiz</strong> on PowerPoint.</p><p>B: And I saw that you <strong>took on board</strong> my feedback about pricing strategies. I really appreciate you taking the time to <strong>think through</strong> my suggestions.</p><p>A: Yeah, well, that was some good advice. You made some really good points.</p><p>B: Well, I just wanted to say well done. Really you did a great job.</p><h2 id="106-话费套餐">106 话费套餐</h2><h3 id="prepaid-plan-pay-as-you-go">prepaid plan/pay as you go.</h3><blockquote><p>you pay before you use the minutes</p></blockquote><h3 id="monthly-rate-plan">monthly rate plan</h3><blockquote><p>you have to pay each month, you get a bill at the end of the month.</p></blockquote><h3 id="activate">activate</h3><blockquote><p>make sth. work, only do it once.</p></blockquote><p>activate your computer software/credit card</p><h3 id="handset">handset</h3><blockquote><p>the device/phone you can call it a handset.</p></blockquote><h3 id="rollover-option">rollover option</h3><blockquote><p>the minutes you don’t use , you can still use it the following month.</p><p>可转结到下个月的流量|通话时间……</p></blockquote><h3 id="to-rollover">to rollover</h3><blockquote><p>move from one place to another.</p></blockquote><h3 id="fee">fee</h3><blockquote><p>the amount you must pay for a <strong>service</strong></p></blockquote><p>you <strong>can’t</strong> say:“what’s the fee for the bottle of water.”</p><p>you <strong>can</strong> say: “what’s the <strong>fee for filling</strong> the bottle of water.”</p><h3 id="to-be-compatible-with">to be compatible with</h3><blockquote><p><strong>to work well with</strong> something else.</p></blockquote><p>Our applicaiton is compatible with most smartphones.</p><p>我们的软件与大多智能手机兼容</p><p>My roomate and I are just not compatible.</p><p>Your computer is not compatible with our software.</p><h3 id="what-s-the-catch">what’s the catch?</h3><blockquote><p><strong>catch</strong> is something <strong>hidden</strong> and <strong>negative</strong> makes the deal seems not great.</p><p>catch 隐性条款、往往是限制条件(condition.)</p></blockquote><p>If you get a car for free but the <strong>catch</strong> is you only drive it at night.</p><h3 id="you-are-in-luck">you are in luck</h3><blockquote><p>sth. luckcy is happen.</p></blockquote><p>you are in luck, i have the very last one.</p><h3 id="throw-in">throw in</h3><blockquote><p>include sth. for free.</p><p>附赠</p></blockquote><p>if you buy the house I will throw in the dog for free.</p><h3 id="原文">原文</h3><p>Elementary ‐ Daily Life ‐ Mobile Phone Plan (C0106)</p><p>A: Hi there, can I help you?</p><p>B: Yeah, I’ve just moved here, and I’d like to <strong>activate</strong> my cell phone, and I’m not sure if I should go with a <strong>prepaid plan</strong>, or a <strong>monthly rate plan</strong>.<br>A: I see. Well, can I have a look at your phone?Unfortunately, this phone can’t be used in the US; it’s not <strong>compatible with</strong> our 3G network.<br>B: What? Really? I don’t really want to have to buy a new phone.<br>A: Well, <strong>you’re in luck!</strong> You see, if you sign up for our three-year plan, we’ll <strong>throw in</strong> a <strong>handset</strong> for free.<br>B: Really? What’s the <strong>catch</strong>?<br>A: There’s no <strong>catch</strong>! You just choose a plan, sign a three-year contract and, that’s it! Actually, we’re running a special promotion right now, and we’re giving away a Blackberry Curve with our special Mega Value forty dollar plan.<br>B: So what does this plan include?<br>A: Well, you get nine hundred anytime minutes, and you can also enjoy free mobile to mobile calling to other Tel-Mobile clients, one thousand text messages per month, and unlimited evening and weekend minutes. Oh, and we also offer a <strong>rollover</strong> option.<br>B: Wow, all this for forty dollars per month?<br>A: That’s right, plus the activation <strong>fee</strong>, the emergancy services fee, the monthly service fee, oh, and any charges for extra minutes, and…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;englishpodseason02&quot;&gt;EnglishPodSeason02&lt;/h1&gt;
&lt;h2 id=&quot;105-职场夸奖&quot;&gt;105 职场夸奖&lt;/h2&gt;
&lt;h3 id=&quot;wiz&quot;&gt;wiz&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;someone who is &lt;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Diffusion_From_Scratch</title>
    <link href="https://blog.lthero.cn/2025/01/22/Diffusion-From-Scratch/"/>
    <id>https://blog.lthero.cn/2025/01/22/Diffusion-From-Scratch/</id>
    <published>2025-01-22T14:24:54.000Z</published>
    <updated>2025-01-22T14:25:34.817Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><h1 id="diffusion从scratch开始">Diffusion从Scratch开始</h1><p>参考：<a href="https://ucladeepvision.github.io/CS188-Projects-2023Winter/2022/03/27/team27-ddim-inversion.html">https://ucladeepvision.github.io/CS188-Projects-2023Winter/2022/03/27/team27-ddim-inversion.html</a></p><p><a href="https://github.com/Animadversio/DiffusionFromScratch">https://github.com/Animadversio/DiffusionFromScratch</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1&lt;/p&gt;
&lt;h1 id=&quot;diffusion从scratch开始&quot;&gt;Diffusion从Scratch开始&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://ucladeepvision.github.io/CS188-Projects-2023Winter/202</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LLMs_From_Scratch</title>
    <link href="https://blog.lthero.cn/2025/01/22/LLMs-From-Scratch/"/>
    <id>https://blog.lthero.cn/2025/01/22/LLMs-From-Scratch/</id>
    <published>2025-01-22T14:23:00.000Z</published>
    <updated>2025-01-22T14:24:13.661Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><h1 id="llms从scratch开始">LLMs从Scratch开始</h1><p>参考：<a href="https://www.bilibili.com/video/BV1qWwke5E3K/">https://www.bilibili.com/video/BV1qWwke5E3K/</a></p><p><img src="C:/Users/12904/AppData/Roaming/Typora/typora-user-images/image-20250122222320760.png" alt="Transformer架构"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1&lt;/p&gt;
&lt;h1 id=&quot;llms从scratch开始&quot;&gt;LLMs从Scratch开始&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.bilibili.com/video/BV1qWwke5E3K/&quot;&gt;https://www.bilibili.com/v</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Autoencoder</title>
    <link href="https://blog.lthero.cn/2025/01/17/Autoencoder/"/>
    <id>https://blog.lthero.cn/2025/01/17/Autoencoder/</id>
    <published>2025-01-17T14:20:31.000Z</published>
    <updated>2025-01-23T13:11:30.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="autoencoder">Autoencoder</h1><blockquote><p>参考：<a href="https://github.com/nathanhubens/Autoencoders">https://github.com/nathanhubens/Autoencoders</a></p></blockquote><p>自动编码器（Autoencoders, AE）是一种神经网络，其目标是将输入复制到输出。它们通过将输入压缩到一个潜在空间表示中，然后从该表示中重建输出。这样的网络由两个部分组成：</p><p>编码器（Encoder）：网络的这一部分负责将输入压缩到潜在空间表示中。可以用编码函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mi>𝑓</mi><mo stretchy="false">(</mo><mi>𝑥</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ℎ=𝑓(𝑥)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 来表示。</p><p>解码器（Decoder）：这一部分旨在从潜在空间表示中重建输入。可以用解码函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r=g(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> 来表示。</p><p>自动编码器的架构：整个自动编码器可以描述为函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑔</mi><mo stretchy="false">(</mo><mi>𝑓</mi><mo stretchy="false">(</mo><mi>𝑥</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>𝑟</mi></mrow><annotation encoding="application/x-tex">𝑔(𝑓(𝑥))=𝑟</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，其中希望 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑟</mi></mrow><annotation encoding="application/x-tex">𝑟</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 尽可能接近原始输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑥</mi></mrow><annotation encoding="application/x-tex">𝑥</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。</p><h1 id="ae与vae概念">AE与VAE概念</h1><p>我现在要详细讲解一下变分自编码器（VAE）和传统的自编码器（AE）之间的区别。我对这两个模型有一些基本了解，但具体细节可能还不够深入。</p><p>首先，自编码器（AE）的基本概念是怎样的？它是一个无监督学习模型，用于进行降维和数据压缩。它的结构包括一个编码器（encoder）和解码器（decoder）。编码器将输入数据映射到潜在空间的一个低维向量，称为latent vector或潜在代码。然后，解码器再把这个潜在代码还原回原来的输入数据。这种结构在无监督学习中很常用，比如用于图像压缩或者生成类似的数据。</p><h2 id="传统自动编码器-ae">传统自动编码器（AE）</h2><ul><li>传统<strong>AE学习的是一个确定性的映射</strong>，将输入样本映射到潜在空间中的一个<strong>固定向量</strong></li><li>这个向量是通过编码器网络直接计算出来的，<strong>没有考虑样本的概率分布</strong></li><li>由于AE没有显式地对潜在空间进行正则化或概率建模，<strong>潜在空间的结构可能是非连续的或不规则的</strong>。</li></ul><p>重建能力：</p><p>由于AE学习的是一个确定的映射，它<strong>能够很好地重建输入样本</strong>。</p><p>但是，由于没有学习到潜在空间的概率分布，AE<strong>缺乏生成新样本的能力</strong>。</p><h2 id="变分自动编码器-vae">变分自动编码器（VAE）</h2><ul><li>VAE学习的是<strong>输入样本在潜在空间中的概率分布</strong>，VAE通过KL散度对潜在空间进行正则化，使其接近标准正态分布（人为设定的高斯分布，当然也是可以是其它“已知”分布）</li><li>这意味着潜在空间是<strong>连续的和结构化的</strong>，任何从中采样的向量都更有可能对应于合理的输入数据。</li><li>编码器输出的是这个分布的参数：均值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{mean}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和方差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>v</mi><mi>a</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{log var}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</li></ul><p>生成能力：</p><p>通过学习潜在空间的分布，VAE不仅能够重建输入样本，还<strong>能够从潜在空间中采样生成新样本</strong>。</p><p>这种生成能力是通过重参数化技巧实现的，使得VAE可以在训练过程中进行反向传播。</p><h1 id="ae与vae区别">AE与VAE区别</h1><p>那么，传统的自编码器（AE）和变分自编码器（VAE）有什么不同呢？VAE引入了一些统计学的概念，特别是贝叶斯推断。这可能涉及到概率模型，而传统AE更像是一个确定性的模型。</p><p>首先，<strong>目标函数</strong>方面</p><ul><li><strong>AE的目标是最小化重建误差</strong>，也就是说，输入经过编码和解码后的输出与原输入之间的差异尽可能小。通常使用的是均方误差（MSE）或者交叉熵作为损失函数。</li><li><strong>VAE的目标</strong>则不仅仅是重建数据，还引入了一个 latent space 的正则化项，目的是<strong>让潜在向量服从某种先验分布</strong>，通常是标准正态分布。这意味着VAE的损失函数分为两部分：<strong>重建损失和KL散度项</strong>。</li><li><img src="C:/Users/12904/AppData/Roaming/Typora/typora-user-images/image-20250122102207715.png" alt="VAE损失函数的重建损失和KL散度项"></li></ul><p>接下来是模型结构的不同点。</p><p>编码器方面：AE的编码器输出的是一个<strong>确定性的latent vector</strong>，而VAE的编码器输出的是这个向量的均值和方差，这两个参数用于描述潜在变量的正态分布。</p><p>解码器方面：AE直接从latent vector映射回数据，而VAE可能同样如此，但潜在空间是通过<strong>重参数化技巧</strong>（比如将标准正态分布的噪声加到均值上）来实现的。</p><p>潜在空间的性质：在AE中，latent space是一个<strong>确定性的低维向量</strong>，它直接捕捉输入数据的特征。而在VAE中，latent space中的每个点都是一个概率分布，这使得模型具有生成能力，因为它可以采样新的潜在向量并将其解码为新数据。</p><p>生成能力方面：AE通常难以直接用于生成数据，因为它们没有明确的概率建模。而VAE由于其潜在空间是概率性的，并且可以通过对潜在变量进行采样来生成新样本，因此在图像生成等任务中表现更好。</p><p>鲁棒性方面：AE可能对噪声较为敏感，特别是在处理有噪声的数据时，重建可能会受到影响。而VAE通过引入正则化和概率建模，通常在处理带噪数据时表现更稳定，并且对模型的参数有一定的鲁棒性。</p><p>应用方面：AE常用于降维、特征提取和图像修复等任务，而<strong>VAE更多地应用于生成模型</strong>，比如图像生成、语音合成等领域。</p><p>总结一下，VAE通过引入概率建模和潜在空间的正则化，使得它在生成任务上表现更好，并且具有更好的鲁棒性和灵活性。而传统的AE更侧重于数据压缩和降维，功能相对单一。</p><h2 id="从两者encoder察觉出两者区别">从两者Encoder察觉出两者区别</h2><blockquote><p>在传统自动编码器（AE）和变分自动编码器（VAE）中，编码器(Encoder)的输出层设计有所不同，主要是因为它们的目标和结构不同。</p></blockquote><h3 id="传统自动编码器-ae">传统自动编码器（AE）</h3><p>在传统AE中，编码器的输出通常是一个确定性的潜在表示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_layer = Input(shape=(input_dim,))</span><br><span class="line">hidden_layer = Dense(hidden_dim, activation=<span class="string">&#x27;relu&#x27;</span>)(input_layer)</span><br><span class="line">output_layer = Dense(input_dim, activation=<span class="string">&#x27;sigmoid&#x27;</span>)(hidden_layer)</span><br><span class="line">autoencoder = Model(inputs=input_layer, outputs=output_layer)</span><br><span class="line"><span class="comment"># 看下面outputs=hidden_layer</span></span><br><span class="line">encoder = Model(inputs=input_layer, outputs=hidden_layer)</span><br></pre></td></tr></table></figure><p>例如，<code>hidden_layer=Dense(intermediate_dim, activation='relu')(self.input_layer) </code>表示将输入数据通过一个全连接层映射到一个中间维度的潜在空间。</p><p>这个潜在表示是一个<strong>固定的向量</strong>，直接用于解码器进行重建。</p><h3 id="变分自动编码器-vae">变分自动编码器（VAE）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_layer = Input(shape=(input_dim,))</span><br><span class="line">h = Dense(intermediate_dim, activation=<span class="string">&#x27;relu&#x27;</span>)(input_layer)</span><br><span class="line">z_mean = Dense(latent_dim)(h)</span><br><span class="line">z_log_var = Dense(latent_dim)(h)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 看下面outputs=z_mean</span></span><br><span class="line">encoder = Model(inputs=input_layer, outputs=z_mean)</span><br></pre></td></tr></table></figure><p>在VAE中，<strong>编码器的输出是潜在空间的概率分布参数</strong>，而不是一个确定性的向量。</p><p><code>z_mean = Dense(latent_dim)(self.h)</code> 和 <code>z_log_var = Dense(latent_dim)(self.h)</code> 分别表示潜在空间的均值和对数方差。</p><p>通过学习这两个参数，<strong>VAE可以在潜在空间中定义一个正态分布</strong>。</p><p>采样过程：</p><p>VAE使用重参数化技巧从这个分布中采样潜在变量 z，以便在训练过程中进行反向传播。</p><p>这使得VAE能够生成新样本，并对潜在空间进行正则化。</p><h2 id="总结">总结</h2><p>传统AE：专注于重建输入样本，缺乏生成新样本的能力。</p><p>VAE：通过学习潜在空间的概率分布，既能重建输入样本，又能生成新样本。</p><h2 id="问题">问题</h2><blockquote><p>给传统自动编码器（AE）一个随机的潜在空间向量，解码器会尝试将其映射回输入空间，它确实可以通过解码器生成一些输出数据</p><p>由于潜在空间没有经过正则化，随机向量可能不对应于训练数据的合理表示，因此生成的输出可能是模糊的或不真实的</p><p>效果通常不如变分自动编码器（VAE）好</p></blockquote><h1 id="变分自编码器">变分自编码器</h1><img src="C:/Users/12904/AppData/Roaming/Typora/typora-user-images/image-20250117220552557.png" alt="image-20250117220552557" style="zoom:50%;" /><p>在变分自动编码器（Variational Autoencoder, VAE）中，“变分”（variational）主要体现在以下几个方面：</p><h2 id="潜在空间的概率建模">潜在空间的概率建模</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, intermediate_dim, latent_dim, epsilon_std=<span class="number">1.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(input_dim)</span><br><span class="line">        self.input_layer = Input(shape=(input_dim,))</span><br><span class="line">        self.h = Dense(intermediate_dim, activation=<span class="string">&#x27;relu&#x27;</span>)(self.input_layer)</span><br><span class="line">        <span class="comment"># Variational 体现在通过学习潜空间均值与对数方差来建模潜在分布，而不是直接学习潜在变量</span></span><br><span class="line">        <span class="comment"># 可以对 z_mean 和 z_log_var 进行优化，从而间接优化 z 的分布</span></span><br><span class="line">        self.z_mean = Dense(latent_dim)(self.h)</span><br><span class="line">        self.z_log_var = Dense(latent_dim)(self.h)</span><br></pre></td></tr></table></figure><p>这里的<code>input_layer</code>和<code>h</code>与传统AE一样，但VAE通过学习潜在空间的均值 (z_mean) 和对数方差 (z_log_var) 来建模数据的潜在分布。这与传统的AE不同，后者直接学习一个确定性的潜在表示。</p><h2 id="重参数化技巧">重参数化技巧</h2><p>采样过程：VAE使用重参数化技巧来从潜在空间中采样。通过引入噪声 epsilon，VAE能够在训练过程中进行反向传播。这一过程在 sampling 函数中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sampling是一个函数，使用 z_mean 和 z_log_var 生成潜在变量 z</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sampling</span>(<span class="params">self, args</span>):</span><br><span class="line">      z_mean, z_log_var = args</span><br><span class="line">      epsilon = K.random_normal(shape=(K.shape(z_mean)[<span class="number">0</span>], latent_dim), mean=<span class="number">0.0</span>, stddev=epsilon_std)</span><br><span class="line">      <span class="keyword">return</span> z_mean + K.exp(z_log_var / <span class="number">2</span>) * epsilon</span><br></pre></td></tr></table></figure><p>重参数化技巧：它通过将不可导的随机采样过程转化为一个可导的过程，使得我们可以对潜在变量 z 的参数进行优化。以下是更详细的解释：</p><h3 id="原理">原理</h3><p>不可导的采样过程：</p><p>在VAE中，潜在变量 z 是从一个由均值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{mean}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和方差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>v</mi><mi>a</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{log var}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 参数化的正态分布中采样的。</p><p>直接从这个分布中采样的过程是不可导的，因为随机采样本身不具备确定性。</p><p>解决方法（重参数化技巧）</p><p>通过引入一个<strong>独立于模型参数的随机噪声 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>p</mi><mi>s</mi><mi>i</mi><mi>l</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span></strong>，我们可以将采样过程表示为一个确定性函数：</p><p class='katex-block katex-error' title='Error: Font metrics not found for font: .'>z=z_{mean}+𝜖×exp⁡(z_{log var}/2)</p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>p</mi><mi>s</mi><mi>i</mi><mi>l</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span> 是从标准正态分布 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(0, 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 中采样的。</p><p>可导性：</p><p>由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>p</mi><mi>s</mi><mi>i</mi><mi>l</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span> 是独立的随机噪声，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>m</mi></msub><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">z_mean</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>l</mi></msub><mi>o</mi><msub><mi>g</mi><mi>v</mi></msub><mi>a</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">z_log_var</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 的梯度可以通过反向传播计算出来。</p><p>这使得我们可以对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>m</mi></msub><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">z_mean</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>l</mi></msub><mi>o</mi><msub><mi>g</mi><mi>v</mi></msub><mi>a</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">z_log_var</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 进行优化，从而间接优化 z 的分布。</p><h3 id="优化过程">优化过程</h3><p>目标：通过优化 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>m</mi></msub><mi>e</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">z_mean</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>l</mi></msub><mi>o</mi><msub><mi>g</mi><mi>v</mi></msub><mi>a</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">z_log_var</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，使得潜在空间的分布能够更好地表示输入数据。</p><p>损失函数：VAE的损失函数包括重建损失和KL散度，后者用于正则化潜在空间的分布。</p><h3 id="总结">总结</h3><p>重参数化技巧将不可导的采样过程转化为可导的过程，使得我们可以通过反向传播来优化潜在空间的参数。这是VAE能够有效训练的关键技术之一。通过这种方式，我们可以学习到一个更好的潜在表示，并生成新数据样本。</p><h2 id="vae的编码器和解码器结构">VAE的编码器和解码器结构</h2><p>并将它们组合成完整的自动编码器模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BuildModel</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># z是潜在变量，从潜在空间中采样</span></span><br><span class="line">        self.z = Lambda(self.sampling, output_shape=(self.latent_dim,))([self.z_mean, self.z_log_var])</span><br><span class="line">        <span class="comment"># 解码器的中间层，将潜在空间的表示 z 转换为一个中间表示</span></span><br><span class="line">        self.decoder_h = Dense(self.intermediate_dim, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        <span class="comment"># 解码器的输出层，将中间表示解码为最终的输出数据。</span></span><br><span class="line">        self.decoder_mean = Dense(self.input_dim, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.h_decoded = self.decoder_h(self.z)</span></span><br><span class="line">        <span class="comment"># 将潜在空间的表示 z 通过解码器的中间层和输出层，得到最终的解码结果</span></span><br><span class="line">        self.x_decoded_mean = self.decoder_mean(self.decoder_h(self.z))</span><br><span class="line">        <span class="comment"># VAE的目标是通过编码器和解码器网络，将输入数据 x 经过潜在空间的表示后，重建为 x_decoded_mean</span></span><br><span class="line">        self.autoencoder = Model(inputs=self.input_layer, outputs=self.x_decoded_mean)</span><br><span class="line">        <span class="comment"># 构建编码器模型，输入为原始数据，输出为潜在空间的表示，这里使用z_mean，因为z_mean是潜在空间的均值</span></span><br><span class="line">        self.encoder = Model(inputs=self.input_layer, outputs=self.z_mean)</span><br></pre></td></tr></table></figure><h2 id="kl散度正则化">KL散度正则化</h2><p>损失函数：VAE的损失函数包括重建损失（通常是交叉熵）和KL散度。KL散度用于衡量潜在空间的分布与标准正态分布之间的差异，从而对潜在空间进行正则化。这在 VAELossLayer 中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VAELossLayer</span>(<span class="title class_ inherited__">Layer</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">      <span class="built_in">super</span>(VAELossLayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">      x, x_decoded_mean, z_mean, z_log_var = inputs</span><br><span class="line">      xent_loss = input_dim * binary_crossentropy(x, x_decoded_mean)</span><br><span class="line">      kl_loss = -<span class="number">0.5</span> * K.<span class="built_in">sum</span>(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> K.mean(xent_loss + kl_loss)</span><br></pre></td></tr></table></figure><h2 id="训练">训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Train</span>(<span class="params">self,x_train,x_test</span>):</span><br><span class="line">    <span class="comment">#VAELossLayer：这是一个自定义的Keras层，用于计算VAE的损失，包括重建损失和KL散度</span></span><br><span class="line">    loss_layer = VAELossLayer()([self.input_layer, self.x_decoded_mean, self.z_mean, self.z_log_var])</span><br><span class="line">    self.autoencoder.add_loss(loss_layer)</span><br><span class="line">    <span class="comment">#optimizer=&#x27;adam&#x27;：使用Adam优化器进行训练，因其在处理大规模数据和高维参数空间时表现良好。</span></span><br><span class="line">    self.autoencoder.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># VAE的训练目标是重建输入数据，因此输入和输出都是相同的数据集</span></span><br><span class="line">    self.autoencoder.fit(x_train, x_train, epochs=epochs, batch_size=batch_size, shuffle=<span class="literal">True</span>, validation_data=(x_test, x_test))</span><br></pre></td></tr></table></figure><p>VAE的Model里设置：通过编码器和解码器网络，将输入数据x重建为输出数据x_decoded_mean。</p><p>训练目标：最小化输入数据x_train和重建数据x_decoded_mean之间的差异，同时正则化潜在空间的分布。</p><blockquote><p>让vae输出的x_decoded_mean尽量像输入数据x_train</p></blockquote><h1 id="vae完整代码">VAE完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariationalAutoencoder</span>(<span class="title class_ inherited__">BaseAutoencoder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, intermediate_dim, latent_dim, epsilon_std=<span class="number">1.0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(input_dim)</span><br><span class="line">        self.input_layer = Input(shape=(input_dim,))</span><br><span class="line">        self.h = Dense(intermediate_dim, activation=<span class="string">&#x27;relu&#x27;</span>)(self.input_layer)</span><br><span class="line">        <span class="comment"># Variational 体现在通过学习潜空间均值与对数方差来建模潜在分布，而不是直接学习潜在变量</span></span><br><span class="line">        self.z_mean = Dense(latent_dim)(self.h)</span><br><span class="line">        self.z_log_var = Dense(latent_dim)(self.h)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sampling</span>(<span class="params">self,args</span>):</span><br><span class="line">        z_mean, z_log_var = args</span><br><span class="line">        <span class="comment"># 引入噪声epsilon，使用重参数化技巧从潜空间采样</span></span><br><span class="line">        epsilon = K.random_normal(shape=(K.shape(z_mean)[<span class="number">0</span>], latent_dim), mean=<span class="number">0.0</span>, stddev=epsilon_std)</span><br><span class="line">        <span class="keyword">return</span> z_mean + K.exp(z_log_var / <span class="number">2</span>) * epsilon</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BuildModel</span>(<span class="params">self</span>):</span><br><span class="line">        self.z = Lambda(self.sampling, output_shape=(self.latent_dim,))([self.z_mean, self.z_log_var])</span><br><span class="line">        self.decoder_h = Dense(self.intermediate_dim, activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.decoder_mean = Dense(self.input_dim, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.h_decoded = self.decoder_h(self.z)</span><br><span class="line">        self.x_decoded_mean = self.decoder_mean(self.h_decoded)</span><br><span class="line">        self.encoder = Model(inputs=self.input_layer, outputs=self.z_mean)</span><br><span class="line">        self.autoencoder = Model(inputs=self.input_layer, outputs=self.x_decoded_mean)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">VAELossLayer</span>(<span class="title class_ inherited__">Layer</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">            <span class="built_in">super</span>(VAELossLayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">            x, x_decoded_mean, z_mean, z_log_var = inputs</span><br><span class="line">            xent_loss = input_dim * binary_crossentropy(x, x_decoded_mean)</span><br><span class="line">            <span class="comment"># 计算KL散度，衡量潜在分布与标准正态分布的差异</span></span><br><span class="line">            kl_loss = -<span class="number">0.5</span> * K.<span class="built_in">sum</span>(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> K.mean(xent_loss + kl_loss)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Train</span>(<span class="params">self,x_train,x_test</span>):</span><br><span class="line">        loss_layer = VAELossLayer()([self.input_layer, self.x_decoded_mean, self.z_mean, self.z_log_var])</span><br><span class="line">        self.autoencoder.add_loss(loss_layer)</span><br><span class="line">        self.autoencoder.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="literal">None</span>)</span><br><span class="line">        self.autoencoder.fit(x_train, x_train, epochs=epochs, batch_size=batch_size, shuffle=<span class="literal">True</span>, validation_data=(x_test, x_test))</span><br><span class="line">        self.history=self.autoencoder.fit(x_train,x_train,epochs=EPOCHS,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>,validation_data=(x_test,x_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://towardsdatascience.com/deep-inside-autoencoders-7e41f319999f">https://towardsdatascience.com/deep-inside-autoencoders-7e41f319999f</a></p><p><a href="https://blog.csdn.net/quiet_girl/article/details/84401029">https://blog.csdn.net/quiet_girl/article/details/84401029</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;autoencoder&quot;&gt;Autoencoder&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://github.com/nathanhubens/Autoencoders&quot;&gt;https://github.com/nathanhub</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【RackNerd &amp; DigitalOcean】IP被封|IP被GFW封</title>
    <link href="https://blog.lthero.cn/2025/01/10/IP-is-blocked-by-GFW/"/>
    <id>https://blog.lthero.cn/2025/01/10/IP-is-blocked-by-GFW/</id>
    <published>2025-01-10T09:50:15.000Z</published>
    <updated>2025-01-22T02:54:26.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="racknerd-digitalocean-ip被gfw封了">RackNerd &amp; DigitalOcean IP被GFW封了</h1><blockquote><p>事情起因：最近两台美国服务器被GFW封了（全端口被封，其ip基本就废了）</p></blockquote><h2 id="检测过程">检测过程</h2><p>使用端口检测工具<a href="https://ping.pe/">ping.pe</a> 进行检测，结果如下图1所示，22端口在国外访问正常，国内无法访问；其它端口也是如此，此ip废了。</p><img src="C:/Users/12904/Downloads/PixPin_2025-01-09_20-04-10.png" alt="PixPin_2025-01-09_20-04-10" style="zoom:50%;" /><p>其它检测工具</p><p>1、国内外ping检测 <a href="https://www.itdog.cn/ping/">itdog.cn</a></p><p>2、国内外单个端口检测 <a href="https://www.toolsdaquan.com/ipcheck/">ipcheck</a></p><p>3、国内外ping/端口检测 <a href="https://ping.pe/">ping.pe</a></p><h2 id="解决方案">解决方案</h2><blockquote><p>两台服务器分别是Racknerd和DigitalOcean的，不同商家的解决方案不同。</p></blockquote><h3 id="digitalocean的解决方法">DigitalOcean的解决方法</h3><p>先来说DigitalOcean的解决方法吧</p><h4 id="方案一-推荐">方案一（推荐）</h4><p>不需要删服务器，直接去添加一个免费的<strong>浮动 IP (Reserved IPs)</strong>（每个小鸡可以添加一个，即服务器同时有 2 个 IP）。添加后你什么都不用干，直接就能通过这个 IP 链接服务器了。浮动 IP 可以随时删除，然后重新添加一个（等于换了个浮动 IP）。</p><p><img src="C:/Users/12904/AppData/Roaming/Typora/typora-user-images/image-20250110180758286.png" alt="image-20250110180758286"></p><h4 id="方案二">方案二</h4><p>将服务器关机，然后添加 snapshot。对那个 snapshot 进行 <strong>add to location</strong> 的操作，就能重新选 location 选好再开机，新的 location 以及新的 IP 了，然后旧的 droplet 可以删了</p><h3 id="racknerd的解决方法">Racknerd的解决方法</h3><h4 id="方案一">方案一</h4><p>Racknerd没法添加额外ip，所以只能更换ip；<strong>每台机器有一次免费更换ip的机会</strong>，发起更换ip的请求后系统会自动处理；</p><p>后续更换ip需要钱了，3刀一次；</p><p>如果更换后的ip还是被封了，<s>那……继续换</s>（不是）</p><h4 id="方案二">方案二</h4><p>如果花钱更换后的ip还是被封了，最好就找客服</p><p>描述自己的问题：大概意思是<strong>原ip被封了，然后花钱更换的新ip也被封了</strong></p><p>最好附录两张<a href="https://ping.pe/">ping.pe</a>的检测结果图（要显示22端口，以及其它端口被封了）</p><p>和客服交涉后，客服应该会手动将你的ip换成其它段的，此时应该就能用了（Racknerd大善人！）</p><p>工单申请内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I am experiencing an issue where the server with IP address <span class="number">142.171</span><span class="number">.225</span><span class="number">.6</span> is completely inaccessible from mainland China. This applies to all ports<span class="punctuation">,</span> not just port <span class="number">22</span> (SSH). I have confirmed the issue by testing from multiple locations in China using different ISPs<span class="punctuation">,</span> such as China Telecom<span class="punctuation">,</span> China Unicom<span class="punctuation">,</span> and China Mobile. All attempts to connect to the server from these networks have failed.</span><br><span class="line"></span><br><span class="line">I have successfully connected to the server from multiple servers<span class="punctuation">,</span> including those in the USA<span class="punctuation">,</span> Canada<span class="punctuation">,</span> Europe<span class="punctuation">,</span> and Asia-Pacific regions<span class="punctuation">,</span> using SSH on port <span class="number">22.</span></span><br><span class="line"></span><br><span class="line">The problem persisted even after I changed the server&#x27;s IP address from <span class="number">142.171</span><span class="number">.50</span><span class="number">.112</span> to <span class="number">142.171</span><span class="number">.225</span><span class="number">.6</span>. Despite the new IP<span class="punctuation">,</span> the server is still inaccessible from China.</span><br><span class="line"></span><br><span class="line">If you require any additional information or logs<span class="punctuation">,</span> please let me know<span class="punctuation">,</span> and I will provide them promptly.</span><br><span class="line"></span><br><span class="line">Thank you for your attention to this matter. I look forward to your response.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;racknerd-digitalocean-ip被gfw封了&quot;&gt;RackNerd &amp;amp; DigitalOcean IP被GFW封了&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;事情起因：最近两台美国服务器被GFW封了（全端口被封，其ip基本就废了）&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Autolady安装与配置</title>
    <link href="https://blog.lthero.cn/2025/01/04/InstallAutolady/"/>
    <id>https://blog.lthero.cn/2025/01/04/InstallAutolady/</id>
    <published>2025-01-04T08:34:55.000Z</published>
    <updated>2025-01-05T02:20:04.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="autolady安装与配置">Autolady安装与配置</h1><blockquote><p>前排提醒：注意身体，仅限技术交流；</p></blockquote><p>在你的系统中，创建个目录 <code>autolady</code>，再进入目录后创建一个文件，创建 <code>docker-compose.yml</code>文件</p><p>使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> autolady</span><br><span class="line"><span class="built_in">cd</span> autolady</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>复制并粘贴以下内容到 <code>docker-compose.yml</code> 文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">auto-lady:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">orekiiiiiiiiiiiii/auto-lady:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">auto-lady</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8043:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/user/appdata/auto-lady:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">bridge:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>在文件所在的目录，使用以下命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>up -d</code> 表示以后台模式启动所有服务。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>如果成功，应该会看到一个名为 <code>auto-lady</code> 的容器正在运行，并且绑定了 <code>8043:80</code> 的端口</p><h1 id="配置autolady">配置Autolady</h1><p>使用<code>ip:8043</code>即可访问网页，默认账号(admin)，但密码需要查看运行日志获取</p><p>使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f auto-lady</span><br></pre></td></tr></table></figure><p>示意图如下</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/QQ_1731994688777.png.webp" alt="默认密码"></p><blockquote><p>如果需要配置nginx反向代理与https，参考后面教程</p></blockquote><h2 id="步骤一-修改密码">步骤一、修改密码</h2><p>修改账号密码，保存后刷新网页，验证能否登录</p><h2 id="步骤二-设置下载器">步骤二、设置下载器</h2><p>首先需要安装下载器，这里有两种选择【qbittorrent、transmission】，具体安装方式在下一节</p><p>假设已经安装好了下载器，需要填写以下信息（以qbit为例）</p><ul><li>qbit地址：方式有二，1、直接填写域名；2、填写<code>ip:端口</code></li><li>qbit用户名、密码</li><li>qbit下载地址：指部署了qbit服务的服务器上，文件想要保存到路径；<ul><li>如果在qbit上设置路径为<code>/root/Downloads/</code>，这里填写<code>/root/Downloads/</code>即可</li></ul></li><li>qbit下载分类：即<strong>子目录名称</strong>，可以是<code>movies</code>或其它</li></ul><p><strong>随后记得保存</strong></p><p><img src="https://cdn.lthero.cn/post_images/course/ML/image-20250104164558500.png" alt="image-20250104164558500"></p><h2 id="步骤三-配置令牌">步骤三、配置令牌</h2><p>autolady需要在<code>馒头</code>、<code>飞天拉面神教</code>、<code>PTT</code>三个pt网站下载资源，所以，至少要有一项pt站访问权限</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/image-20250104165409590.png" alt="站点"></p><p>其中，<strong>飞天拉面神教</strong>的apitoken获取方式如下</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/image-20250104165325398.png" alt="image-20250104165325398"></p><p><strong>飞天拉面神教</strong>的passkey获取方式如下</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/image-20250104165457504.png" alt="image-20250104165457504"></p><p>至此就配置完成了，现在请点击一个视频并订阅，<code>docker logs -f auto-lady</code>并查看实时输出，检测是否找到了种子，是否开始下载了</p><h1 id="下载器安装">下载器安装</h1><p>qBittorrent和transmission安装一个即可，从功能上来说，qBittorrent更全</p><h2 id="推荐-qbittorrent安装与配置">（推荐）qBittorrent安装与配置</h2><h3 id="安装qbittorrent">安装qBittorrent</h3><p>使用Ubuntu的官方仓库安装qBittorrent</p><p>Ubuntu的官方仓库通常包含qBittorrent的稳定版本，只需打开终端并执行以下命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qbittorrent-nox -y</span><br></pre></td></tr></table></figure><h3 id="开机自启qbittorrent">开机自启qBittorrent</h3><p>在<code>/etc/systemd/system/qbittorrent-nox.service</code>添加下面的内容，作为开机自动启动的服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=qBittorrent Command Line Client</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/qbittorrent-nox</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>随后执行下面两条命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox.service</span><br></pre></td></tr></table></figure><p>建议先运行一遍<code>qbittorrent-nox</code>，将端口设置为9090（可以为其它的端口号）【因为它需要你输入一个’y’，哎……新版本的要求】</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qbittorrent-nox --webui-port=9090</span><br></pre></td></tr></table></figure><p>进入网页后，建议将用户名、密码修改完成后，再将进行关掉，使用systemctl方式重启进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果直接运行，因为无法输入&#x27;y&#x27;，从而无法进入网页</span></span><br><span class="line">sudo systemctl start qbittorrent-nox.service</span><br></pre></td></tr></table></figure><p>其它相关命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">sudo systemctl status qbittorrent-nox.service</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">sudo systemctl stop qbittorrent-nox</span><br></pre></td></tr></table></figure><h3 id="修改qbittorrent端口">修改qBittorrent端口</h3><ol><li><p><strong>停止qBittorrent-nox服务</strong>（如果正在运行）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop qbittorrent-nox</span><br></pre></td></tr></table></figure><p>如果你没有将qBittorrent-nox作为服务运行，而是直接在终端中运行，你可以直接关闭它。</p></li><li><p><strong>编辑qBittorrent配置文件</strong>： qBittorrent-nox的配置文件通常位于<code>~/.config/qBittorrent/qBittorrent.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/qBittorrent/qBittorrent.conf</span><br></pre></td></tr></table></figure><p>如果qBittorrent-nox是以不同的用户运行，你可能需要切换到相应用户的家目录，或者根据实际情况调整路径。</p></li><li><p>在配置文件中找到<code>WebUI\Port=8080</code>这一行（如果没有这一行，你需要添加它），将<code>8080</code>更改为你想要的端口号。例如，如果你想将端口改为<code>9090</code>，则修改为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebUI\Port=9090</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p></li><li><p><strong>重新启动qBittorrent-nox</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure></li></ol><h3 id="qbittorrent常用命令">qBittorrent常用命令</h3><p>启动Qbittorrent：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox</span><br></pre></td></tr></table></figure><p>在后台启动Qbittorrent：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox -d</span><br></pre></td></tr></table></figure><p>查看Qbittorrent版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox -v</span><br></pre></td></tr></table></figure><p>启动 Qbittorrent 并指定 Web 面板的端口:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox --webui-port=xxxx</span><br></pre></td></tr></table></figure><p>查看帮助：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox -h</span><br></pre></td></tr></table></figure><h3 id="添加tracker">添加tracker</h3><p>每天都在维护的tracker链接：<a href="https://jsd.cdn.zzko.cn/gh/XIU2/TrackersListCollection/best.txt">https://jsd.cdn.zzko.cn/gh/XIU2/TrackersListCollection/best.txt</a></p><blockquote><p>如果使用了autolady，其实不用手动添加tracker了，如果你的qbit下载器在另一台服务器上，可以手动添加pt站对应的tracker（记得要带id的那种），最好是在一个pt站下载好的文件里把tracker复制下来使用。</p></blockquote><h1 id="一键配置https">一键配置HTTPS</h1><blockquote><p>项目：<a href="https://github.com/lthero-big/QcHTTPS">https://github.com/lthero-big/QcHTTPS</a></p></blockquote><p>一键安装nginx、申请证书、配置https</p><h2 id="功能">功能</h2><p>输入以下三个信息</p><ol><li>域名</li><li>服务端口（docker某个容器运行的端口）</li><li>申请ssl证书的邮箱</li></ol><h2 id="脚本下载与安装">脚本下载与安装</h2><h3 id="脚本下载">脚本下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/lthero-big/QcHTTPS/refs/heads/main/install_https.sh -O install_https.sh </span><br></pre></td></tr></table></figure><p>脚本将保存在本地 <code>install_https.sh</code> ，您可以随时执行</p><h3 id="脚本执行">脚本执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install_https.sh</span><br></pre></td></tr></table></figure><h1 id="手动-使用http访问">【手动】使用HTTP访问</h1><p>要将运行在Docker容器中的服务通过域名访问，并使用Nginx作为反向代理来转发到宿主机的8043端口，你需要完成几个步骤。这包括设置DNS记录、配置Nginx以及确保网络安全。下面是具体步骤：</p><h2 id="步骤-1-设置dns记录">步骤 1: 设置DNS记录</h2><p>确保你的域名 <code>lady.lthero.top</code> 的DNS记录指向托管Nginx的服务器的IP地址。这通常在你的域名注册商处进行设置：</p><ul><li><strong>A记录</strong>：将域名指向IPv4地址。</li><li><strong>AAAA记录</strong>：将域名指向IPv6地址（如果适用）。</li></ul><h2 id="步骤-2-安装并启动nginx">步骤 2: 安装并启动Nginx</h2><p>步骤 1: 更新软件包列表</p><p>打开终端，首先使用<code>apt</code>命令更新你的包列表，以确保你安装的是最新版本的Nginx。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>步骤 2: 安装Nginx</p><p>使用<code>apt</code>安装Nginx。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h2 id="步骤-3-配置nginx">步骤 3: 配置Nginx</h2><p>你需要在Nginx中创建一个新的服务器块（server block），或者在已有的默认配置中修改，以设置反向代理。以下是一个基本的Nginx配置示例，将会把所有到 <code>lady.lthero.top</code> 的请求转发到本地的8043端口：</p><ol><li><p>打开或创建一个新的Nginx配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/lady.lthero.top</span><br></pre></td></tr></table></figure></li><li><p>添加以下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> lady.lthero.top;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8043;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置做了以下几点：</p><ul><li><code>listen 80;</code> 告诉Nginx监听80端口（HTTP标准端口）。</li><li><code>server_name lady.lthero.top;</code> 设置这个块应当响应的域名。</li><li><code>proxy_pass http://localhost:8043;</code> 指定所有传入的请求转发到本地的8043端口。</li><li><code>proxy_set_header</code> 指令将重要的HTTP头信息转发给后端应用。</li></ul></li><li><p>启用配置文件通过创建一个符号链接(一定要做)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/lady.lthero.top /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></li><li><p>检查Nginx配置文件是否有语法错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></li><li><p>如果没有错误，重启Nginx以应用配置(一定要做)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤-4-调整防火墙规则">步骤 4: 调整防火墙规则</h2><p>确保你的服务器的防火墙规则允许HTTP（端口80）和HTTPS（端口443，如果你使用SSL）的流量。如果你正在使用<code>ufw</code>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx Full&#x27;</span></span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure><h2 id="步骤-5-测试配置">步骤 5: 测试配置</h2><p>在浏览器中输入 <code>http://lady.lthero.top</code> 或使用命令行工具如 <code>curl</code> 来测试你的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://lady.lthero.top</span><br></pre></td></tr></table></figure><p>你应该能看到从Docker容器中运行的服务响应的内容。</p><p>这样，你就配置好了Nginx作为反向代理，将域名 <code>lady.lthero.top</code> 的流量转发到宿主机的8043端口上的服务。如果你希望使用HTTPS，你还需要设置SSL证书，可以考虑使用Let’s Encrypt免费证书并配置HTTPS。</p><h1 id="手动-使用https访问">【手动】使用HTTPS访问</h1><p>要让你的域名 <code>lady.lthero.top</code> 使用 HTTPS，你需要获取 SSL/TLS 证书，并配置 Nginx 以使用这些证书来加密网页内容。以下是详细的步骤，包括如何使用 Let’s Encrypt 提供的免费证书自动化这个过程。</p><h2 id="步骤-1-安装-certbot">步骤 1: 安装 Certbot</h2><p>Certbot 是一个自动获取并安装 Let’s Encrypt 证书的客户端。在 Ubuntu 上安装 Certbot 及其 Nginx 插件非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure><h2 id="步骤-2-获取和安装证书">步骤 2: 获取和安装证书</h2><p>使用 Certbot 获取并为你的域名安装证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx -d lady.lthero.top</span><br></pre></td></tr></table></figure><p>此命令会自动为指定的域名 <code>lady.lthero.top</code> 配置 SSL 证书，并更新 Nginx 配置以使用这些证书。Certbot 会询问你一些问题，比如电子邮件地址（用于紧急联系和证书续订提醒），以及是否重定向所有 HTTP 请求到 HTTPS（强烈建议启用）。</p><p>生成的证书位置<code>/etc/letsencrypt/live/</code></p><h2 id="步骤-3-更新-nginx-配置">步骤 3: 更新 Nginx 配置</h2><p>如果你想手动编辑 Nginx 配置文件，可以按以下方式配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/lady.lthero.top</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> lady.lthero.top;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;  <span class="comment"># 强制重定向所有 HTTP 请求到 HTTPS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> lady.lthero.top;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/lady.lthero.top/fullchain.pem;  <span class="comment"># 证书文件路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/lady.lthero.top/privkey.pem;  <span class="comment"># 私钥文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:MozSSL:<span class="number">10m</span>;  <span class="comment"># 缓存 SSL 会话以提升性能</span></span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 现代加密套件配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&#x27;</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他 SSL 优化设置</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许最大请求体大小为 1000MB</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1000m</span>;  </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8043;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置不仅启用了 HTTPS，还包括了一些现代的安全实践，如启用 HTTP/2，配置加密套件和协议等。</p><h2 id="步骤-4-重新加载-nginx">步骤 4: 重新加载 Nginx</h2><p>启用配置文件通过创建一个符号链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/lady.lthero.top /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>更改配置后，需要重新加载 Nginx 以应用新的配置：</p><blockquote><p>检查配置文件是否有语法错误，如果有warn!直接看“遇到的问题”部分，重新加载配置是不一定能work的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件是否有语法错误</span></span><br><span class="line">sudo nginx -t  </span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">sudo systemctl reload nginx  </span><br><span class="line"><span class="comment"># 如果重新加载配置后无效，可以尝试重启nginx</span></span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="步骤-5-验证-https">步骤 5: 验证 HTTPS</h2><p>在浏览器中访问 <code>https://lady.lthero.top</code> 来检查是否配置成功。你应该能够看到一个安全锁标志，表明连接是通过 HTTPS 加密的。</p><h2 id="步骤-6-自动续订证书">步骤 6: 自动续订证书</h2><p>Let’s Encrypt 的证书有效期为90天，因此建议设置自动续订：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot renew</span><br></pre></td></tr></table></figure><p>这个命令会测试证书续订过程。如果这个测试成功，添加定时任务<code>crontab</code>：</p><p><code>crontab -e</code>再填写下面内容，表示每月第一天会自动执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /usr/local/bin/certbot renew --manual --preferred-challenges dns --manual-auth-hook <span class="string">&quot;alidns&quot;</span> --manual-cleanup-hook <span class="string">&quot;alidns clean&quot;</span> --deploy-hook <span class="string">&quot;nginx -s reload&quot;</span></span><br></pre></td></tr></table></figure><p>续签的证书位置<code>/etc/letsencrypt/renewal</code></p><p>通过以上步骤，你的站点 <code>lady.lthero.top</code> 现在应该能够安全地使用 HTTPS 进行通信了。</p><p>如果要换编辑器，运行下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select-editor</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;autolady安装与配置&quot;&gt;Autolady安装与配置&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前排提醒：注意身体，仅限技术交流；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在你的系统中，创建个目录 &lt;code&gt;autolady&lt;/code&gt;，再进入目录后创建</summary>
      
    
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>日常开发中用到的一些代理配置方式</title>
    <link href="https://blog.lthero.cn/2025/01/03/UseProxyInWindows/"/>
    <id>https://blog.lthero.cn/2025/01/03/UseProxyInWindows/</id>
    <published>2025-01-03T08:56:55.000Z</published>
    <updated>2025-01-03T08:58:20.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日常开发中用到的一些代理配置方式">日常开发中用到的一些代理配置方式</h1><blockquote><p>原文：<a href="https://keqingrong.cn/blog/2021-02-19-proxy-and-pac/">https://keqingrong.cn/blog/2021-02-19-proxy-and-pac/</a></p></blockquote><p>本文介绍了内网开发会用到的一些代理配置方式，代理服务器的域名、IP 地址和端口假设为 <code>proxy.example.com</code>、<code>127.0.0.1</code>、<code>8080</code>。</p><h2 id="如何验证-http-代理是否设置成功">如何验证 HTTP 代理是否设置成功</h2><p>首先无法使用 <code>ping</code> 命令，因为 <code>ping</code> 使用的是 ICMP 协议，不是 HTTP 协议。</p><p>类 Unix 系统可以使用 <code>curl</code> 测试是否可以访问外网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://www.baidu.com</span><br></pre></td></tr></table></figure><p>Windows 可以使用 <code>Invoke-WebRequest</code> cmdlet 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 Get-Help 查看 Invoke-WebRequest 命令的帮助说明</span></span><br><span class="line">&gt; <span class="built_in">Get-Help</span> <span class="built_in">Invoke-WebRequest</span></span><br></pre></td></tr></table></figure><h2 id="在命令行中使用代理">在命令行中使用代理</h2><blockquote><p>代理相关的环境变量，理论上不区分大小写，<code>https_proxy</code> 或 <code>HTTPS_PROXY</code> 都可以生效，具体取决于程序实现。 如果希望配置多个三级域名不走代理，比如 <code>a.example.com</code> / <code>b.example.com</code> / <code>c.example.com</code>，除了将它们全部加入 <code>no_proxy</code>，还可以简化成二级域名 <code>example.com</code>（不支持 <code>*.example.com</code> 写法），更多细节参考 <a href="https://about.gitlab.com/blog/2021/01/27/we-need-to-talk-no-proxy/">We need to talk: Can we standardize NO_PROXY?</a>。</p></blockquote><h3 id="sh-compatible-shell-适用于-macos-linux-wsl-git-bash">sh-compatible Shell（适用于 macOS/Linux/WSL/Git Bash）</h3><p>设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://proxy.example.com:8080</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://proxy.example.com:8080</span><br><span class="line"><span class="built_in">export</span> all_proxy=http://proxy.example.com:8080</span><br><span class="line"><span class="built_in">export</span> no_proxy=localhost,127.0.0.1,example.com</span><br></pre></td></tr></table></figure><blockquote><p>如果希望配置持续生效，可以写入到 <code>.bashrc</code>/<code>.zshrc</code> 等文件中。</p></blockquote><p>除了使用 <code>proxy.example.com</code> 域名，也可以使用对应 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8080</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8080</span><br><span class="line"><span class="built_in">export</span> all_proxy=http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br><span class="line"><span class="built_in">unset</span> all_proxy</span><br><span class="line"><span class="built_in">unset</span> no_proxy</span><br></pre></td></tr></table></figure><h3 id="windows-powershell">Windows PowerShell</h3><p>设置代理：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;http://proxy.example.com:8080&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;http://proxy.example.com:8080&quot;</span></span><br><span class="line"><span class="variable">$env:no_proxy</span>=<span class="string">&quot;localhost,127.0.0.1,example.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果希望配置持续生效，可以将环境变量加入到系统环境变量中。</p></blockquote><p>取消代理：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="variable">$env:no_proxy</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="windows-命令提示符-cmd">Windows 命令提示符（cmd）</h3><p>设置代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://proxy.example.com:8080</span><br><span class="line">set https_proxy=http://proxy.example.com:8080</span><br><span class="line">set no_proxy=localhost,127.0.0.1,example.com</span><br></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br><span class="line">set no_proxy=</span><br></pre></td></tr></table></figure><h3 id="git">git</h3><p>设置代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:8960&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:8960&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="npm-代理配置">npm 代理配置</h2><p>设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://proxy.example.com:8080</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://proxy.example.com:8080</span><br></pre></td></tr></table></figure><p>设置成功后 <code>.npmrc</code> 会新增两条配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy</span>=http://proxy.example.com:<span class="number">8080</span></span><br><span class="line"><span class="attr">https-proxy</span>=http://proxy.example.com:<span class="number">8080</span></span><br></pre></td></tr></table></figure><p>另外，公司内部部署了 npm 私服，地址形如 <code>registry.npm.example.com</code>，仅内网能访问，安装、发布私有包不应该走代理，因此需要加上 <code>noproxy</code> 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> noproxy registry.npm.example.com</span><br></pre></td></tr></table></figure><p>相应地，<code>.npmrc</code> 的代理配置最终变成：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy</span>=http://proxy.example.com:<span class="number">8080</span></span><br><span class="line"><span class="attr">https-proxy</span>=http://proxy.example.com:<span class="number">8080</span></span><br><span class="line"><span class="attr">noproxy</span>=localhost,registry.npm.example.com</span><br></pre></td></tr></table></figure><p>这样便可以同时使用外网的 npm 官方源/淘宝源和内网的 npm 私服：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为 npm 官方源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br><span class="line"><span class="comment"># 或者设置为淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># `@example` 下的私有包始终使用内网 npm 源</span></span><br><span class="line">npm config <span class="built_in">set</span> @example:registry http://registry.npm.example.com/</span><br></pre></td></tr></table></figure><p>再次推荐私有包命名为 <code>@scope/name</code> 形式，参见之前的文章 <a href="https://keqingrong.cn/blog/2019-04-08-npm-issues/">npm 私有包</a>。</p><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure><h2 id="yarn-1-x-代理配置">Yarn 1.x 代理配置</h2><p>设置代理，和 npm 类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> proxy http://proxy.example.com:8080</span><br><span class="line">yarn config <span class="built_in">set</span> https-proxy http://proxy.example.com:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 SSL 报错，可以禁用校验</span></span><br><span class="line">yarn config <span class="built_in">set</span> strict-ssl <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置淘宝源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">unset</span> proxy</span><br><span class="line">yarn config <span class="built_in">unset</span> https-proxy</span><br></pre></td></tr></table></figure><p>注意：Yarn 没有实现 <code>noproxy</code>，所以不存在 <code>yarn config set noproxy registry.npm.example.com</code>，其内部使用的请求库 <a href="https://github.com/request/request/blob/master/lib/getProxyFromURI.js">request</a> 只支持从环境变量 <code>process.env.no_proxy</code> 获取不走代理的 URL 配置，并且如果已经设置了 npm 或者 Yarn 的 <code>proxy</code> 配置项（Yarn 会默认读取 npm 配置），<code>process.env.no_proxy</code> 会被忽略。因此在代理配置时，如果需要排除某些地址，必须删除 npm 或者 Yarn 的代理配置，改为使用命令行环境变量。</p><ul><li>问题追踪 <a href="https://github.com/yarnpkg/yarn/issues/5048">Yarn ignores no_proxy environment variable when proxy property set #5048</a></li><li>相关 PR <a href="https://github.com/yarnpkg/yarn/pull/5757">feat(request): add noProxy setting for configuration (#5048) #5757</a></li></ul><h2 id="yarn-2-berry-代理配置">Yarn 2 Berry 代理配置</h2><p>设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> httpProxy http://proxy.example.com:8080</span><br><span class="line">yarn config <span class="built_in">set</span> httpsProxy http://proxy.example.com:8080</span><br></pre></td></tr></table></figure><p>设置 npm registry 源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> npmRegistryServer https://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> npmScopes.example.npmRegistryServer http://registry.npm.example.com/</span><br><span class="line">yarn config <span class="built_in">set</span> npmScopes.local.npmRegistryServer http://registry.npm.example.com/</span><br></pre></td></tr></table></figure><p>如果使用了 HTTP 而非 HTTPS 的源，会报 <strong>Unsafe http requests must be explicitly whitelisted in your configuration</strong> 错误，可以将地址加入白名单：</p><p>macOS/Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> unsafeHttpWhitelist --json <span class="string">&#x27;[&quot;*.example.com&quot;, &quot;example.com&quot;]&#x27;</span></span><br></pre></td></tr></table></figure><p>在 Windows 命令行中输入 JSON 参数有所不同，需要对双引号进行转义：</p><p>Windows PowerShell：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> unsafeHttpWhitelist <span class="literal">--json</span> <span class="string">&#x27;[\&quot;*.example.com\&quot;, \&quot;example.com\&quot;]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不包含空格，外层的单引号可以省略</span></span><br><span class="line">yarn config <span class="built_in">set</span> unsafeHttpWhitelist <span class="literal">--json</span> [\<span class="string">&quot;*.example.com\&quot;</span>]</span><br><span class="line">yarn config <span class="built_in">set</span> unsafeHttpWhitelist <span class="literal">--json</span> [\<span class="string">&quot;*.example.com\&quot;</span>,\<span class="string">&quot;example.com\&quot;</span>]</span><br></pre></td></tr></table></figure><p>Windows 命令提示符（cmd），字符串只支持双引号不支持单引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set unsafeHttpWhitelist --json &quot;[\&quot;*.example.com\&quot;, \&quot;example.com\&quot;]&quot;</span><br></pre></td></tr></table></figure><h2 id="git-代理配置">Git 代理配置</h2><p>Git 仓库通常支持多个协议：</p><ul><li><code>http://</code> 对应 <code>http.proxy</code></li><li><code>https://</code> 对应 <code>https.proxy</code></li><li><code>git://</code> 对应 <code>core.gitproxy</code></li></ul><p>如果通过 SSH 的方式访问 Git 仓库，则直接修改 SSH 配置。</p><p>设置全局代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://proxy.example.com:8080</span><br><span class="line">git config --global https.proxy http://proxy.example.com:8080</span><br><span class="line">git config --global core.gitproxy &lt;自行参考 git 文档&gt;</span><br></pre></td></tr></table></figure><p>取消全局代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> core.gitproxy</span><br></pre></td></tr></table></figure><p>如果只是希望某个项目设置代理，省略 <code>--global</code> 参数即可。</p><h2 id="gradle-代理配置">Gradle 代理配置</h2><p>在 <code>gradle.properties</code> 中设置代理（可以是项目中的 <code>gradle.properties</code> 或者用户 HOME 目录的 <code>.gradle/gradle.properties</code>）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemProp.http.proxyHost</span>=<span class="string">proxy.example.com</span></span><br><span class="line"><span class="attr">systemProp.http.proxyPort</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">systemProp.http.nonProxyHosts</span>=<span class="string">localhost|127.0.0.1|10.*|*.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">systemProp.https.proxyHost</span>=<span class="string">proxy.example.com</span></span><br><span class="line"><span class="attr">systemProp.https.proxyPort</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">systemProp.https.nonProxyHosts</span>=<span class="string">localhost|127.0.0.1|10.*|*.example.com</span></span><br></pre></td></tr></table></figure><p>为了加速依赖下载，可能还需要设置镜像源：</p><p>在用户 HOME 目录的 <code>.gradle</code> 文件夹下创建 <code>init.gradle</code> 文件，即 <code>~/.gradle/init.gradle</code>（Windows 环境下为 <code>%USERPROFILE%\.gradle\init.gradle</code>）。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;http://maven.example.com/content/groups/public&#x27;</span></span><br><span class="line">            content &#123;</span><br><span class="line">                includeGroup <span class="string">&quot;com.example&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span> &#125;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://www.jitpack.io&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改全局的 Gradle 配置，如果修改项目中的配置不一定生效，比如：</p><ul><li><code>&lt;React Native project&gt;/android/build.gradle</code></li><li><code>&lt;React Native project&gt;/node_modules/react-native-screens/android/build.gradle</code></li><li><code>&lt;React Native project&gt;/node_modules/react-native-safe-area-context/android/build.gradle</code></li></ul><h2 id="maven-代理配置">Maven 代理配置</h2><p>在 <code>settings.xml</code> 中设置代理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>http-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.example.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>localhost|127.0.0.1|10.*|*.example.com<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>https-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>https<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.example.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>localhost|127.0.0.1|10.*|*.example.com<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浏览器代理配置">浏览器代理配置</h2><h3 id="手动代理配置">手动代理配置</h3><ul><li>Windows：在 IE 中取消勾选【自动检测设置】和【使用自动配置脚本】，勾选【为 LAN 使用代理服务器】和【对于本地地址不使用代理服务器】，填入服务器地址和端口。</li><li>手机：打开电脑热点，手机连接以后修改 WiFi 配置，选择【HTTP 代理-配置代理】，勾选【手动】，填入服务器地址和端口。</li></ul><h3 id="自动代理配置">自动代理配置</h3><ul><li>Windows：在 IE 中勾选【使用自动配置脚本】，填入 PAC 文件地址。（不要勾选【自动检测设置】和【为 LAN 使用代理服务器】）</li><li>手机：打开电脑热点，手机连接以后修改 WiFi 配置，选择【HTTP 代理-配置代理】，勾选【自动】，填入 PAC 文件地址。</li></ul><p>自动代理配置依赖 PAC 文件，PAC 文件地址从何而来，见下文。</p><h3 id="pac-文件">PAC 文件</h3><p>PAC 即 Proxy Auto Config，最早由 Netscape Navigator 2.0 引入到 Web 浏览器中，大部分浏览器和操作系统都支持，以下是一段文件示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy.pac</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FindProxyForURL</span>(<span class="params">url, host</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">dnsDomainIs</span>(host, <span class="string">&#x27;.public.example.com&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;PROXY 127.0.0.1:8080&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_">shExpMatch</span>(host, <span class="string">&#x27;localhost&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(host, <span class="string">&#x27;127.0.0.1&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(host, <span class="string">&#x27;10.*&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(host, <span class="string">&#x27;192.168.*&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(url, <span class="string">&#x27;https://gitlab.example-inc.com/*&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(url, <span class="string">&#x27;https://oa.example-inc.com/*&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">shExpMatch</span>(url, <span class="string">&#x27;https://mail.example-inc.com/*&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">dnsDomainIs</span>(host, <span class="string">&#x27;.example.com&#x27;</span>) ||</span><br><span class="line">    <span class="title function_">dnsDomainIs</span>(host, <span class="string">&#x27;.test.com&#x27;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;DIRECT&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;PROXY 127.0.0.1:8080&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体如何编写可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_(PAC)_file">Proxy Auto-Configuration (PAC) file - MDN</a>。</p><p>PAC 文件编写完成后需要托管到静态文件服务器上，以便通过某个地址访问，比如 <code>http://static.example.com/proxy.pac</code>。</p><h3 id="让-nginx-支持-pac-文件">让 Nginx 支持 PAC 文件</h3><p>Nginx 默认不支持 PAC 文件，直接将 <code>proxy.pac</code> 放到 Nginx 的 <code>html</code> 目录下，访问 <code>http://static.example.com/proxy.pac</code> 返回的媒体类型为 <code>application/octet-stream</code>，浏览器无法将其识别为代理配置文件。</p><p>需要手动修改 Nginx 的 <code>mime.types</code> 配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application/x-ns-proxy-<span class="attribute">autoconfig</span>                pac;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">application/x-javascript-<span class="attribute">config</span>                  pac;</span><br></pre></td></tr></table></figure><p>至于默认返回的 <code>application/octet-stream</code>，取决于 Nginx 的 <code>default_type</code> 配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">default_type</span>  application/octet-stream;</span><br></pre></td></tr></table></figure><h2 id="微信开发者工具代理配置">微信开发者工具代理配置</h2><p>如果系统设置过代理，则直接在【代理设置】中勾选【使用系统代理】；否则，选择【手动设置代理】，填入代理服务器地址和端口。</p><h2 id="相关链接">相关链接</h2><ul><li>npm<ul><li><a href="https://docs.npmjs.com/cli/v7/using-npm/config">config - npm docs</a></li><li><a href="https://docs.npmjs.com/cli/v7/commands/npm-config">npm config - npm docs</a></li></ul></li><li>Yarn<ul><li><a href="https://yarnpkg.com/cli/config/set">yarn config set - Yarn</a></li><li><a href="https://yarnpkg.com/cli/config/unset">yarn config unset - Yarn</a></li></ul></li><li>Java<ul><li><a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/doc-files/net-properties.html">Networking Properties</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html">Java Networking and Proxies</a></li></ul></li><li>Gradle<ul><li><a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy">Accessing the web through a HTTP proxy - Gradle</a></li><li><a href="https://docs.gradle.org/current/userguide/declaring_repositories.html">Declaring repositories</a></li><li><a href="https://docs.gradle.org/current/userguide/init_scripts.html">Initialization Scripts</a></li></ul></li><li>Maven<ul><li><a href="https://maven.apache.org/guides/mini/guide-proxies.html">Configuring a proxy - Maven</a></li><li><a href="https://maven.apache.org/ref/3.6.3/maven-settings/settings.html">Maven Settings</a></li></ul></li><li>PAC<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling">Proxy servers and tunneling - MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_(PAC)_file">Proxy Auto-Configuration (PAC) file - MDN</a></li><li><a href="https://en.wikipedia.org/wiki/Proxy_auto-config">Proxy auto-config - Wikipedia</a></li></ul></li><li>HTTP_PROXY, HTTPS_PROXY, NO_PROXY<ul><li><a href="https://superuser.com/questions/944958/are-http-proxy-https-proxy-and-no-proxy-environment-variables-standard">Are HTTP_PROXY, HTTPS_PROXY and NO_PROXY environment variables standard?</a></li><li><a href="https://github.com/curl/curl/issues/1208">Please document syntax and semantics of NO_PROXY environment variable. #1208 - curl</a></li><li><a href="https://about.gitlab.com/blog/2021/01/27/we-need-to-talk-no-proxy/">We need to talk: Can we standardize NO_PROXY?</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日常开发中用到的一些代理配置方式&quot;&gt;日常开发中用到的一些代理配置方式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://keqingrong.cn/blog/2021-02-19-proxy-and-pac/&quot;&gt;https://ke</summary>
      
    
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>【阿里cdn】被恶意刷流量!</title>
    <link href="https://blog.lthero.cn/2024/12/31/FUCK-U-CDN-STEALER/"/>
    <id>https://blog.lthero.cn/2024/12/31/FUCK-U-CDN-STEALER/</id>
    <published>2024-12-31T08:42:46.000Z</published>
    <updated>2024-12-31T09:26:48.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里cdn被恶意刷流量">阿里cdn被恶意刷流量</h1><h2 id="说明">说明</h2><p>本人在 github 部署了静态网页博客，使用阿里云的 cdn 进行加速，最近发现 cdn 流量异常</p><p>异常表现：晚上 20 点到 2 点期间刷了 4GB 流量，访问 10w+次；并不是每天都有，最近是隔一周左右发生一次</p><h2 id="处理">处理</h2><p>好在阿里云提供了查询 ip 的接口（接口还被藏起来了）</p><p><a href="https://next.api.aliyun.com/api/Cdn/2018-05-10/DescribeDomainTopClientIpVisit">https://next.api.aliyun.com/api/Cdn/2018-05-10/DescribeDomainTopClientIpVisit</a></p><p>返回结果如下</p><p><em>仅一天内的访问情况</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ClientIpList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Acc&quot;</span><span class="punctuation">:</span> <span class="number">172871</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Traffic&quot;</span><span class="punctuation">:</span> <span class="number">1932827800</span><span class="punctuation">,</span> #Byte<span class="punctuation">,</span>大概 <span class="number">2</span>GB</span><br><span class="line">  <span class="attr">&quot;Rank&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ClientIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.202.114.36&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="坏蛋-ip">坏蛋 ip</h2><p><strong>1.202.114.36</strong></p><p><strong>1.202.114.242</strong></p><p><strong>219.143.174.174</strong></p><p>北京电信的</p><h2 id="后续处理">后续处理</h2><p>1、在阿里云控制台把这个ip段封掉（添加到黑名单）</p><p>2、对整个域名添加限速和限流量设置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阿里cdn被恶意刷流量&quot;&gt;阿里cdn被恶意刷流量&lt;/h1&gt;
&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;
&lt;p&gt;本人在 github 部署了静态网页博客，使用阿里云的 cdn 进行加速，最近发现 cdn 流量异常&lt;/p&gt;
&lt;p&gt;异常表现：晚上 20 点到 2 点期间刷了</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="cdn盗用" scheme="https://blog.lthero.cn/tags/cdn%E7%9B%97%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>【VPS面板】哪吒面板安装</title>
    <link href="https://blog.lthero.cn/2024/12/25/Install-VPS-Dashboard/"/>
    <id>https://blog.lthero.cn/2024/12/25/Install-VPS-Dashboard/</id>
    <published>2024-12-25T12:43:21.000Z</published>
    <updated>2025-01-02T13:14:03.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哪吒面板安装过程">哪吒面板安装过程</h1><blockquote><p>用到的项目：<a href="https://nezha.wiki/">https://nezha.wiki/</a></p></blockquote><p><img src="https://cdn.lthero.cn/post_images/course/ML/image-20241225204400503.png" alt="实现效果图"></p><h2 id="写在前面">写在前面</h2><p>安装分两个部分（控制端dashboard，被控端agent）</p><p>其中控制端的软件安装在一台机器A上即可，被控制端的设备(B,C,D)向A定期发送数据</p><h2 id="在控制端中安装dashboard">在控制端中安装Dashboard</h2><p>在面板服务器中，运行以下安装脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/nezhahq/scripts/refs/heads/main/install.sh -o nezha.sh &amp;&amp; <span class="built_in">chmod</span> +x nezha.sh &amp;&amp; sudo ./nezha.sh</span><br></pre></td></tr></table></figure><p>如果你的服务器位于中国大陆，可以使用镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://gitee.com/naibahq/scripts/raw/main/install.sh -o nezha.sh &amp;&amp; <span class="built_in">chmod</span> +x nezha.sh &amp;&amp; sudo CN=<span class="literal">true</span> ./nezha.sh</span><br></pre></td></tr></table></figure><p>以 Docker 安装为例，安装完成后按提示输入以下信息：</p><ul><li><code>请输入站点标题:</code> - 自定义站点标题。</li><li><code>请输入暴露端口:</code> - 公开访问端口（默认 8008，可自定义）</li><li><code>请指定安装命令中预设的 nezha-agent 通信域名地址</code> （例如 <a href="http://example.com:443">example.com:443</a>）<ul><li>这里不要写8008了，使用<code>域名:444</code>即可，如<code>dash.lthero.top:444</code></li></ul></li></ul><p>输入完成后，等待拉取 Docker 镜像</p><p>安装结束后，如果一切正常，你可以通过域名和端口号访问 Dashboard，例如：</p><p><code>http://dash.example.com:8008</code></p><p>如果需要再次运行安装脚本，可输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nezha.sh</span><br></pre></td></tr></table></figure><p>打开管理脚本</p><h3 id="登录到-dashboard-配置界面">登录到 Dashboard 配置界面</h3><p>后台管理界面的路径为 <code>/dashboard</code>，你只需访问：</p><p><code>http://dash.example.com:8008/dashboard</code></p><p>首次登录的默认用户名和密码均为 <code>admin</code></p><p>建议安装后立即进入管理页面：点击头像 → “个人信息” → “更新个人资料”修改密码。</p><h2 id="https安装">HTTPS安装</h2><h3 id="脚本下载">脚本下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/lthero-big/QcHTTPS/refs/heads/main/install_https.sh -O install_https.sh </span><br></pre></td></tr></table></figure><p>脚本将保存在本地 ，install_https.sh ，您可以随时执行</p><h3 id="脚本执行">脚本执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install_https.sh</span><br></pre></td></tr></table></figure><p>随后输入</p><ul><li>域名，如<code>dash.lthero.top</code></li><li>端口，<code>8008</code></li><li>邮箱，自己的</li></ul><p>然后等证书下来后</p><p>修改这个配置文件<code>vim /etc/nginx/sites-available/dash.lthero.top</code></p><h3 id="nginx-配置示例">Nginx 配置示例</h3><blockquote><p>如果你没有使用CloudFlare的服务，下面的代码默认为“你使用nginx作为最外层”，需要按下面的注释，删除（注释掉）一些代码</p></blockquote><p>以下是使用 Nginx 配置反向代理的示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    <span class="comment"># http2 on; # Nginx &gt; 1.25.1，请注释上面两行，启用此行</span></span><br><span class="line"></span><br><span class="line">    server_name dashboard.example.com; <span class="comment"># 替换为你的域名</span></span><br><span class="line">    ssl_certificate          /data/letsencrypt/fullchain.pem; <span class="comment"># 域名证书路径</span></span><br><span class="line">    ssl_certificate_key      /data/letsencrypt/key.pem;       <span class="comment"># 域名私钥路径</span></span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:SSL:10m; <span class="comment"># 如果与其他配置冲突，请注释此项</span></span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">    underscores_in_headers on;</span><br><span class="line">    set_real_ip_from 0.0.0.0/0; <span class="comment"># 替换为你的 CDN 回源 IP 地址段</span></span><br><span class="line">    real_ip_header CF-Connecting-IP; <span class="comment"># 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span><br><span class="line">    <span class="comment"># 如果你使用nginx作为最外层，把上面两行注释掉</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># grpc 相关    </span></span><br><span class="line">    location ^~ /proto.NezhaService/ &#123;</span><br><span class="line">        grpc_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        grpc_set_header nz-realip <span class="variable">$http_CF_Connecting_IP</span>; <span class="comment"># 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span><br><span class="line">        <span class="comment"># grpc_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span><br><span class="line">        grpc_read_timeout 600s;</span><br><span class="line">        grpc_send_timeout 600s;</span><br><span class="line">        grpc_socket_keepalive on;</span><br><span class="line">        client_max_body_size 10m;</span><br><span class="line">        grpc_buffer_size 4m;</span><br><span class="line">        grpc_pass grpc://dashboard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># websocket 相关</span></span><br><span class="line">    location ~* ^/api/v1/ws/(server|terminal|file)(.*)$ &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header nz-realip <span class="variable">$http_cf_connecting_ip</span>; <span class="comment"># 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span><br><span class="line">        <span class="comment"># proxy_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span><br><span class="line">        proxy_set_header Origin https://<span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        proxy_read_timeout 3600s;</span><br><span class="line">        proxy_send_timeout 3600s;</span><br><span class="line">        proxy_pass http://127.0.0.1:8008;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># web</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header nz-realip <span class="variable">$http_cf_connecting_ip</span>; <span class="comment"># 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span><br><span class="line">        <span class="comment"># proxy_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span><br><span class="line">        proxy_read_timeout 3600s;</span><br><span class="line">        proxy_send_timeout 3600s;</span><br><span class="line">        proxy_buffer_size 128k;</span><br><span class="line">        proxy_buffers 4 256k;</span><br><span class="line">        proxy_busy_buffers_size 256k;</span><br><span class="line">        proxy_max_temp_file_size 0;</span><br><span class="line">        proxy_pass http://127.0.0.1:8008;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream dashboard &#123;</span><br><span class="line">    server 127.0.0.1:8008;</span><br><span class="line">    keepalive 512;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name dash.lthero.top;</span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;  <span class="comment"># 强制重定向所有 HTTP 请求到 HTTPS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我的设置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> dash.lthero.top; <span class="comment"># 替换为你的域名</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>          /etc/letsencrypt/live/dash.lthero.top/fullchain.pem; <span class="comment"># 域名证书路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>      /etc/letsencrypt/live/dash.lthero.top/privkey.pem; <span class="comment"># 域名私钥路径</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>; <span class="comment">#</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">underscores_in_headers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># grpc 相关    </span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /proto.NezhaService/ &#123;</span><br><span class="line">        <span class="attribute">grpc_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">grpc_set_header</span> nz-realip <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">grpc_read_timeout</span> <span class="number">600s</span>;</span><br><span class="line">        <span class="attribute">grpc_send_timeout</span> <span class="number">600s</span>;</span><br><span class="line">        <span class="attribute">grpc_socket_keepalive</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">grpc_buffer_size</span> <span class="number">4m</span>;</span><br><span class="line">        <span class="attribute">grpc_pass</span> grpc://dashboard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># websocket 相关</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* ^/api/v1/ws/(server|terminal|file)(.*)$</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> nz-realip <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Origin https://<span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8008;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># web</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> nz-realip <span class="variable">$remote_addr</span>; </span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">        <span class="attribute">proxy_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">        <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">256k</span>;</span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span> <span class="number">256k</span>;</span><br><span class="line">        <span class="attribute">proxy_max_temp_file_size</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8008;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> dashboard &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8008</span>; <span class="comment"># 8008服务端口</span></span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">512</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> dash.lthero.top;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;  <span class="comment"># 强制重定向所有 HTTP 请求到 HTTPS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，重启nginx即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t  <span class="comment"># 检查配置文件是否有语法错误</span></span><br><span class="line">sudo systemctl reload nginx  <span class="comment"># 重新加载配置</span></span><br><span class="line"><span class="comment"># 如果重新加载配置后无效，可以尝试重启nginx</span></span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="在被控端安装agent">在被控端安装agent</h2><p>哪吒监控支持在 Windows、macOS 和 Linux 上一键安装 Agent</p><h3 id="准备工作">准备工作</h3><p>在安装前，需要提前在管理面板中设置通信域名，该域名不建议接入 CDN。</p><p>本文档以示例<strong>通信域名</strong> “<a href="http://dash.example.com:444">dash.example.com:444</a>” 为例</p><ol><li>在后台管理面板点击头像，进入“系统设置”页。</li><li>在“Agent对接地址【域名/IP:端口】”项中填入通信域名和端口 “<a href="http://dash.example.com:444">dash.example.com:444</a>”<ul><li>不要用8008了，换个端口就行</li></ul></li><li>点击“确认”保存设置</li></ol><h3 id="一键安装步骤">一键安装步骤</h3><ol><li>在 <code>服务器</code> 页面中，点击 <code>安装命令</code> 并选择对应操作系统，安装命令将自动复制到你的剪贴板。</li><li>在被控端服务器中运行安装命令，等待安装完成后返回到 <code>服务器</code> 页面查看是否上线。</li><li>如果安装成功，页面中将自动弹出新的服务器，你可以点击编辑按钮为其设置名称。</li></ol><h2 id="查看-agent-运行日志">查看 Agent 运行日志</h2><p>在配置文件中启用 debug 模式，使用以下命令查看 Agent 的运行状态和日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nezha-agent-*</span><br></pre></td></tr></table></figure><p>如果出现多个运行结果，说明你运行了多次agent</p><blockquote><p><code>/opt/nezha/agent/</code> 下面有多少个config*.json就对应了相应的配置个数</p></blockquote><h2 id="卸载-agent">卸载 Agent</h2><p>卸载 Agent 包括停止服务、卸载服务，以及删除相关文件。以下是 Ubuntu 系统的卸载步骤：</p><ol><li><p>停止并卸载服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/nezha/agent/nezha-agent service uninstall</span><br></pre></td></tr></table></figure></li><li><p>删除 Agent 文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /opt/nezha/agent/</span><br></pre></td></tr></table></figure></li></ol><p>如果安装了多个服务并想要全部卸载，可以使用 Agent 安装脚本的卸载功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent.sh uninstall</span><br></pre></td></tr></table></figure><h1 id="数据迁移-备份恢复">数据迁移、备份恢复</h1><p>新、旧服务器要使用相同的域名以及端口，保证无缝过渡</p><ol><li><strong>停止面板服务</strong><br>在旧服务器中运行一键脚本，选择 <code>停止面板</code>。</li><li><strong>备份数据</strong><br>打包旧服务器中的 <code>/opt/nezha</code> 文件夹，并将其复制到新服务器相同位置。</li><li><strong>恢复数据</strong><br>在新服务器中解压 <code>/opt/nezha</code> 文件夹至相同路径。</li><li><strong>启动面板服务</strong><br>在新服务器中运行一键脚本，选择 <code>启动面板</code>。</li></ol><h3 id="注意事项">注意事项</h3><ul><li>确保 <code>/opt/nezha</code> 文件夹及其内容的权限和所有权在新服务器上正确设置。</li><li>数据迁移完成后，可以通过访问 Dashboard 界面验证迁移是否成功。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哪吒面板安装过程&quot;&gt;哪吒面板安装过程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;用到的项目：&lt;a href=&quot;https://nezha.wiki/&quot;&gt;https://nezha.wiki/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>超低成本PS5远程串流</title>
    <link href="https://blog.lthero.cn/2024/12/23/PS5RemotePlay/"/>
    <id>https://blog.lthero.cn/2024/12/23/PS5RemotePlay/</id>
    <published>2024-12-23T05:04:53.000Z</published>
    <updated>2025-01-07T11:06:03.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超低成本ps5远程串流">超低成本PS5远程串流!</h1><blockquote><p>思路：<strong>网络部分</strong>使用zerotier创建虚拟局域网，让PS5在虚拟局域网内，从而被其它设备访问；<strong>控制部分</strong>使用开源的软件chiaki（pxplay也行，但它收费）注意，chiaki有多版本，目前使用<strong>chiaki-ng</strong></p></blockquote><p>开源项目：<a href="https://github.com/streetpea/chiaki-ng">chiaki-ng</a></p><p><strong>特性：</strong></p><ul><li>支持Windows/MacOS/Android/Linux…</li><li>可以调整码率，支持远程唤醒、Xbox手柄！</li><li>支持DS原生震动和线性板机！</li></ul><p><strong>chiaki</strong>虽好，但需要设备处于同一局域网内</p><blockquote><p>如果只在局域网内使用，请分别下载对应客户端食用即可；后续教程可以跳过~</p></blockquote><hr><p>但，如果想在不同的网连接，要么需要公网，要么可以<strong>创建“虚拟局域网”(VLAN)，<strong>需要软件(zerotier)让设备都处在同一个</strong>虚拟局域网</strong>内，这样就能使用chiaki啦~</p><p>下面的教程分为四大部分：</p><ol><li>注册zerotier与创建虚拟局域网</li><li>路由器安装zerotier与配置虚拟局域网</li><li>客户端加入虚拟局域网</li><li>开玩！</li></ol><hr><h2 id="1-注册zerotier与创建vlan">1.注册zerotier与创建VLAN</h2><p>在zerotier官网 <a href="https://zerotier.com/">https://zerotier.com/</a> 上注册账号</p><p>随后，点击&quot;create a network&quot;</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-18-55.png" alt="创建网络"></p><h4 id="none"></h4><p>然后点击创建出来的网络，Name可以随便起，AccessControl<strong>最好使用’Private’</strong></p><blockquote><p>即：所有要加入这个虚拟局域网的设备需要你手动认证审核；</p></blockquote><p><strong>记下这里的Network ID</strong>，它就是你的虚拟局域网ID啦，后面需要用上</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-21-33.png" alt="选择Private"></p><h4 id="none"></h4><p>接下来，可以更换虚拟局域网的ip段，当然，使用系统分配的也可以啦</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-24-29.png" alt="可以更换虚拟局域网的ip段"></p><p>zerotier官网的所有操作会自动更新，所以不用手动保存</p><h2 id="2-路由器安装zerotier与配置vlan">2.路由器安装zerotier与配置VLAN</h2><p>这一步是比较劝退的，由于ps5无法安装zerotier，所以我们只能曲线救国；</p><blockquote><p>在路由器（刷了openwrt系统或其它系统）上安装zerotier</p></blockquote><ul><li>自动：一般在openwrt系统的应用商店可以搜索并下载到（甚至默认安装）</li><li>半自动：zerotier官方提供了比较方便的安装方式，一条命令即可完成（这里默认您已经会使用ssh工具并连入路由器）</li></ul><blockquote><p>curl -s <a href="https://install.zerotier.com/">https://install.zerotier.com/</a> | sudo bash</p></blockquote><h3 id="加入虚拟局域网">加入虚拟局域网</h3><p>在路由器上加入到创建的虚拟局域网</p><blockquote><p>zerotier-cli join fadxxxxx5eb45a9</p></blockquote><p>随后，在zerotier官网上授权这个设备的接入，将设备前面的Auth同意，此设备就加入虚拟局域网成功了，右侧可以看到这个设备的虚拟ip</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-37-03.png" alt="同意设备接入"></p><h4 id="none"></h4><h3 id="配置虚拟局域网">配置虚拟局域网</h3><p>但目前只让路由器加入了这个虚拟局域网，<strong>为了让ps也能入网</strong>，我们需要先<strong>设置NAT</strong></p><ul><li>在zerotier网页，找到**“Manage Routes”**模块，将ps所在的真实局域网段（如我这里写的是192.168.8.0/24）填写在Destination，将路由器的虚拟ip填写在Via</li></ul><blockquote><p>从而让你真实局域网内的所有设备，都能被虚拟局域网访问，而路由器就充当了”中间人“</p></blockquote><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-35-32.png" alt="设置NAT"></p><p>点击Submit提交。</p><p>最后一步，需要在路由器的zerotier管理页面，<strong>自动允许客户端NAT</strong></p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_22-44-15.png" alt="自动允许客户端NAT"></p><p>即完成虚拟局域网的配置；</p><hr><h2 id="3-客户端加入虚拟局域网">3.客户端加入虚拟局域网</h2><p>还是在zerotier官网，下载pc对应的客户端，如果是安卓，建议用<a href="https://github.com/kaaass/ZerotierFix">安卓zerotier好用版</a></p><p>在pc下载zerotier后，需要加入虚拟局域网，还是使用上面的NetworkID，并且仍然需要手动确认加入。</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-15-54.png" alt="pc加入网络"></p><p>电脑上会安装一个虚拟网卡，如果弹出来选项框都点是。</p><p>其它平台也是类似操作，安装好对应的客户端后加入网络即可。</p><hr><h2 id="4-开玩">4.开玩！</h2><blockquote><p>为了体现出虚拟局域网的用处，最好让电脑与ps处于不同的真实局域网中，比如让电脑连接手机热点；</p></blockquote><h3 id="电脑端串流">电脑端串流</h3><p>电脑上下载chiaki-ng，链接-&gt;<a href="https://github.com/streetpea/chiaki-ng">chiaki-ng</a> <a href="https://github.com/streetpea/chiaki-ng">https://github.com/streetpea/chiaki-ng</a> ，找到<a href="https://github.com/streetpea/chiaki-ng/releases/download/v1.9.3/chiaki-ng-windows-installer.exe">chiaki-ng-windows-installer.exe</a>（免费）</p><p>打开chiaki-ng后，点击右上角”+“号，输入ps5的真实局域网ip（比如192.168.8.5）</p><blockquote><p>记得吗，前面把整个192.168.8.0/24网段都加入到虚拟局域网了</p></blockquote><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-21-51.png" alt="img"></p><p>然后需要添加注册用户（其实就是需要登录ps账号），但<strong>不要直接填写你PSN的ID，它需要填写base64格式</strong></p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-27-15.png" alt="填写转码后的ID和远程PIN"></p><p>使用<a href="https://psn.flipscreen.games/">ID转换工具</a> <a href="https://psn.flipscreen.games">https://psn.flipscreen.games</a> 得到转码后的ID，记得要复制chiaki这一个，psplay是另一个软件的（psplay收费）</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-28-14.png" alt="复制chiaki的那一串码子"></p><p>另外，需要在ps的“设置”-&gt;“系统”-&gt;“远程游玩“开启远程游玩，并且找到PIN码（有时效），将PIN填写在软件上。</p><p><strong>随后即添加大成功！！！</strong></p><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-33-12.png" alt="ps设备添加成功"></p><ul><li>如果主机处于开机状态（白色），直接双击就能开始远程串流了</li><li>如果主机处于待机状态（黄色），需要选择”Wakeup“发送唤醒操作，然后再进行远程串流</li><li>主机完全关机的状态下无法被唤醒，更无法串流；（可以试试<strong>手指机器人</strong>？）</li></ul><h3 id="电脑端演示效果">电脑端演示效果</h3><p><img src="https://cdn.lthero.cn/post_images/course/ML/PixPin_2025-01-06_23-44-10.png" alt="电脑端演示效果"></p><p>按ctrl+o可以选择出来串流，其它的设置（包含分辨率、码率请自行调整）</p><p>---------------------------------------------</p><h3 id="安卓">安卓</h3><p>如果是安卓，可以在google商店下载到chiaki-up（免费）</p><p>安卓需要先打开zerotier并加入虚拟网络，并且保持加入网络的状态（会创建一个虚拟网卡）</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/Screenshot_2025-01-06-23-39-18-332-edit_net.kaaass.zerotierfix.jpg" alt="zerotier连接到虚拟局域网"></p><p>再打开chiaki-up，点击右下角添加ps5，方法与电脑端相似；</p><p><img src="https://cdn.lthero.cn/post_images/course/ML/Screenshot_2025-01-06-23-38-41-202-edit_com.gameblabla.chiaki.jpg" alt="chiaki-up添加主机"></p><h3 id="手机端演示效果">手机端演示效果</h3><p>可以用蓝牙连接ds，再<strong>将屏幕上的虚拟控制关闭</strong></p><p><img src="https://cdn.lthero.cn/post_images/course/ML/Screenshot_2025-01-06-23-53-26-538_com.gameblabla.chiaki.jpg" alt="手机演示效果"></p><hr><p>至此，教程应该就结束了；</p><h2 id="延迟问题">延迟问题</h2><p>我与朋友测试过，相隔150公里左右，<strong>延迟稳定10ms~15ms</strong>；并且串流时可以正常使用线性板机、震动等功能；体验还是不错的。</p><p>另外，zerotier默认使用p2p打洞，如果打洞成功，延迟会很低而且稳定；</p><blockquote><p>但如果一直无法的洞成功，其实还可以尝试走中转服务器！</p></blockquote><p>但如何搭建moon中转服务器，可惜这里的空白处太小，写不下~</p><p><strong>最后，提前祝大家新年快乐！</strong></p><h1 id="原文">原文</h1><blockquote><p>这里是最初写的</p></blockquote><h2 id="网络部分">网络部分</h2><p>zerotier的安装与使用具体可以查看另一篇文章</p><ol><li>在zerotier创建一个虚拟局域网fx2811dwx(随便写的)</li><li>在n1盒子上（刷了openwrt系统，并安装了zerotier插件）启动zerotier，并加入到虚拟局域网fx2811dwx，需要在zerotier控制台同意设备加入</li><li>为了让PS5也加入到这个网络，需要在n1盒子上，允许 Zerotier 的拨入客户端访问路由器 LAN 资源<ol><li>需要在 Zerotier 管理页面设定到 LAN 网段的路由表</li><li>比如n1盒子的虚拟ip是10.22.22.15，n1盒子的真实局域网ip是192.168.6.15。需要在zerotier管理页面，将LAN网段192.168.6.0/24 交给10.22.22.15进行转发</li><li>在PS5上，将网络设置的网关（以及主DNS）设置为n1盒子的真实局域网ip</li></ol></li></ol><p>如果没问题，此时同一个虚拟局域网下的设备，可以ping通PS5（假设它的真实局域网ip是192.168.6.5），也就是说，PS5是不需要安装zerotier或设置虚拟ip的，转发的操作已经交给了n1盒子</p><blockquote><p>如果网络不稳定，zerotier无法创建直连p2p，此时需要中转服务器（也叫moon服务器），具体操作在另一篇zerotier文章有写</p></blockquote><h3 id="注意">注意</h3><p>除了使用<strong>zerotier</strong>，也可以使用相似的<strong>tailscale</strong>、<strong>皎月连</strong>等虚拟局域网创建工具；</p><p>网上也有使用dmz转发的方法（需要有公网），但此方法会暴露端口，不太推荐</p><h2 id="操控部分">操控部分</h2><blockquote><p>PC/安卓/苹果 需要安装软件chiaki</p><p>项目：<a href="https://github.com/streetpea/chiaki-ng">https://github.com/streetpea/chiaki-ng</a></p></blockquote><p>假如在PC上下载好chiaki软件，此时假设PC也在n1盒子相同的“真实局域网下”（即PC可以ping通PS5），如果chiaki未发现PS5，可以自选添加</p><p>其中选项如下</p><ol><li>ip要设置为PS5的真实局域网ip（192.168.6.5）</li><li>写真实的PSN的ID，然后点击public lookup，可以自动填写ID对应的base64格式。或者用这个网站可以将PSN的ID转码https://psn.flipscreen.games/</li><li>以及pair对应的码子，在“系统”-&gt;“远程游玩”-&gt;&quot;配对&quot;里找，码子有效5分钟</li></ol><p>如果没问题，即可添加成功，随后即可开始串流</p><h3 id="注意">注意</h3><p>chiaki是支持ds手柄原生震动的，但需要有线连接到电脑，如果发现有线连接后还没震动，可以下载Playstation accessories（官方软件）并将手柄驱动更新，理论上不需要一直后台打开accessories就可以用原生震动（如果软件关闭原生震动就不能用，就一直打开accessories好了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;超低成本ps5远程串流&quot;&gt;超低成本PS5远程串流!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思路：&lt;strong&gt;网络部分&lt;/strong&gt;使用zerotier创建虚拟局域网，让PS5在虚拟局域网内，从而被其它设备访问；&lt;strong&gt;控制部分&lt;/strong&gt;</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="PS5" scheme="https://blog.lthero.cn/tags/PS5/"/>
    
  </entry>
  
  <entry>
    <title>收集论文中的好语句与图表</title>
    <link href="https://blog.lthero.cn/2024/12/03/SomeGreatSentences/"/>
    <id>https://blog.lthero.cn/2024/12/03/SomeGreatSentences/</id>
    <published>2024-12-03T07:05:01.000Z</published>
    <updated>2025-01-09T14:30:10.186Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><h1 id="sok-watermarking-for-ai-generated-content">SoK: Watermarking for AI-Generated Content</h1><h3 id="第一章节-introduction">第一章节（Introduction）</h3><blockquote><p>“Distinguishing between human-created and AI-generated content is becoming increasingly challenging, necessitating the development of effective techniques to maintain transparency,accountability, and the responsible use of GenAI.”</p></blockquote><p>区分人类创造的内容和人工智能生成的内容正变得越来越具有挑战性，需要开发有效的技术来保持透明度、问责制和负责任地使用GenAI。</p><blockquote><p>“While watermarking is not a <strong>silver bullet</strong> for addressing all risks associated with GenAI, it can play a crucial role in enhancing AI safety and trustworthiness by combating misinformation and deception.”</p></blockquote><p>虽然水印并不是解决与人工智能相关的所有风险的<strong>灵丹妙药</strong>，但它可以通过打击错误信息和欺骗，在提高人工智能的安全性和可信度方面发挥关键作用。</p><img src="C:/Users/12904/AppData/Roaming/Typora/typora-user-images/image-20241203151752811.png" alt="image-20241203151752811" style="zoom: 67%;" /><p><strong>首先</strong>，抛出问题：我们需要一个能区分AIGC和人工生成内容的技术</p><p><strong>其次</strong>，说出目前使用的解决方案，并突出它们的缺点；</p><ul><li>可能的方案一：记录所有AIGC的内容；但缺点有三，1、需要大量存储空间与跨组织协调；2、隐私保护问题；3、无法应用于开源模型</li><li>可能的方案二：使用post-hoc的检测方式；通过AIGC的特征来区分；缺点，这类检测方式有时间局限性，随着AIGC技术快速升级，生成内容与真实内容越发难的被划分出来。</li></ul><p><strong>最后</strong>，抛出预期的解决方案：水印。</p><ul><li>与其被动地对生成内容检测，不如“主动出击”</li><li>优点：水印技术不受GenAI模型不断发展的能力的限制，而是提供了一种<strong>深思熟虑的、持久的</strong>识别手段</li><li>优点：水印可以在以后检测到，允许在<strong>不依赖于固有或统计差异的情况下进行验证</strong>，从而提供了一种更有弹性的方法来区分机器生成的内容和人类工作</li><li>上述两个优点，正好解决了方案一与方案二的缺点</li></ul><blockquote><p>“Unlike methods that <strong>passively</strong> attempt to detect incidental differences between human and AI generated content, watermarking involves <strong>actively</strong> embedding an imperceptible signal within GenAI output at the time of its generation”</p></blockquote><p>与<strong>被动地</strong>尝试检测人类和人工生成内容之间偶然差异的方法不同，水印涉及在生成GenAI输出时<strong>主动嵌入</strong>难以察觉的信号。</p><p>随后，写一段本文后面几个章节的工作总览</p><h3 id="第二章节">第二章节</h3><p><strong>首先</strong>，介绍了post-hoc 的分类</p><p>1、zero-shot检测，收集统计特征来判断；</p><p>2、training-based检测，使用“包含人类与AIGC”的数据集进行训练；</p><p>post-hoc检测方法拥有较差的性能，此外对于不在数据集中的新模型，此检测方式即会失败</p><p><strong>其次</strong>，简单介绍了水印的历史与分类（可见，不可见）</p><p><strong>随后</strong>，强调GenAI时代对水印的急需性，从以下五点</p><p>1、Combating Misinformation</p><p>在人工智能生成的内容中添加水印可以帮助<strong>追踪信息来源</strong>，从而有助于识别错误信息和虚假信息。</p><p>2、Enhancing Fraud Detection</p><p>生成模型可以产生定制的诈骗信息，使传统的检测方法不那么有效。水印可以在识别和减轻这种复杂的骗局企图方面发挥关键作用，加强反骗局的努力</p><p>3、Deterring Academic Dishonesty.</p><p>水印可以帮助防止在一些领域作弊，比如学生论文，在这些领域验证文本是人类写的</p><p>4、Avoiding Training Data Contamination</p><p>如果模型不经意地在它们自己生成的输出上进行了训练，就会导致“模型崩溃”，在退化数据上进行迭代训练会降低生成内容的整体质量。水印可以帮助标记人工智能生成的内容</p><p>5、Providing Signatures and Attribution.</p><p>水印可以作为签名，允许用户验证内容是由特定模型生成的。此外，水印可以帮助证明归因于模型的有害内容是否真的由该模型生成。</p><p><strong>最后</strong>，强调了政府与工业届的政策</p><p>1、政府：包含美国、欧盟、中国等国家对AI的法规限制</p><p>2、工业届：C2PA与Google SynthID</p><h3 id="第三章节-what-s-a-watermark">第三章节（What’s a Watermark）</h3><h4 id="3-1质量">3.1质量</h4><p><strong>首先</strong>，介绍水印的构成（嵌入&amp;提取）两大部分</p><p>设想个应用场景（在AIGC时代），使用模型M和提示词<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>生成一个内容<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>（视频、音频、文本、图像），随后使用一个水印模块<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>r</mi><msup><mi>k</mi><mi>M</mi></msup><mo stretchy="false">(</mo><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Watermark^M(\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mclose">)</span></span></span></span>-&gt;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>表示在水印模块下生成的内容</p><p>并根据水印类型，划分成zero-bit水印与multi-bit 水印($ m \in {0,1} ^k<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">)</mo><mtext>，则更新后的演示公式是</mtext></mrow><annotation encoding="application/x-tex">)，则更新后的演示公式是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">更</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">演</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">是</span></span></span></span>Watermark^M(m,\pi)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">-&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>x$</p><p>相应的，还有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Detect(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>来判断是否存在水印，相应的也分成了</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Detect(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{true,  false\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">}</span></span></span></span> 进行zero-bit水印判断</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Detect(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">}</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">\{0,1\}^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 进行水印recover</li></ul><p>另外，还有一种<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Attribute(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>-&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{true,  false\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">}</span></span></span></span></p><blockquote><p>Detect is used, for instance, to identify misinformation being spread by malicious users of the model,Attribute is used to accuse the model owner of producing problematic content</p></blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Detect</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>用于识别模型恶意用户传播的错误信息，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Attribute</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span></span></span></span>用于指责模型所有者产生有问题的内容</p><p><strong>其次</strong>，介绍水印对质量的影响</p><p>经验质量验证和可证明性质量验证(heuristic versus provable)</p><ul><li><p>heuristic的更偏向于经验向，水印可能会严重影响实验中未捕获的提示或任务的质量。此外，实验中使用的质量度量可能存在偏差或不可靠。</p></li><li><p>provable可证明质量概念适用于任何可能的提示，并确保水印引入的任何偏差是有限的，甚至不存在。</p></li></ul><p>单反应和多反应(single-response versus multi-response)</p><p>一些保证仅适用于水印模型的单个响应。（例如，一些经验质量验证方法，低失真和无失真）</p><p>例如，图像水印可能会导致模型<strong>只输出狗的图像，但这些图像质量极高</strong>。该水印将<strong>满足单响应质量概念</strong>，因为这种偏差只会出现在多个响应中。</p><p>另一方面，其他概念表明，任何数量的水印响应都是高质量的（例如，更强的经验质量验证方法和不可检测性）</p><p><strong>经验质量验证</strong>(Empirical Quality Validation)</p><p><strong>使用其它模型</strong>来给水印内容的质量进行打分（HPSv2），或者<strong>让用户来比较</strong>水印与无水印内容的质量，但实际上，“经验质量”并没有大规模的使用，除了SynthID</p><p>SynthID在语法、相关性、正确性、有用性和整体质量5个类别中，使用人工评价来评价水印的效果。他们还根据经验评估了他们提出的方法的检出率，并表明它具有低假阳性率</p><p><strong>经验质量验证</strong>通常与下面详细说明的<strong>可证明的质量验证</strong>一起使用。</p><p>Distortion-free schemes ensure that the quality is preserved for any single  response from the model, but do not guarantee anything about the quality across multiple generations</p><p>无失真方案确保模型的任何单个响应都能保持质量，但不能保证多代的质量</p><h4 id="3-2-假阳率">3.2 假阳率</h4><p>在水印方案中，检测器(Detector)的一个重要特性是具有较低的误报率（false positive rate)</p><h4 id="3-3-假阳率与鲁棒性">3.3 假阳率与鲁棒性</h4><h4 id="3-4-不可伪造性-unforgeability">3.4 不可伪造性(Unforgeability)</h4><p>不可伪造性保证了没有嵌入密钥的攻击者无法生成看似带有水印的内容，除非是完全复制水印模型的输出内容。</p><p><strong>特性</strong>：确保只有拥有<strong>生成密钥</strong>或<strong>嵌入密钥</strong>的人才能嵌入有效的水印。</p><p><strong>安全性</strong>：防止攻击者伪造水印内容，误导他人认为<strong>某内容来自特定模型</strong>。</p><p><strong>实际意义</strong>：</p><ul><li>一个健全的水印方案必须确保攻击者在没有嵌入密钥的情况下，难以伪造带水印的输出。</li><li>这一特性为水印系统增加了一层可信度，尤其是在涉及责任追究和法律影响的场景中。</li></ul><blockquote><p>伪造攻击问题：如果攻击着拿着别人生成的图A，进行逆向后得到初始噪声，再生成一张有害图B</p></blockquote><p>解决方案：可以通过C2PA解决，假如图A的水印内容(C2PA凭证)已经记录了图A的提示词，哪怕通过图B提取出了水印（即C2PA凭证），可以通过提示词的比对，简单判断出图B的内容与C2PA中的不匹配，说明图像遭到了攻击。</p><p>在水印的设计中，<strong>Attribute（归因）<strong>与</strong>Detect（检测）<strong>是两个关键的功能模块，分别对应不同的应用需求和安全性目标。以下是对两者区别的详细说明，尤其是</strong>Attribute</strong>的功能和重要性：</p><h5 id="attribute-归因">Attribute（归因）</h5><ol><li><p><strong>核心目标</strong>：<br><strong>归因</strong>的核心目标是确定某个内容是否来自一个特定的水印模型。换句话说，Attribute功能用于对内容的来源进行可靠的追溯和责任划分。</p></li><li><p><strong>属性特点</strong>：</p><ul><li><strong>不可伪造性（Unforgeability）</strong>：<br>归因功能需要确保攻击者在不知道归因密钥（Attribute Key, (ak)）的情况下，<strong>无法生成带有有效水印但不属于模型真实输出的内容</strong>。这种不可伪造性对于追责至关重要，特别是在需要证明某模型生成了有害内容时。</li><li><strong>独立性</strong>：<br>归因算法及其密钥 (ak) 是独立于检测功能的，避免了归因和检测的目标相互干扰。归因的重点在于精确性和不可伪造性，而非鲁棒性。</li><li><strong>公开性选项</strong>：<br>在一些方案中，可以公开归因密钥 (ak) 而不影响不可伪造性。例如，使用数字签名技术，可以允许任何人验证内容是否来自某模型，但无法伪造这种内容。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><strong>责任追溯</strong>：<br>如果需要对模型生成的有害内容追责，例如证明某模型输出了虚假或误导性信息，归因功能是不可或缺的。</li><li><strong>法律和伦理保障</strong>：<br>当水印方案涉及敏感内容时，归因功能可以为模型的使用者或开发者提供明确的责任界定。</li></ul></li></ol><p>对于平台来说，如果有人想诬陷某种有害内容（假设是个图片A）是使用华为的模型生成的，此时我们对图片A进行归因，如果能解出来它的密钥，则确实是华为模型生成的；否则，就断定不是华为模型生成的，所以<strong>归因的重点在于精确性和不可伪造性</strong></p><h5 id="detect-检测">Detect（检测）</h5><ol><li><p><strong>核心目标</strong>：<br><strong>检测</strong>功能的目标是确认某个内容是否包含水印，而不关心内容的具体来源。它通常被设计为<strong>鲁棒</strong>的，也就是说，即使内容经过一定程度的修改（如小幅篡改或噪声添加），检测功能仍然可以识别出水印的存在。</p></li><li><p><strong>属性特点</strong>：</p><ul><li><strong>鲁棒性（Robustness）</strong>：<br>检测功能强调在内容被轻微修改后，仍然能够识别水印的能力。这对防止简单的攻击和篡改很重要。</li><li><strong>低误报率</strong>：<br>检测需要确保尽量减少误报（非水印内容被判定为有水印）和漏报（有水印内容被判定为没有水印）。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><strong>内容筛选</strong>：<br>在大规模内容分发中，可以快速检测内容是否带有水印，从而决定是否进一步处理。</li><li><strong>版权保护</strong>：<br>用于检查内容是否属于某水印模型的输出，但通常不追溯具体的生成责任。</li></ul></li></ol><h5 id="归因与检测的主要区别">归因与检测的主要区别</h5><table><thead><tr><th>特性</th><th><strong>Attribute（归因）</strong></th><th><strong>Detect（检测）</strong></th></tr></thead><tbody><tr><td><strong>核心目标</strong></td><td>确定内容来源，追溯责任</td><td>确认内容是否带有水印</td></tr><tr><td><strong>安全性需求</strong></td><td>强调不可伪造性</td><td>强调鲁棒性</td></tr><tr><td><strong>密钥的使用</strong></td><td>使用归因密钥（Attribute Key, (ak)）</td><td>使用检测密钥（Detect Key, (dtk)）</td></tr><tr><td><strong>是否允许公开密钥</strong></td><td>可以公开 (ak)，前提是保障不可伪造性</td><td>公开 (dtk) 可能影响鲁棒性</td></tr><tr><td><strong>典型应用场景</strong></td><td>内容归因、责任划分、法律证明</td><td>快速检测、筛选内容、版权保护</td></tr></tbody></table><p>归因功能（Attribute）是水印方案中实现<strong>不可伪造性</strong>的关键部分，旨在提供一种可靠的方法来<strong>追溯</strong>内容来源并划分生成责任。它的独特性在于，能够确保即使攻击者有意尝试，也无法伪造有效的归因内容。这种特性使归因功能在敏感场景（如法律诉讼、内容归责）中极为重要。与之相对，检测功能更偏向于应用层面的水印存在性验证，其核心是鲁棒性和效率。</p><p>我们得明确水印的目标，溯源本质是一种归因，要强调不可伪造性</p><p>1、有人用华为模型生成有害内容，需要溯源到用户，需要“归因”，此时不需要有强鲁棒性</p><p>2、有人想用有害内容诬陷华为，需要不可伪造性来证明，该内容不是华为生成的，需要“归因”，此时不需要有强鲁棒性</p><p>3、如果需要判断某个内容是否是AI生成，可以用“检测”，需要有强鲁棒性</p><p>**归因（Attribute）<strong>和</strong>检测（Detect）**看似在功能上有一定重叠，但它们的目标和设计侧重点不同：</p><ol><li><p><strong>归因确实能完成检测</strong>：<br>归因功能本质上包含了“检测是否带有水印”的能力。既然它能判断某个内容是否来自特定模型，那么它自然也能判断内容是否包含水印。然而，归因强调的是<strong>不可伪造性</strong>，因此它可以牺牲一些对鲁棒性的需求。</p></li><li><p><strong>检测专注于鲁棒性</strong>：<br>检测的目标是即便内容被篡改（如添加噪声、调整格式），仍然能够识别出水印存在。这种鲁棒性使得检测功能在版权保护和内容筛选等场景中非常高效。</p></li></ol><hr><h5 id="同时满足归因和检测的需求">同时满足归因和检测的需求</h5><p>是的，可以设计一种混合方案，满足两者的需求。具体方法如下：</p><h6 id="分离密钥和算法">分离密钥和算法</h6><p>可以将归因和检测分开设计，但在水印生成时统一实现。这样在检测和归因时可以根据需求选择不同的算法和密钥：</p><ul><li><strong>归因算法与密钥（Attribute and (ak)</strong>）：<ul><li>强调不可伪造性，确保内容来源可靠。</li><li>可以设计为更严格，但允许牺牲鲁棒性。</li></ul></li><li><strong>检测算法与密钥（Detect and (dtk)</strong>）：<ul><li>强调鲁棒性，确保即使内容被修改也能检测出水印。</li><li>允许更宽松的验证条件。</li></ul></li></ul><p>通过这种设计，归因和检测可以基于同一个水印生成算法，但在实际使用时根据需求分别调用不同的功能。</p><hr><h6 id="统一的水印生成机制-分层次需求满足">统一的水印生成机制，分层次需求满足</h6><p>设计一个同时支持归因和检测的水印方案，允许在不同场景下权衡两者：</p><ol><li><p><strong>水印生成阶段</strong>：</p><ul><li>使用单一算法生成水印，水印中包含既可供检测的鲁棒部分，又包含归因所需的不可伪造部分。</li><li>例如，基于<strong>加密签名</strong>的方法，生成的水印既包含公开检测的信息，也包含只有持有私密密钥才能验证的归因信息。</li></ul></li><li><p><strong>检测阶段</strong>：</p><ul><li>使用检测密钥 (dtk) 快速验证水印是否存在。</li><li>重点在于效率和鲁棒性，适合大规模内容筛选。</li></ul></li><li><p><strong>归因阶段</strong>：</p><ul><li>使用归因密钥 (ak) 进一步验证内容来源。</li><li>重点在于不可伪造性，适合小范围高精度分析。</li></ul></li></ol><hr><h6 id="动态水印切换">动态水印切换</h6><p>现代水印算法可以根据应用场景动态选择功能。例如：</p><ul><li>在常规内容筛选中，使用鲁棒的检测算法。</li><li>当需要追溯责任时，再切换到严格的归因算法。</li></ul><p>这样的动态切换可以通过<strong>密钥分级</strong>和<strong>算法模块化</strong>实现，确保归因和检测在同一个水印系统中共存且高效。</p><hr><h6 id="小结">小结</h6><p>归因和检测虽然目标不同，但它们可以通过统一的水印生成机制、分离的密钥和算法实现共存。具体来说：</p><ul><li>检测满足效率和鲁棒性需求。</li><li>归因满足不可伪造性需求。<br>通过分层设计，可以在一个系统中同时实现归因和检测的需求，适应不同的应用场景。</li></ul><h4 id="3-5-嵌入-消息">3.5 嵌入“消息”</h4><p>指嵌入用户信息，模型信息，提示词，生成时间等这种定制化内容，类似于C2PA</p><h4 id="3-6-高效计算">3.6 高效计算</h4><p>带水印的生成过程应该施加最小的计算开销，确保在计算、内存使用和吞吐量方面，计算效率与未带水印的生成过程相当。显著的计算复杂性会阻碍现实世界的部署，使模型对实际应用不那么有吸引力。</p><p>检测、解码和归因的计算需求也应保持在最低限度。</p><h3 id="第四章节-threat-models">第四章节 （Threat Models）</h3><p>介绍了一些攻击方式</p><p>1、水印去除</p><p>2、伪造水印</p><p>攻击者试图创建被错误地分类为水印的内容，尽管没有被指定的水印方案处理，从而实现一些诬陷（参考第三章节的不可伪造性）</p><p>3、秘密信息提取</p><p>更高级的对抗目标<strong>是提取水印方案中使用的密钥</strong>。这种攻击比移除或锻造攻击要困难得多。在大多数情况下，如果攻击者成功地提取了密钥，他们可以很容易地删除或伪造水印。然而，重要的是要注意，提取密钥并不是执行删除或伪造攻击的先决条件</p><h1 id="phoneme-level-feature-discrepancies-a-key-to-detecting-sophisticated-speech-deepfakes">Phoneme-Level Feature Discrepancies: A Key to Detecting Sophisticated Speech Deepfakes</h1><p>Speech deep fakes are synthetic recordings that closely mimic a person’s speech, making it challenging to verify the authenticity of information (Tan et al. 2024)</p><p>Advancements in deep learning technologies for generating realistic speech have made it increasingly difficult to detect these forgeries with conventional methods (Zhang et al. 2024).</p><p>2024年的论文，讲音频可以模仿人类音频的风险</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1&lt;/p&gt;
&lt;h1 id=&quot;sok-watermarking-for-ai-generated-content&quot;&gt;SoK: Watermarking for AI-Generated Content&lt;/h1&gt;
&lt;h3 id=&quot;第一章节-introduction&quot;&gt;第一章节（</summary>
      
    
    
    
    <category term="AIGC" scheme="https://blog.lthero.cn/categories/AIGC/"/>
    
    
    <category term="AIGC" scheme="https://blog.lthero.cn/tags/AIGC/"/>
    
  </entry>
  
</feed>
