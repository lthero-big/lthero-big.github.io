<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lthero</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://blog.lthero.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.lthero.cn/"/>
  <updated>2022-12-22T06:21:18.710Z</updated>
  <id>https://blog.lthero.cn/</id>
  
  <author>
    <name>lthero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>局域网连接方案</title>
    <link href="https://blog.lthero.cn/2022/12/22/ConnectedDevices/"/>
    <id>https://blog.lthero.cn/2022/12/22/ConnectedDevices/</id>
    <published>2022-12-22T06:19:13.000Z</published>
    <updated>2022-12-22T06:21:18.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="局域网连接方案"><a href="#局域网连接方案" class="headerlink" title="局域网连接方案"></a>局域网连接方案</h1><blockquote><p>主路由：192.168.6.1<br>n1盒子：192.168.6.155<br>主机：192.168.6.116<br>华为路由器：192.168.8.1</p></blockquote><p>1、华为路由器使用<strong>流量卡</strong>上网</p><p>2、主路由<strong>用网线</strong>连接华为路由器。随后，主机连接<strong>主路由的wifi</strong>，进入“网络”将wan口重新连接，直到wan网ip显示为192.168.8.x【主路由外网地址】</p><p>3、n1盒子<strong>用网线</strong>连接主路由，br-lan设置192.168.6.155，dns为192.168.6.1。在n1盒子上运行passwall</p><p>4、主机<strong>用网线</strong>连接主路由，设置网关为192.168.6.155</p><p>信号较好的情况下，外网带宽为50~70Mbps，油管连接速度4w</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;局域网连接方案&quot;&gt;&lt;a href=&quot;#局域网连接方案&quot; class=&quot;headerlink&quot; title=&quot;局域网连接方案&quot;&gt;&lt;/a&gt;局域网连接方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;主路由：192.168.6.1&lt;br&gt;n1盒子：192.168.6.155</summary>
      
    
    
    
    <category term="网络" scheme="https://blog.lthero.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://blog.lthero.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>巫师3控制台代码</title>
    <link href="https://blog.lthero.cn/2022/12/14/TheWitcherConsole/"/>
    <id>https://blog.lthero.cn/2022/12/14/TheWitcherConsole/</id>
    <published>2022-12-14T13:07:29.000Z</published>
    <updated>2022-12-14T13:08:18.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="巫师3控制台代码"><a href="#巫师3控制台代码" class="headerlink" title="巫师3控制台代码"></a>巫师3控制台代码</h1><h2 id="控制台打开方式"><a href="#控制台打开方式" class="headerlink" title="控制台打开方式"></a>控制台打开方式</h2><p>1、找到游戏目录。<br>例如G:\software\steam\steamapps\common\The Witcher 3\bin\config\base<br>2、找到文件General，并且打开。<br>如果找不到的话，可以windows自带的搜索或是everyting搜索游戏名<br>然后在ConfigVersion&#x3D;2后添加语句。<br>DBGConsoleOn&#x3D;true<br>控制台就开启了，热键是”~”</p><h2 id="通则"><a href="#通则" class="headerlink" title="通则"></a>通则</h2><p>如果要添加一个物品使用<br>additem(‘物品英文名称’,数量)<br>生成一个怪物<br>spawn(‘怪物名称英文’)<br>如果不清楚英文的话，可以将游戏切换成英文进行查看，注意大小写的区分<br>控制台代码严格区分大小写，全半角</p><h2 id="传送代码："><a href="#传送代码：" class="headerlink" title="传送代码："></a>传送代码：</h2><p>ShowAllFT(1) 打开全部快速旅行点<br>不要随便使用，否则可能造成卡关等等<br>AllowFT(1) 允许随时使用路牌<br>注意AllowFT严格要求大小写，并在游戏退出后需要重新打开</p><h2 id="怪物突变诱发物"><a href="#怪物突变诱发物" class="headerlink" title="怪物突变诱发物"></a>怪物突变诱发物</h2><p>使用方式如 additem(‘Gryphon mutagen’) 注意全半角<br>Gryphon mutagen 狮鹫兽突变诱发物<br>Nightwraith mutagen 夜之妖灵突变诱发物<br>Czart mutagen 雌特怪突变诱发物<br>Wyvern mutagen 翼手龙突变诱发物<br>Troll mutagen 巨魔突变诱发物<br>Noonwraith mutagen 日间妖灵突变诱发物<br>Succubus mutagen 女夜魔突变诱发物<br>Fogling 2 mutagen 大雾妖突变诱发物<br>Fiend mutagen 恶魔突变诱发物<br>Forktail mutagen 叉尾龙突变诱发物<br>Grave Hag mutagen 墓穴女巫突变诱发物<br>Wraith mutagen 妖灵突变诱发物<br>Dao mutagen 地元素突变诱发物<br>Lamia mutagen 海克娜突变诱发物<br>Ancient Leshy mutagen 古鹿首精突变诱发物<br>Basilisk mutagen 石化蜥蜴突变诱发物<br>Werewolf mutagen 狼人突变诱发物<br>Nekker Warrior mutagen 孽鬼战士突变诱发物<br>Leshy mutagen 鹿首精怪突变诱发物<br>Katakan mutagen 卡塔卡恩突变诱发物<br>Arachas mutagen 蟹蜘蛛突变诱发物<br>Cockatrice mutagen 石化鸡蛇突变诱发物<br>Volcanic Gryphon mutagen 大狮鹫突变诱发物<br>Water Hag mutagen 沼泽巫婆突变诱发物</p><h2 id="修理工具："><a href="#修理工具：" class="headerlink" title="修理工具："></a>修理工具：</h2><p>additem(‘weapon_repair_kit_3’) 武器修理工具<br>additem(‘armor_repair_kit_3’) 护甲修理工具</p><h2 id="状态buff："><a href="#状态buff：" class="headerlink" title="状态buff："></a>状态buff：</h2><p>addabl(‘DamageBuff’) 增加200攻击力 200法印强度<br>addabl(‘ForceCriticalHits’) 100%暴击率<br>addabl(‘ConAthletic’) 1000血，100体力和更高的体力恢复率<br>addabl(‘ConImmortal’) - 99800血，100体力和更高的体力恢复率<br>(去除的话只要前缀 “addabl” 换成 “remabl”即可)</p><h2 id="常用："><a href="#常用：" class="headerlink" title="常用："></a>常用：</h2><p>addmoney(77777) 加钱 (括号里的数值自己决定，太夸张了也许会显示错误，可以适当调整)<br>removemoney(11) 减钱<br>staminaboy() Geralt耐力不减<br>resurrect() 死掉了，打这个就复活了<br>addskillpoints(99) 添加技能点数<br>addexp (1000) 增加经验值<br>setlevel(40) 设置等级数<br>levelup(5) 等级提升<br>shave 剃胡子<br>makeitrain 下雨<br>stoprain 停止下雨<br>healme 加血</p><h2 id="生活必需品："><a href="#生活必需品：" class="headerlink" title="生活必需品："></a>生活必需品：</h2><p>addbolts 添加全箭矢<br>addherbs 添加所有药草<br>addpotions 添加煎药<br>addmutagens 添加突变煎药<br>addsteelswords 添加全钢剑<br>addsteelswords2 添加全钢剑2<br>addsilverswords 添加全银剑<br>addsilverswords2 添加全银剑2<br>addcrossbows 添加全十字弓<br>addarmor 添加全护甲<br>addarmor2 添加全护甲2<br>addpants 添加全裤子<br>addboots 添加全鞋子<br>addgloves 添加全手套<br>addsets 添加全套装<br>addbooks 添加全书籍<br>addlore 添加知识<br>addlore2 添加知识2<br>addfood 添加全食物<br>adddrinks 添加全酒精<br>addupgrades 全剑部位镶嵌符文</p><h2 id="换杰洛特发型："><a href="#换杰洛特发型：" class="headerlink" title="换杰洛特发型："></a>换杰洛特发型：</h2><p>WitcherHairstyle(‘1’) 短发辫子<br>WitcherHairstyle(‘2’) 飘逸长发<br>WitcherHairstyle(‘3’) 默认发型</p><h2 id="高级马具："><a href="#高级马具：" class="headerlink" title="高级马具："></a>高级马具：</h2><p>additem(‘Toussaint horsebag’)<br>additem(‘Toussaint saddle’)<br>additem(‘Toussaint saddle 2’)<br>additem(‘Toussaint saddle 3’)<br>additem(‘Toussaint saddle 4’)<br>additem(‘Toussaint saddle 5’)<br>additem(‘Toussaint saddle 6’)<br>additem(‘Toussaint horse blinders’)<br>additem(‘Toussaint horse blinders 2’)<br>additem(‘Toussaint horse blinders 3’)<br>additem(‘Toussaint horse blinders 4’)<br>additem(‘Toussaint horse blinders 5’)<br>additem(‘Toussaint horse blinders 6’)</p><h2 id="突变诱发物："><a href="#突变诱发物：" class="headerlink" title="突变诱发物："></a>突变诱发物：</h2><p>additem(‘Greater mutagen red’,2) 大型红色突变诱发物<em>2<br>additem(‘Greater mutagen blue’,2) 大型蓝色突变诱发物</em>2<br>additem(‘Greater mutagen green’,2) 大型绿色突变诱发物*2<br>如果是弱效的话为Lesser mutagen green,严格要求大小写</p><h2 id="熊套："><a href="#熊套：" class="headerlink" title="熊套："></a>熊套：</h2><p>additem(‘Bear Pants 5’) 裤<br>additem(‘Bear Boots 5’) 鞋<br>additem(‘Bear Gloves 5’) 手<br>additem(‘Bear Armor 4’) 胸<br>additem(‘Bear School steel sword 4’) 钢剑<br>additem(‘Bear School Crossbow’) 十字弓</p><h2 id="猫套："><a href="#猫套：" class="headerlink" title="猫套："></a>猫套：</h2><p>additem(‘Lynx Pants 5’) 裤<br>additem(‘Lynx Boots 5’) 鞋<br>additem(‘Lynx Gloves 5’) 手<br>additem(‘Lynx Armor 4’) 胸<br>additem(‘Lynx School steel sword 4’) 钢剑<br>additem(‘Lynx School silver sword 4’) 银剑<br>additem(‘Lynx School Crossbow’) 十字弓</p><h2 id="狮鹫套："><a href="#狮鹫套：" class="headerlink" title="狮鹫套："></a>狮鹫套：</h2><p>additem(‘Gryphon Pants 5’) 裤<br>additem(‘Gryphon Boots 5’) 鞋<br>additem(‘Gryphon Gloves 5’) 手<br>additem(‘Gryphon Armor 4’) 胸<br>additem(‘Gryphon School steel sword 4’) 钢剑<br>additem(‘Gryphon School silver sword 4’) 银剑</p><h2 id="狼套："><a href="#狼套：" class="headerlink" title="狼套："></a>狼套：</h2><p>additem(‘Wolf Pants 5’) 裤<br>additem(‘Wolf Boots 5’) 鞋<br>additem(‘Wolf Gloves 5’) 手<br>additem(‘Wolf Armor 4’) 胸<br>additem(‘Wolf School steel sword 4’) 钢剑<br>additem(‘Wolf School silver sword 4’) 银剑</p><h2 id="飞狮套："><a href="#飞狮套：" class="headerlink" title="飞狮套："></a>飞狮套：</h2><p>additem(‘Red Wolf Pants 2’) 裤<br>additem(‘Red Wolf Gloves 2’) 手<br>additem(‘Red Wolf Boots 2’) 鞋<br>additem(‘Red Wolf Armor 2’) 胸<br>additem(‘Red Wolf School steel sword 2’) 钢剑<br>additem(‘Red Wolf School silver sword 2’) 银剑</p><h2 id="毒蛇套："><a href="#毒蛇套：" class="headerlink" title="毒蛇套："></a>毒蛇套：</h2><p>additem(‘EP1 Witcher Armor’) 胸<br>additem(‘EP1 Witcher Gloves’) 手<br>additem(‘EP1 Witcher Boots’) 鞋<br>additem(‘EP1 Witcher Pants’) 裤<br>additem(‘EP1 Viper School silver sword’) 银剑<br>additem(‘EP1 Viper School steel sword’) 钢剑</p><h2 id="陶森特骑士钢剑-："><a href="#陶森特骑士钢剑-：" class="headerlink" title="陶森特骑士钢剑 ："></a>陶森特骑士钢剑 ：</h2><p>additem(‘Knights steel sword 3’) 300穿刺+昆恩+双爆+燃烧</p><h2 id="陶森特骑士比武大赛套装："><a href="#陶森特骑士比武大赛套装：" class="headerlink" title="陶森特骑士比武大赛套装："></a>陶森特骑士比武大赛套装：</h2><p>additem(‘Knight Geralt A Armor 3’) 胸<br>additem(‘Knight Geralt A Gloves 3’) 手<br>additem(‘Knight Geralt A Pants 3’) 裤<br>additem(‘Knight Geralt A Boots 3’) 鞋</p><h2 id="镜子大师全套奖励："><a href="#镜子大师全套奖励：" class="headerlink" title="镜子大师全套奖励："></a>镜子大师全套奖励：</h2><p>additem(‘Devil Saddle’)悲痛马衣，马永不惊慌，并随机混乱一名敌人<br>additem (‘Soltis Vodka’) 无底酒瓶，无限烈酒<br>additem (Cornucopia) 富饶之角，无限食物</p><h2 id="石之心神偷套装："><a href="#石之心神偷套装：" class="headerlink" title="石之心神偷套装："></a>石之心神偷套装：</h2><p>additem(‘Thief Armor’) 新月盔甲<br>additem(‘Thief Gloves’) 新月手套<br>additem(‘Thief Pants’) 新月裤子<br>additem(‘Thief Boots’) 新月靴子</p><h2 id="能混入人群的驴耳头套-可以分解为驴耳朵和眼镜-："><a href="#能混入人群的驴耳头套-可以分解为驴耳朵和眼镜-：" class="headerlink" title="能混入人群的驴耳头套(可以分解为驴耳朵和眼镜)："></a>能混入人群的驴耳头套(可以分解为驴耳朵和眼镜)：</h2><p>additem(‘Concealment Kit’)</p><h2 id="挂画装饰品代码："><a href="#挂画装饰品代码：" class="headerlink" title="挂画装饰品代码："></a>挂画装饰品代码：</h2><p>(风景类)<br>additem(‘mq7024_gen_painting_landscape_b’)<br>additem(‘mq7024_painting_prologue_village’)<br>additem(‘mq7024_palace_painting’)<br>additem(‘mq7024_gen_painting_landscape_c’)<br>additem(‘mq7024_painting_battlefield’)<br>additem(‘mq7024_gen_painting_landscape_a’)<br>additem(‘mq7024_painting_harbour’)<br>additem(‘mq7024_painting_stilllife’)<br>additem(‘q603_auctioned_painting’)</p><p>(人像类)<br>additem(‘mq7024_gen_painting_portrait_a’)<br>additem(‘mq7024_painting_ciri_portrait’)<br>additem(‘mq7024_painting_emhyr_portrait’)<br>additem(‘q305_painting_of_hemmelfart’)<br>additem(‘mq7009_painting_pose1_grif’) (裸体白狼——骑马)<br>additem(‘mq7009_painting_pose2_grif’) (裸体白狼——英雄)<br>additem(‘mq7009_painting_pose3_grif’) (裸体白狼——躺卧)</p><p>(盾牌)<br>additem(‘sq701_geralt_shield’)<br>additem(‘sq701_ravix_shield’)</p><h2 id="独特武器："><a href="#独特武器：" class="headerlink" title="独特武器："></a>独特武器：</h2><p>additem(‘Aerondight EP2’) 湖女之剑-可跟角色升级的极品银剑(就是连击十下可以永久提升伤害，最佳是永远跟同等猎魔剑攻击一致或更高！)<br>additem(‘q704 vampire silver sword’) 坎塔娜(吸血鬼之剑)</p><h2 id="大赛奖励："><a href="#大赛奖励：" class="headerlink" title="大赛奖励："></a>大赛奖励：</h2><p>additem(‘Geralt of Rivia Crossbow’) 杰洛特的十字弓</p><h2 id="吸血鬼套-两套一红一黑-："><a href="#吸血鬼套-两套一红一黑-：" class="headerlink" title="吸血鬼套(两套一红一黑)："></a>吸血鬼套(两套一红一黑)：</h2><p>Blood and Wine Vampire Set Item IDs<br>红色<br>additem(‘q704_vampire_mask’) 面具<br>additem(‘q704_vampire_armor’) 胸<br>additem(‘q704_vampire_gloves’) 手<br>additem(‘q704_vampire_pants’) 裤<br>additem(‘q704_vampire_boots’) 鞋<br>additem(‘q704 vampire steel sword’) 钢剑</p><p>黑色<br>additem(‘q702_vampire_boots’) 鞋<br>additem(‘q702_vampire_pants’) 裤<br>additem(‘q702_vampire_gloves’) 手<br>additem(‘q702_vampire_armor’) 胸<br>additem(‘q702_vampire_mask’) 面具<br>additem(‘q702 vampire steel sword’) 钢剑</p><h2 id="Bang！炸药："><a href="#Bang！炸药：" class="headerlink" title="Bang！炸药："></a>Bang！炸药：</h2><p>additem(‘White Frost 3’) 高等北风<br>additem(‘Grapeshot 3’) 高等蜂窝<br>additem(‘Silver Dust Bomb 3’) 高等月之尘(不能变形)<br>additem(‘Samum 3’) 高等樊风<br>additem(‘Dragons Dream 3’) 高等龙之梦<br>additem(‘Devils Puffball 3’) 高等恶魔之尘<br>additem(‘Dancing Star 3’) 高等舞动之星<br>additem(‘Dwimeritium Bomb 3’) 高等反魔法金属炸弹</p><h2 id="染料："><a href="#染料：" class="headerlink" title="染料："></a>染料：</h2><p>additem(‘Dye Red’,100) 红色护甲染剂<br>additem(‘Dye Blue’,100) 蓝色护甲染剂<br>additem(‘Dye Gray’,100) 灰色护甲染剂<br>additem(‘Dye Black’,100) 黑色护甲染剂<br>additem(‘Dye White’,100) 白色护甲染剂<br>additem(‘Dye Green’,100) 绿色护甲染剂<br>additem(‘Dye Brown’,100) 棕色护甲染剂<br>additem(‘Dye Purple’,100) 紫色护甲染剂<br>additem(‘Dye Yellow’,100) 黄色护甲染剂<br>additem(‘Dye Pink’,100) 粉红色护甲染剂<br>additem(‘Dye Orange’,100) 橘色护甲染剂<br>additem(‘Dye Turquoise’,100) 蓝绿色护甲染剂<br>additem(‘Dye Default’,100) 染色去除剂</p><h2 id="各种可获得的剑名称及代码："><a href="#各种可获得的剑名称及代码：" class="headerlink" title="各种可获得的剑名称及代码："></a>各种可获得的剑名称及代码：</h2><p>代码   中文名</p><p>additem(‘Abarad’)  冬之刃(非领主送的)<br>additem(‘Addandeith’)  艾丹·戴兹<br>additem(‘Aerondight’)  毛格林<br>additem(‘Anathema’)  咒逐<br>additem(‘Angivare’)  信鸽<br>additem(‘Anth’)   安司<br>additem(‘Arainne’)  艾林尼<br>additem(‘Arbitrator’)  仲裁者<br>additem(‘Ardaenye’)  阿德尼之剑<br>additem(‘Ashrune’)  灰符<br>additem(‘Azurewrath’)  阿祖烈之怒<br>additem(‘Barbersurgeon’) 理发医师<br>additem(‘Beannshie’)  女妖<br>additem(‘Blackunicorn’)  黑独角兽<br>additem(‘Bladeofys’)  Y字之刃<br>additem(‘Bloedeaedd’)  布洛德·艾德<br>additem(‘Bloodsword’)  血剑<br>additem(‘Breathofthenorth’) 北方气息<br>additem(‘Caerme’)  凯而米<br>additem(‘Caroline’)  卡洛琳<br>additem(‘Cheesecutter’)  酪奶剑<br>additem(‘Cleaver’)  屠夫披肩<br>additem(‘Dancer’)  舞者<br>additem(‘Daystar’)  白昼之星<br>additem(‘Deargdeith’)  迪尔格戴斯<br>additem(‘Deireadh’)  戴尔瑞<br>additem(‘Deithwen’)  戴斯文<br>additem(‘Devine’)  代文<br>additem(‘Dyaebl’)  迪亚布罗<br>additem(‘Fate’)   命运<br>additem(‘Forgottenvransword’)  忘却的弗朗剑<br>additem(‘Gloryofthenorth’)  北方荣耀<br>additem(‘Gwestog’)  诡斯托格<br>additem(‘Gwyhyr’)  古威希尔<br>additem(‘Gynvael’)  吉纳维尔<br>additem(‘Gynvaelaedd’)  吉纳维尔·艾德<br>additem(‘Harpy’)  人面妖鸟<br>additem(‘Harvall’)  哈维尔剑<br>additem(‘Havcaaren’)  私袅<br>additem(‘Headtaker’)  人头猎人<br>additem(‘Hjalmar_Short_Steel_Sword’)  哈尔玛的钢剑<br>additem(‘Inis’)   伊尼斯<br>additem(‘Karabela’)  卡拉贝拉<br>additem(‘Loathen’)  洛森<br>additem(‘Longclaw’)  长爪<br>additem(‘Lune’)   月牙<br>additem(‘Moonblade’)  月刃<br>additem(‘Mourner’)  哀悼者<br>additem(‘Naevdeseidhe’)  耐伏德·西迪<br>additem(‘Negotiator’)  谈判者<br>additem(‘Princessxenthiasword’)  杰西亚公主之剑<br>additem(‘Reachofthedamned’)  诅咒之地<br>additem(‘Robustswordofdolblathanna’)  高等多尔·布雷坦纳之剑<br>additem(‘Roseofaelirenn’) 夏拉韦玫瑰<br>additem(‘Tlareg’)  特拉雷格<br>additem(‘Torlara’)  托尔劳拉<br>additem(‘Torzirael’)  托尔吉薇艾儿<br>additem(‘Ultimatum’)  最后通牒<br>additem(‘Virgin’)  圣女<br>additem(‘Vynbleidd’)  希望<br>additem(‘Weeper’)  哀泣者<br>additem(‘WitcherSilverWolf’) 布雷伊德<br>additem(‘Wolf’)   狼<br>additem(‘Zerrikanterment’) 龙之剑<br>additem(‘q402 Skellige sword 3’) 冬之刃<br>additem(‘Zireael Sword’)  吉薇艾儿<br>additem(‘q505 crafted sword’)  吉薇艾儿(银，一级)<br>additem(‘mq1058_cat_school_sword’)  dlc里面猫派猎魔人送的剑，与白狼等级相关<br>additem (‘Olgierd Sabre’) 卡拉神刀</p><h2 id="药水"><a href="#药水" class="headerlink" title="药水"></a>药水</h2><p>additem(‘Thunderbolt 3 高等雷霆(加35攻击力，可使用5次，暗金)</p><p>additem(‘White Raffards Decoction 3 高等白色拉发达煎药(可恢复全部生命)</p><p>additem(‘White Honey 3 高等白蜂蜜(去除毒性)</p><p>additem(‘Cat 3 高等猫(夜视，免疫催眠)</p><p>additem(‘Maribor Forest 3 高等马里波森林(秒回肾上腺素0.15)</p><p>additem(‘Petris Philtre 3 高等派翠的魔药(加25法强)</p><p>additem(‘Blizzard 3 高等暴风雪(杀人子弹时间)</p><p>additem(‘Swallow 3 高等燕子(战时回血秒80)</p><p>additem(‘Tawny Owl 3 高等黄褐色猫头鹰(秒回10体力)</p><p>additem(‘Black Blood 3 高等黑血(反伤吸血鬼)</p><p>additem(‘Full Moon 3 高等满月(限时加最大生命)</p><p>additem(‘Golden Oriole 3 高等金鹫(毒素不掉血反而回血)</p><p>additem(‘Killer Whale 1 杀人鲸(水底气息增加50%)</p><p>additem(‘Recipe for Bear Pheromone Potion 1 熊费洛蒙图纸</p><p>additem(‘Recipe for Drowner Pheromone Potion 1 水鬼费洛蒙图纸</p><p>additem(‘Recipe for Nekker Pheromone Potion 1 孽鬼费洛蒙图纸</p><p>additem(‘White Frost 3 高等北风</p><p>additem(‘Grapeshot 3 高等蜂窝</p><p>additem(‘Silver Dust Bomb 3 高等月之尘(不能变形)</p><p>additem(‘Samum 3 高等樊风</p><p>additem(‘Dragons Dream 3 高等龙之梦</p><p>additem(‘Devils Puffball 3 高等恶魔之尘</p><p>additem(‘Dancing Star 3 高等舞动之星</p><p>additem(‘Dwimeritium Bomb 3 高等反魔法金属炸弹</p><h2 id="符文-Runes"><a href="#符文-Runes" class="headerlink" title="符文 Runes"></a>符文 Runes</h2><p>流血 additem(‘Rune devana greater’)</p><p>燃烧 additem(‘Rune dazhbog greater’)</p><p>冰冻 additem(‘Rune zoria greater’)</p><p>昏迷 additem(‘Rune triglav greater’)</p><p>中毒 additem(‘Rune morana greater’)</p><p>失衡 additem(‘Rune stribog greater’)</p><p>护甲穿刺 additem(‘Rune svarog greater’)</p><p>攻击力 additem(‘Rune elemental greater’)</p><p>肾上腺素 additem(‘Rune perun greater’)</p><p>法印强度 additem(‘Rune veles greater’)</p><p>镶嵌 Glyphs</p><p>阿尔德 additem(‘Glyph aard greater’)</p><p>亚克席 additem(‘Glyph axii greater’)</p><p>伊格尼 additem(‘Glyph igni greater’)</p><p>昆恩 additem(‘Glyph quen greater’)</p><p>亚登 additem(‘Glyph yrden greater’)</p><h2 id="全染色剂代码"><a href="#全染色剂代码" class="headerlink" title="全染色剂代码"></a>全染色剂代码</h2><p>additem(‘Dye Solution’,100) 染剂溶剂 (工艺栏)</p><p>additem(‘Dye Default’,100) 染色去除剂</p><p>additem(‘Dye Red’,100) 红色护甲染剂</p><p>additem(‘Dye Blue’,100) 蓝色护甲染剂</p><p>additem(‘Dye Gray’,100) 灰色护甲染剂</p><p>additem(‘Dye Black’,100) 黑色护甲染剂</p><p>additem(‘Dye White’,100) 白色护甲染剂</p><p>additem(‘Dye Green’,100) 绿色护甲染剂</p><p>additem(‘Dye Brown’,100) 棕色护甲染剂</p><p>additem(‘Dye Purple’,100) 紫色护甲染剂</p><p>additem(‘Dye Yellow’,100) 黄色护甲染剂</p><p>additem(‘Dye Pink’,100) 粉红色护甲染剂</p><p>additem(‘Dye Orange’,100) 橘色护甲染剂</p><p>additem(‘Dye Turquoise’,100) 蓝绿色护甲染剂</p><p>一些比较难得的材料</p><p>additem(‘Quebrith 硫磺</p><p>additem(‘Recipe for Quebrith 硫磺图纸</p><p>additem(‘Hydragenum 水银</p><p>additem(‘Albedo 净化剂</p><p>additem(‘Aether 以太</p><p>additem(‘White Gull 1 白海鸥</p><p>additem(‘Ekimma epidermis’,1) 血魔皮</p><p>additem(‘Rotfiend blood’,50) 腐食魔血</p><p>additem(‘Greater Rotfiend blood’,50) 大腐食魔血</p><p>additem(‘Cockatrice egg 石化鸡蛇蛋</p><p>additem(‘Cockatrice maw 石化鸡蛇胃</p><p>additem(‘Erynie eye 艾琳尼亚眼</p><p>additem(‘Nekker warrior liver 孽鬼战士的肝</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如何使用带2个符文技能的Ciri。</p><p>replaceplayer(Ciri) 后输入</p><p>addabl(CiriBlink) 解锁蓄力无敌斩</p><p>addabl(CiriCharge) 解锁快速重斩</p><p>additem(q403_ciri_meteor) ciri的火陨石</p><p>addabl(Ciri_Q111) 解锁2500血 600攻击力的ciri</p><p>replaceplayer(‘Ciri’) - play with Ciri 使用Ciri希里如要恢复replaceplayer(‘geralt’)</p><p>能够调用到脚本的其它角色名 Avallach，Nithral，Popiel，Baron，Kid，Ciri_naked，Ciri_wounded(能调用不代表可以使用，多数会导致CTD)</p><p>appearance 换装，可用于spwan生成角色。</p><p>例如： appearance(yennefer_naked) 果体叶奈法 可用模型参考 换装模型</p><p>ps. _<em>是2个</em> ciri的换装必须用spawn(‘cililla’)</p><p>addabl() 添加技能，可以直接调用很多功能。具体技能名参照这个文件()这只是直接调用游戏内设定好的技能设定值。</p><p>addabl(‘DamageBuff’) 增加200攻击力 200法印强度</p><p>addabl(‘ForceCriticalHits’) 100%暴击率</p><p>addabl(‘ConAthletic’) 1000血，100体力和更高的体力恢复率</p><p>addabl(‘ConImmortal’) - 99800血，100体力和更高的体力恢复率</p><p>addabl(‘StatsRangedSuperLame’) - i 增加瞄准时的子弹时间可以不升炸弹和十字弓技能了</p><p>UnlockAllAchievements 解锁所有成就 steam正版测试有效，大家慎用</p><p>witchcraft 注意：此命令会给你每样物品各一个，会导致游戏在那卡个几分钟</p><p>addmoney(数字) 加钱(数量)，十分实用的一个秘籍，在瓶子哥下岗后，用这个调钱吧。。例如addmoney(1000)就是加1000</p><p>removemoney(11) 减钱(数量)</p><p>eatapple() 吃苹果?</p><p>god() 上帝模式</p><p>god() off关闭上帝模式</p><p>PS:上帝模式就是锁血，不会达到whosyourdaddy那种一击必杀的效果，这个锁血会带到存档里，不想用的时候请关闭</p><p>god2() 上帝模式2档…此模式下你还是会受到伤害，但是你卡1滴血就是死不了</p><p>god3() 上帝模式3档….暂时未知有何区别</p><p>learnskill(‘sword_s10’) 学习技能(技能id)</p><p>testpause() 测试暂停?</p><p>testunpause() 测试反暂停?</p><p>likeaboss() 像个boss?</p><p>spawnenemy() 或spawn() 生成敌人或生物 所有可生成物的名称请参照 各类生成物名称(点击下载) 举例：眼前100只猫 spawn(‘cat’,100)</p><p>ShowAllFT(1) 打开全部快速旅行点就是路牌</p><p>AllowFT(1) 允许你随地使用快速旅行，类似老滚，节省时间必用，但玩着游戏不是都是来看风景妹子的吗</p><p>ShowKnownPins(1) 显示已知?地点，但是事件还是要你自己去触发</p><p>ShowPins(1) 显示地图上所有?地点</p><p>activateAllGlossaryCharacters() 解锁字典里所有的角色</p><p>activateAllGlossaryBeastiary 解锁字典里所有的怪物</p><p>staminaboy() Geralt耐力不减</p><p>resurrect() 死掉了，打这个就复活了</p><p>spawnBoatAndMount() 生成一条船并且坐在上面，最好水上用</p><p>Cat(1) 代替烦人的猫眼药剂，里面数值1是开，0是关</p><p>addskillpoints() 添加技能点数(数值)</p><p>addexp (1000) 增加经验值(数值)</p><p>setlevel() 设置等级数</p><p>levelup() 等级提升</p><p>cleardevelop 注意：此命令会重置等级为1级，并装备最初装备</p><p>shave 剃胡子</p><p>setbeard(1) 长胡子</p><p>WitcherHairstyle(‘1’) 发型1</p><p>WitcherHairstyle(‘2’) 发型2</p><p>WitcherHairstyle(‘3’) 发型3</p><p>settattoo(1) 巫师2宿醉任务奖励蓝色纹身1打开、0关闭</p><p>staminapony 蘿蔔(葡萄)无限体力</p><p>instantMount(‘horse’) 立刻上马</p><p>winGwint(122) 昆特牌胜利?</p><p>addgwintcards 快速添加全套牌</p><p>makeitrain 下雨</p><p>stoprain 停止下雨</p><p>Usage: xy(posX,posY)posX and posY are the coordinates you want to teleport to.I found some coordinates in the startup.bundle file (game&#x2F;fast_travel.csv)Tip: active godmode to avoid falldamage after teleportation (god())</p><p>使用xy坐标来传送，传送坐标具体在startup.bundle file (game&#x2F;fast_travel.csv)内，注意开启无敌模式来防止掉落摔死</p><p>Changeweather(WT_Clear) - you can find a list of the available weather in startup.bundle file (&#x2F;engine&#x2F;environments&#x2F;weather_YOURREGION.csv) e.g. snow in novigrad: WT_Snow</p><p>变更天气 天气代码参照 (&#x2F;engine&#x2F;environments&#x2F;weather_YOURREGION.csv)</p><p>例如诺维嘉德下雪：WT_Snow 详细天气代码参见： 天气代码(点击下载，额，暂无文件)</p><p>settime(TIME) 设置当前时间</p><p>healme() - you get full health 加满血</p><p>secretgwint() - starts gwint game 开始打牌</p><h2 id="以下是快速增加一些物品"><a href="#以下是快速增加一些物品" class="headerlink" title="以下是快速增加一些物品"></a>以下是快速增加一些物品</h2><p>AddAllThMaps 3个选派的所有藏宝图</p><p>addbolts 添加全箭矢</p><p>addcraft 添加全工艺品?未确认</p><p>addsteelswords 添加全钢剑</p><p>addsteelswords2 添加全钢剑2</p><p>addwolfdlc 添加狼dlc</p><p>addsilverswords 添加全银剑</p><p>addsilverswords2 添加全银剑2</p><p>addcrossbows 添加全十字弓</p><p>addarmor 添加全护甲</p><p>addarmor2 添加全护甲2</p><p>addpants 添加全裤子</p><p>addboots 添加全鞋子</p><p>addgloves 添加全手套</p><p>addsets 添加全套装</p><p>addbooks 添加全书籍</p><p>addlore 添加知识</p><p>addlore2 添加知识2</p><p>addfood 添加全食物</p><p>adddrinks 添加全酒精</p><p>addtrophies 添加全战利品</p><p>addmiscaddhorseitems 马的物品</p><p>addupgrades 全剑部位镶嵌符文</p><p>addcraftingingre 全打造矿物</p><p>addCraftingItem 全打造材料</p><h2 id="图纸类"><a href="#图纸类" class="headerlink" title="图纸类"></a>图纸类</h2><p>learnallschematics 学会所有打造图纸</p><p>addcraftedsteel 铁图纸</p><p>addcraftedsilver 银图纸</p><p>addcraftedsteelrelic 旧铁图纸</p><p>addcraftedsilverrelic 旧银图纸</p><p>addcraftedranged 范围图纸</p><p>addcraftedboots 鞋子图纸</p><h2 id="蓝图类"><a href="#蓝图类" class="headerlink" title="蓝图类"></a>蓝图类</h2><p>addschematicsboots 获得鞋子蓝图</p><p>addschematicspants 获得裤子蓝图</p><p>addschematicsgloves 获得手套蓝图</p><p>addschematicsarmor 获得盔甲蓝图</p><p>addschematicscomponents 获得组件蓝图</p><p>addschematicsupgrades 获得升级蓝图</p><p>addschematicsbolts 获得螺栓蓝图</p><h2 id="药剂配方类"><a href="#药剂配方类" class="headerlink" title="药剂配方类"></a>药剂配方类</h2><p>addmutagens 所有突变药剂</p><p>addmutageningredients 获得所有种类突变物</p><p>addmutagenrecipes 学会所有煎药的配方</p><p>addrecipesoils 学会所有剑油的配方</p><p>addrecipesbombs 学会所有炸弹配方</p><p>addrecipespotions 学会所有魔药配方</p><p>addrecipespotions2 学会所有高级魔药配方</p><p>addherbs 添加所有药草</p><p>addkeys 所有钥匙</p><p>addvaluables 所有贵重物</p><p>additem(‘gwint_card_eredin_gold’, 1) 添加物品(物品id)</p><p>小技巧: 添加多数量物品时 例如洗点药 additem(‘Clearing Potion’,20) 这样就是20瓶一次添 物品名区分大小写 必须完全一致</p><p>additemfood 所有食物</p><p>additemalchemy 所有炼金术</p><p>additemcrafting 所有艺术品</p><p>additemleather 所有皮</p><p>additemmetals 所有矿物</p><p>additemrunesupgrades 所有符文</p><p>additemmonstrous 所有怪物材料</p><p>additemsprecious 所有贵重物品</p><p>addjunk 所有垃圾</p><p>addjunk2 所有垃圾2</p><p>addquestitems 任务物品</p><p>addquestitems2 任务物品2</p><p>addquestitems3 任务物品3</p><p>addtreasurehuntitems 宝物猎人物品</p><p>addcharacterdecorations 个性装饰</p><p>addmutageningredients 添加所有种类突变物</p><p>addupgrades 全部位镶嵌符文</p><p>adddrinks 添加全酒精</p><p>addbolts 添加全箭矢</p><p>addcrossbows 添加全十字弓</p><p>addherbs 添加所有药草</p><p>addmutagens 添加所有煎药</p><p>addmutagenrecipes 学会所有煎药的配方</p><p>addrecipesoils 学会所有剑油的配方</p><p>addrecipesbombs 学会所有炸弹配方</p><p>addrecipespotions 学会所有魔药配方</p><p>addrecipespotions2 学会所有高级魔药配方</p><h2 id="生成生物"><a href="#生成生物" class="headerlink" title="生成生物"></a>生成生物</h2><p>spawn(‘Name’,#number)</p><p>spawn(‘succubus’) 1级法师</p><p>spawn(‘witcher’) 1级无名</p><p>spawn(‘vesemir’) 维瑟米尔</p><p>spawn(‘yennefer’) 叶奈法 不显示名 不能聊天</p><p>spawn(‘triss’) 特莉丝 不显示名 不能聊天</p><p>spawn(‘keira’) 凯拉 不显示名 不能聊天</p><p>spawn(‘grenn’) 葛澜 7级</p><p>spawn(‘cirilla’) 希里</p><p>spawn(‘zoltan’) 卓尔坦</p><p>spawn(‘sorceress’) 反派 叶奈法 1级</p><p>spawn(‘witch1’) 呢喃婆 28级</p><p>spawn(‘witch_1’) 呢喃婆 28级</p><p>spawn(‘_quest__witch_1’) 呢喃婆 28级</p><p>spawn(‘witch2’) 煮婆 28级</p><p>spawn(‘witch_2’) 煮婆 28级</p><p>spawn(‘_quest__witch_2’) 煮婆 28级</p><p>spawn(‘witch3’) 织婆 28级</p><p>spawn(‘witch_3’) 织婆 28级</p><p>spawn(‘witch_q105’) 织婆 28级 不死</p><p>spawn(‘_quest__witch_3’) 织婆 28级</p><p>spawn(‘eredin’) 艾瑞汀 30级</p><p>spawn(‘imlerith’) 艾瑞汀手下 26级</p><p>spawn(‘caranthir’) 艾瑞汀手下 26级</p><p>spawn(‘wildhunt_mage’) 狂猎法师 1级</p><p>spawn(‘denied_area’) 狂猎士兵 1级</p><p>spawn(‘wildhunt_sword’) 狂猎士兵 1级</p><p>spawn(‘wild_hunt_sword’) 狂猎士兵 1级</p><p>spawn(‘wildhunt_axe’) 狂猎士兵 1级</p><p>spawn(‘wild_hunt_axe’) 狂猎士兵 1级</p><p>spawn(‘wildhunt_minion_lvl1’) 狂猎之犬 4级</p><p>spawn(‘wildhunt_minion’) 狂猎之犬 27级</p><p>spawn(‘wildhunt_minion_lvl2’) 狂猎之犬 27级</p><p>spawn(‘wildhunt_minion_mh’) 狂猎之犬 37级</p><p>spawn(‘wild_dog’) 野狗 1级</p><p>spawn(‘wild_dog_lvl1’) 野狗 1级</p><p>spawn(‘wolf_lvl1__summon_were’) 狼 1级</p><p>spawn(‘wolf’) 狼 5级</p><p>spawn(‘wolf_lvl1’) 狼 5级</p><p>spawn(‘wolf_alpha’) 座狼 8级</p><p>spawn(‘wolf_lvl2__alpha’) 座狼 8级</p><p>spawn(‘wolf_white’) 白狼 15级</p><p>spawn(‘wolf_white_lvl2’) 白狼 15级</p><p>spawn(‘wolf_white_lvl3__alpha’) 白狼 15级</p><p>spawn(‘wolf_lvl1__summon’) 狼 22级</p><p>spawn(‘_quest__bear_grizzly_honey’) 熊 1级</p><p>spawn(‘bear_black’) 熊 6级</p><p>spawn(‘bear_lvl1__black’) 熊 6级</p><p>spawn(‘bear_berserker_lvl1’) 熊 11级</p><p>spawn(‘bear_grizzly’) 熊 12级</p><p>spawn(‘grizzly’) 熊 12级</p><p>spawn(‘bear_lvl2__grizzly’) 熊 12级</p><p>spawn(‘bear’) 熊 16级</p><p>spawn(‘bear_white’) 熊 16级</p><p>spawn(‘bear_berserker’) 熊 16级</p><p>spawn(‘bear_lvl3__white’) 熊 16级</p><p>spawn(‘_quest__werewolf’) 狼人 5级</p><p>spawn(‘werewolf_lvl1’) 狼人 5级</p><p>spawn(‘warewolf’) 狼人 17级</p><p>spawn(‘werewolf’) 狼人 17级</p><p>spawn(‘lycanthrope’) 狼人 17级</p><p>spawn(‘lycan’) 狼人 17级</p><p>spawn(‘werewolf_lvl2’) 狼人 17级</p><p>spawn(‘werewolf_lvl3__lycan’) 狼人 17级</p><p>spawn(‘werewolf_lvl4__lycan’) 狼人 25级</p><p>spawn(‘drowner’) 水鬼 4级</p><p>spawn(‘drowner_lvl1’) 水鬼 4级</p><p>spawn(‘drowner_lvl2’) 水鬼 9级</p><p>spawn(‘drowner_lvl3’) 水鬼 15级</p><p>spawn(‘ddead’) 水鬼 18级</p><p>spawn(‘drowner_lvl4__dead’) 水鬼 18级</p><p>spawn(‘nekker’) 孽鬼 6级</p><p>spawn(‘nekker_lvl1’) 孽鬼 6级</p><p>spawn(‘nekker_lvl2’) 孽鬼 8级</p><p>spawn(‘nekker_lvl3__warrior’) 孽鬼战士 12级</p><p>spawn(‘nekker_warrior’) 孽鬼战士 12级</p><p>spawn(‘nekker_mh__warrior’) 孽鬼战士 15级</p><p>spawn(‘ghoul_lesser’) 食尸鬼 2级</p><p>spawn(‘ghoul_lvl1’) 食尸鬼 2级</p><p>spawn(‘ghoul’) 食尸鬼 9级</p><p>spawn(‘ghoul_lvl2’) 食尸鬼 9级</p><p>spawn(‘alghoul’) 巨食尸鬼 14级</p><p>spawn(‘alghoul_lvl1’) 巨食尸鬼 14级</p><p>spawn(‘ghoul_lvl3’) 食尸鬼 15级</p><p>spawn(‘alghoul_lvl2’) 巨食尸鬼 17级</p><p>spawn(‘alghoul_lvl3’) 巨食尸鬼 21级</p><p>spawn(‘alghoul_mh’) 巨食尸鬼 25级</p><p>spawn(‘gargoyle’) 石像鬼 13级</p><p>spawn(‘gargoyle_lvl1’) 石像鬼 13级</p><p>spawn(‘rotfiend_lvl1’) 腐食魔 6级</p><p>spawn(‘rotfiend’) 腐食魔 6级</p><p>spawn(‘rotfiend_lvl2’) 贪食者 13级</p><p>spawn(‘rotfiend_large’) 贪食都 13级</p><p>spawn(‘fogling_lvl1__doppelganger’) 小雾妖 0级</p><p>spawn(‘_quest__fogling’) 小雾妖 1级</p><p>spawn(‘fogling’) 小雾妖 4级</p><p>spawn(‘fogling_lvl1’) 小雾妖 4级</p><p>spawn(‘fogling_lvl2’) 小雾妖 10级</p><p>spawn(‘fogling_lvl3__willowisp’) 小雾妖 19级</p><p>spawn(‘fogling_mh’) 小雾妖 29级</p><p>spawn(‘wraith’) 妖灵 7级</p><p>spawn(‘wraith_lvl1’) 妖灵 7级</p><p>spawn(‘wraith_mh’) 妖灵 24级</p><p>spawn(‘pesta’) 女瘟妖 1级</p><p>spawn(‘_quest__noonwright_pesta’) 女瘟妖 1级</p><p>spawn(‘noonwraith_lvl1__doppelganger’) 日间妖灵 1级</p><p>spawn(‘noonwraith’) 日间妖灵 15级</p><p>spawn(‘noonwraith_lvl1’) 日间妖灵 15级</p><p>spawn(‘noonwraith_mh’) 日间妖灵 26级</p><p>spawn(‘nightwraith_lvl1__doppelganger’) 夜之妖灵 1级</p><p>spawn(‘nightwraith’) 夜之妖灵 15级</p><p>spawn(‘nightwraith_lvl1’) 夜之妖灵 15级</p><p>spawn(‘nightwraith_mh’) 夜之妖灵 34级</p><p>spawn(‘wight’) 墓穴女巫 28级</p><p>spawn(‘gravehag’) 墓穴女巫 28级</p><p>spawn(‘hag_grave_lvl1’) 墓穴女巫 28级</p><p>spawn(‘hag_grave__mh’) 墓穴女巫 35级</p><p>spawn(‘waterhag’) 沼泽巫婆 8级</p><p>spawn(‘hag_water_lvl1’) 沼泽巫婆 8级</p><p>spawn(‘hag_water_lvl2’) 沼泽巫婆 20级</p><p>spawn(‘hag_water_mh’) 沼泽巫婆 30级</p><p>spawn(‘ice_giant’) 寒冰巨人 14级</p><p>spawn(‘icegiant’) 寒冰巨人 14级</p><p>spawn(‘ice_golem’) 冰元素 30级</p><p>spawn(‘elemental_dao_lvl3__ice’) 冰元素 30级</p><p>spawn(‘elemental_dao_lvl1’) 土元素 25级</p><p>spawn(‘dao’) 土元素 27级</p><p>spawn(‘elemental_dao_lvl2’) 土元素 27级</p><p>spawn(‘elemental_dao_mh’) 土元素 49级</p><p>spawn(‘ifryt’) 火巨灵 9级</p><p>spawn(‘ifrit’) 火巨灵 9级</p><p>spawn(‘golem_lvl2__ifryt’) 火巨灵 9级</p><p>spawn(‘lessog’) 鹿首精 20级</p><p>spawn(‘leszy’) 鹿首精 20级</p><p>spawn(‘leshy’) 鹿首精 20级</p><p>spawn(‘leshen’) 鹿首精 20级</p><p>spawn(‘lessun’) 鹿首精 20级</p><p>spawn(‘lessog_lvl1’) 鹿首精 20级</p><p>spawn(‘lessog_lvl2__ancient’) 古代鹿首精 34级</p><p>spawn(‘lessog_mh’) 鹿首精 49级</p><p>spawn(‘fugas_lvl1’) 林精 5级</p><p>spawn(‘fugas’) 林精 27级</p><p>spawn(‘fugas_lvl2’) 林精 27级</p><p>spawn(‘arachas_lvl1’) 蟹蜘蛛 11级</p><p>spawn(‘arachas’) 蟹蜘蛛 11级</p><p>spawn(‘arachas_armored’) 装甲蟹蜘蛛 26级</p><p>spawn(‘armoredarachas’) 装甲蟹蜘蛛 26级</p><p>spawn(‘arachas_lvl2__armored’) 装甲蟹蜘蛛 26级</p><p>spawn(‘arachas_poison’) 毒蟹蜘蛛 31级</p><p>spawn(‘poisonarachas’) 毒蟹蜘蛛 31级</p><p>spawn(‘poisonedarachas’) 毒蟹蜘蛛 31级</p><p>spawn(‘arachas_lvl3__poison’) 毒蟹蜘蛛 31级</p><p>spawn(‘endriaga_worker’) 安德莱格工兵 9级</p><p>spawn(‘endriaga_lvl1__worker’) 安德莱格工兵 9级</p><p>spawn(‘endriaga’) 安德莱格勇士 11级</p><p>spawn(‘endrega’) 安德莱格勇士 11级</p><p>spawn(‘endriaga_tailed’) 安德莱格勇士 11级</p><p>spawn(‘endriaga_lvl2__tailed’) 安德莱格勇士 11级</p><p>spawn(‘endriaga_lvl3__spikey’) 公安德莱格 20级</p><p>spawn(‘endriaga_spikey’) 公安德莱格 20级</p><p>spawn(‘katakan’) 卡塔卡恩 11级</p><p>spawn(‘vampire_katakan_lvl1’) 卡塔卡恩 11级</p><p>spawn(‘katakan_large’) 卡塔卡恩 45级</p><p>spawn(‘katakanlarge’) 卡塔卡恩 45级</p><p>spawn(‘vampire_katakan_mh’) 卡塔卡恩 45级</p><p>spawn(‘cyclop’) 独眼怪 21级</p><p>spawn(‘cyclops’) 独眼怪 21级</p><p>spawn(‘cyclop_lvl1’) 独眼怪 21级</p><p>spawn(‘bies_lvl1’) 恶魔 16级</p><p>spawn(‘bies’) 恶魔 28级</p><p>spawn(‘bies_lvl2’) 恶魔 28级</p><p>spawn(‘bies_mh’) 恶魔 50级</p><p>spawn(‘black_troll’) 黑巨魔 52级</p><p>spawn(‘blacktroll’) 黑巨魔 52级</p><p>spawn(‘troll_black’) 黑巨魔 52级</p><p>spawn(‘troll_cave_mh__black’) 黑巨魔 52级</p><p>spawn(‘troll_cave_lvl1’) 发狂的岩石巨魔 10级</p><p>spawn(‘troll_cave_lvl2’) 发狂的岩石巨魔 16级</p><p>spawn(‘cave_troll’) 发狂的岩石巨魔 16级</p><p>spawn(‘cavetroll’) 发狂的岩石巨魔 16级</p><p>spawn(‘troll’) 发狂的岩石巨魔 16级</p><p>spawn(‘czart’) 雠特魔 27级</p><p>spawn(‘czart_lvl1’) 雌特魔 27级</p><p>spawn(‘czart_mh’) 雌特魔 51级</p><p>spawn(‘ekima’) 血魔 11级</p><p>spawn(‘ekimma’) 血魔 11级</p><p>spawn(‘vampire_ekima_lvl1’) 血魔 11级</p><p>spawn(‘vampire_ekima_mh’) 血魔 40级</p><p>spawn(‘golem_lvl1’) 魔像 6级</p><p>spawn(‘golem’) 魔像 29级</p><p>spawn(‘golem_lvl2’) 魔像 29级</p><p>spawn(‘troll_cave_lvl3__ice’) 冰巨魔 26级</p><p>spawn(‘harpy’) 人面妖鸟 7级</p><p>spawn(‘harpy_lvl1’) 人面妖鸟 7级</p><p>spawn(‘harpy_lvl2’) 人面妖鸟 13级</p><p>spawn(‘siren’) 女海妖 13级</p><p>spawn(‘siren_lvl1’) 女海妖 13级</p><p>spawn(‘siren_lvl2__lamia’) 海克娜 19级</p><p>spawn(‘siren_mh__lamia’) 海克娜 25级</p><p>spawn(‘gryphon’) 狮鹫兽 4级</p><p>spawn(‘griffon’) 狮鹫兽 4级</p><p>spawn(‘gryphon_lvl1’) 狮鹫兽 4级</p><p>spawn(‘gryphon_lvl2’) 狮鹫兽 25级</p><p>spawn(‘volcanic_gryphon’) 大狮鹫兽 48级</p><p>spawn(‘gryphon_lvl3__volcanic’) 大狮鹫兽 48级</p><p>spawn(‘gryphon_mh__volcanic’) 大狮鹫兽 54级</p><p>spawn(‘cockatrice’) 石化鸡蛇 20级</p><p>spawn(‘basilisk’) 石化蜥蜴 32级</p><p>spawn(‘basilisk_lvl1’) 石化蜥蜴 32级</p><p>spawn(‘cockatrice_lvl1’) 石化鸡蛇 20级</p><p>spawn(‘cockatrice_mh’) 石化鸡蛇 25级</p><p>spawn(‘forktail_lvl2’) 叉尾龙 15级</p><p>spawn(‘forktail_lvl1’) 叉尾龙 18级</p><p>spawn(‘forktail’) 叉尾龙 37级</p><p>spawn(‘forktail_mh’) 叉尾龙 48级</p><p>spawn(‘wyvern’) 翼手龙 9级</p><p>spawn(‘wyvern_lvl1’) 翼手龙 9级</p><p>spawn(‘wyvern_lvl2’) 翼手龙 14级</p><p>spawn(‘wyvern_mh’) 翼手龙 18级</p><p>spawn(‘erynia’) 艾琳尼亚 13级</p><p>spawn(‘harpy_lvl3__erynia’) 艾琳尼亚 13级</p><p>spawn(‘willo_wisp’) 潭加洛 19级</p><p>spawn(‘willowisp’) 潭加洛 19级</p><p>spawn(‘baronswife’) 安娜 10级</p><p>spawn(‘gravehag_barons_wife’) 安娜 10级</p><p>spawn(‘hag_grave_lvl1__barons_wife’) 安娜 10级</p><p>spawn(‘lamia’) 海克娜 19级</p><p>spawn(‘simulacrum’) 幻形怪 36级</p><p>spawn(‘golem_lvl3’) 幻形怪 36级</p><p>spawn(‘miscreant’) 死婴无伤害</p><p>spawn(‘_quest__miscreant’) 死婴无伤害</p><p>spawn(‘botchling’) 尸婴 24级</p><p>spawn(‘_quest__miscreant_greater’) 死婴 24级</p><p>spawn(‘_quest__him’) 希姆 13级</p><p>spawn(‘him’) 希姆 13级</p><p>spawn(‘arachas_mh__poison’) 哈里西 51级</p><p>spawn(‘_quest__godling’) 地精</p><p>spawn(‘_quest__endriaga_spiral’) 沙虫 25级</p><p>spawn(‘heart’) 无伤害</p><p>spawn(‘cat’) 猫</p><p>spawn(‘chicken’) 鸡</p><p>spawn(‘cow’) 牛</p><p>spawn(‘crab’)</p><p>spawn(‘crow’) 乌鸦</p><p>spawn(‘deer’) 鹿</p><p>spawn(‘dog’) 狗</p><p>spawn(‘fish_kingfish’) 鱼</p><p>spawn(‘fish_mackerel’)</p><p>spawn(‘fish_roach’)</p><p>spawn(‘fish_tuna’) 鱼</p><p>spawn(‘goat’) 山羊</p><p>spawn(‘goose’) 鹅</p><p>spawn(‘goose_leader’) 鹅</p><p>spawn(‘hare’) 兔子</p><p>spawn(‘mountain_goat’) 山羊</p><p>spawn(‘owl’) 猫头鹰</p><p>spawn(‘pig’) 猪</p><p>spawn(‘pigeon’) 鸽子</p><p>spawn(‘ram’) 公羊</p><p>spawn(‘rat’) 老鼠</p><p>spawn(‘rooster’) 公鸡</p><p>spawn(‘seagull’) 鸟</p><p>spawn(‘sheep’) 绵羊</p><p>spawn(‘snow_deer’) 母鹿</p><p>spawn(‘snow_rabbit’) 雪免</p><p>spawn(‘sparrow’) 鸟</p><p>spawn(‘swallow’) 鸟</p><p>spawn(‘toad’) 蛤蟆</p><p>spawn(‘whale’) 大鲸鱼</p><p>spawn(‘boat’) 帆船</p><p>spawn(‘playerHorse’) 马</p><p>spawn(‘horse’) 马</p><p>spawn(‘horse_manager’)</p><p>spawn(‘poison_cloud’) 毒气弹</p><p>spawn(‘rotfiend_explode’) 一堆血</p><p>spawn(‘barrel’) 炸药桶</p><p>spawn(‘beehive’) 蜜蜂 在地下</p><p>spawn(‘lure_cloud’) 地面变黑 多用几次有反应</p><p>spawn(‘yennefer_bubble’) 白雾</p><p>spawn(‘yennefer_bubble_2’) 白雾</p><p>spawn(‘yennefer_bubble_3’) 白雾</p><p>spawn(‘frozen_soldier’) 巨型景观剑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;巫师3控制台代码&quot;&gt;&lt;a href=&quot;#巫师3控制台代码&quot; class=&quot;headerlink&quot; title=&quot;巫师3控制台代码&quot;&gt;&lt;/a&gt;巫师3控制台代码&lt;/h1&gt;&lt;h2 id=&quot;控制台打开方式&quot;&gt;&lt;a href=&quot;#控制台打开方式&quot; class=&quot;header</summary>
      
    
    
    
    <category term="游戏" scheme="https://blog.lthero.cn/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="游戏" scheme="https://blog.lthero.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="巫师3" scheme="https://blog.lthero.cn/tags/%E5%B7%AB%E5%B8%883/"/>
    
  </entry>
  
  <entry>
    <title>TCP基于丢包的行为分析与缺点</title>
    <link href="https://blog.lthero.cn/2022/11/24/TCP-BasedOnDropingAnalysis/"/>
    <id>https://blog.lthero.cn/2022/11/24/TCP-BasedOnDropingAnalysis/</id>
    <published>2022-11-24T14:59:32.000Z</published>
    <updated>2022-11-24T15:01:21.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP基于丢包的CBUIC算法与BBR算法的分析"><a href="#TCP基于丢包的CBUIC算法与BBR算法的分析" class="headerlink" title="TCP基于丢包的CBUIC算法与BBR算法的分析"></a>TCP基于丢包的CBUIC算法与BBR算法的分析</h1><p>原文章：<a href="https://blog.csdn.net/dog250/article/details/52939004">https://blog.csdn.net/dog250/article/details/52939004</a></p><p><img src="https://img-blog.csdn.net/20161026224121325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="TCP链路"></p><p>假设TCP端节点之间的BDP【<strong>带宽时延积</strong>】为C，那么：<br><strong>C &#x3D; C1 + C2 (其中C1是网络本身的管道容量，而C2是路由器节点缓存的容量)</strong><br>由于路径中最小带宽为B，那么整个链路的带宽将由B决定，在排队未发生时(即没有发生拥塞时)，假设测量RTT为rtt0，发送速率为B0&#x3D;B，则：<br><strong>C1 &#x3D; B0*rtt0<br>C &#x3D; B0*rtt0 +C2 &gt; B*rtt0</strong><br>此时，任何事情均为发生，一切平安无事！继续着TCP“加性增”的行为，此时发送端继续线性增加发送速率，到达B1，此时：<br><strong>B0*rtt0 &lt; B1*rtt1</strong><br>C是客观的不变量，这会导致C2开始被填充，即开始轻微排队。排队会造成RTT的增加。假设C2已经被加性增特性填充到满载的临界，此时发送带宽为B2，即：<br><strong>C &#x3D; B2*rtt2 &#x3D; B*rtt0 + C2</strong></p><p>第二类缓存的时间墙特征导致了排队的发生，而排队会导致一个TCP连接中数据包的RTT变大。为了讨论方便，我们假设TCP端节点之间管道最细处(即Bottleneke处)的带宽为B，那么正如上图所表明的，我把TCP端节点之间的网络中，凡是带宽比B大的网络均包含在第二类缓存中，也就是说，凡是会引起排队的路径，均是第二类缓存。</p><h2 id="TCP之CUBIC算法【基于丢包算法】"><a href="#TCP之CUBIC算法【基于丢包算法】" class="headerlink" title="TCP之CUBIC算法【基于丢包算法】"></a>TCP之CUBIC算法【基于丢包算法】</h2><h3 id="理想功能："><a href="#理想功能：" class="headerlink" title="理想功能："></a>理想功能：</h3><p>TCP在临界点的加性增窗行为，<strong>理想状态下应该让发送方获得第一类缓存</strong>，<strong>也就是链路吞吐量的大小</strong>【C1大小】。</p><h3 id="实际功能："><a href="#实际功能：" class="headerlink" title="实际功能："></a>实际功能：</h3><p>但实际上，因为路由器有了第二类缓存，导致TCP<strong>变成了探测C1+C2的容量</strong>。并且，随着C2的增加而增加，RTT的最终测量值，即rtt2则越大！这就是深队列丢包探测的原因。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>之所以基于丢包的拥塞控制算法的带宽利用率低，就是由于<strong>其填充第二类缓存</strong>，而<strong>增加了排队延迟</strong>造成的<strong>虚假且逐渐增大的RTT</strong>，最终导致了BDP很大的假象。而这一切的目的，却仅仅是为了探测丢包，自以为在丢包前已经100%的利用了带宽，然而在丢包后，所有的一切都加倍还了回去！是丢包导致了带宽利用率的下降，而不是增加！！</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​事实上，通过<strong>探测时间窗口内的最大带宽和最小RTT</strong>，就可以明确知道<strong>是不是已经填满了第一类缓存</strong>，并<strong>停止继续填充第二类缓存</strong>，即向最小化排队的方向收敛！</p><p>​曾经的基于时延的算法，比如Vegas，其实已经在走这条路了，它已经知道RTT的增加意味着排队了，只是它没有采用时间窗口过滤掉常规波动，而是采用了RTT增量窗口来过滤波动，最终甚至由于RTT抖动主动减少窗口，所以会造成竞争性不足。不管怎样，这是一种君子行为，它总是无力对抗<strong>基于丢包算法的流氓行为</strong>。</p><p>​BBR综合了二者，对待君子则君子，即：<strong>不会填充第二类缓存</strong>，就不会造成路由器排队。因为一旦排队，所有连接的RTT均会增加，对类似Vegas的不利。对待流氓则流氓，即：采用滑动时间窗口抗带宽噪声，采用固定超时时间窗口抗RTT噪声，时间窗口内，决不降速。</p><hr><p>从上面的分析看来，<strong>第二类缓存没有必要</strong>？</p><h2 id="第二类缓存【路由器缓存】的用处"><a href="#第二类缓存【路由器缓存】的用处" class="headerlink" title="第二类缓存【路由器缓存】的用处"></a>第二类缓存【路由器缓存】的用处</h2><p>第二类缓存的作用是为了适配统计复用的分组交换网络上路由器<strong>处理不过来到来的数据包</strong>而引入的，并用来缓冲不同链路上的速度。如果没有路由器交换机节点的存在，那么第二类缓存这里什么也没有：</p><p><img src="https://img-blog.csdn.net/20161026224221294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>如果你想最快速度理解上图中泊松到达这个点的入口行为和固定速率发出的出口行为，请考虑丁字路由或十字路口，和路由器一样，只有在交叉点的位置才需要第二类缓存来平滑多方瞬时速率的不匹配特征！我以丁字路口为例：</p><p><img src="https://img-blog.csdn.net/20161026224301779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>不管哪里为应对瞬时到达率而加入的”缓存“，都是第二类缓存，这类缓存的<strong>目的是临时缓存瞬时到达过快的数据或者车流</strong>，这就是统计复用的分组交换网节点缓存的本质！然而<strong>一旦这些缓存被误用了</strong>，拥塞就一定会发生！误用行为很多，比如<strong>UDP毫无节制的发包</strong>，比如<strong>TCP依靠填满第二类缓存而发现拥塞</strong>，讽刺的是，很大程度上，<strong>拥塞是TCP自己造成的</strong>，要想发现拥塞，就必须要先制造拥塞。</p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>尽量减少网络交换节点处队列的排队</strong>！通过上一节的最后，我们知道，交换节点出口的速率恒定，而入口可能会面临突发，虽然在统计意义上，出入口的处理能力匹配即可，然而即便大多数时候到达速率都小于出口速率，只要有一瞬间的突发就可能冲击队列到爆满！事实上队列缓存存在的理由：<strong>解决到达速率大于出口速率</strong></p><h4 id="基于丢包的收敛图"><a href="#基于丢包的收敛图" class="headerlink" title="基于丢包的收敛图"></a>基于丢包的收敛图</h4><p><img src="https://img-blog.csdn.net/20161026224333982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="基于丢包的收敛图"></p><h3 id="BBR的收敛方案"><a href="#BBR的收敛方案" class="headerlink" title="BBR的收敛方案"></a>BBR的收敛方案</h3><p>BBR收敛过程并<strong>不是独立的，它们是配合的</strong>。BBR算法根本就没有定义收敛点，只是大家互相配合，<strong>满足其带宽之和不超过第一类缓存的大小</strong>，即<strong>真正BDP</strong>的大小，在这个约束条件下，BBR最终自己找到了一个稳定的平衡点。</p><ol><li>如果没有其它连接，一个连接会一直试图占满所有带宽。</li><li>一旦有新连接，则<strong>老连接</strong>尽量一次性或者很短时间内出<strong>让部分带宽</strong>，然后在这些带宽被利用之前，老连接不再抢带宽。</li><li>超过6个RTT周期之后，<strong>老连接重新开始新一轮抢占</strong>，出让，等待被利用的过程，从而和其它的连接一起收敛到平衡点。</li></ol><p>因此，和加性增乘性减的独立收敛方案不同，BBR<strong>一开始</strong>就是考虑到<strong>对方存在</strong>的收敛方案</p><h4 id="BBR的收敛图"><a href="#BBR的收敛图" class="headerlink" title="BBR的收敛图"></a>BBR的收敛图</h4><p><img src="https://img-blog.csdn.net/20161026224529608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="BBR的收敛图"></p><p>很遗憾，BBR无法识别CUBIC的存在！当BBR将cwnd缩减的时候，CUBIC会继续填充第二类缓存，直到透支掉最后的那一个字节。随后，也许你会认为CUBIC会执行乘性减来缩减cwnd，是的，确实如此，然而即使这样，也不能指望它们会腾出带宽，因为CUBIC的行为是各自独立的，你无法假设它们会同时进入乘性减窗，因此几乎可以肯定，共享链路上的缓存总是趋向与被填满的状态，这都是CUBIC的所为。然而怎能怪它呢，毕竟它的基础就是填满所有两类缓存为止，决不降速(不同于BBR的发现排队之前绝不减速的特性)。因此，BBR和CUBIC共存的时候，很有可能会出现全盘皆输的局面。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>CUBIC还算是迄今比较伟大的算法，它不会轻易被BBR取代，但是它需要被改进。<br>    首先，在没有AQM时，加性增乘性减本身并没有错，一般的丢包都是尾部拥塞丢包，这对于TCP拥塞控制而言，基于丢包的拥塞探测太容易做了，但是尾部丢包会带来一系列的问题，为了解决这些问题，出现了AQM，比如RED之类的丢包算法，这样一来就无法区别RED丢包，尾部丢包，线路噪声丢包，乱序未丢包这几类现象了。问题的严重性是由拥塞算法对丢包的敏感性造成的，只要有丢包，或者说仅仅是按照自己的逻辑检测到了可能的丢包，就好像出了大事一般，窗口会大幅度下降！！然而，噪声丢包和乱序并不是拥塞，所以如果能过滤掉这两类，CUBIC的效率一定会有大的提高！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP基于丢包的CBUIC算法与BBR算法的分析&quot;&gt;&lt;a href=&quot;#TCP基于丢包的CBUIC算法与BBR算法的分析&quot; class=&quot;headerlink&quot; title=&quot;TCP基于丢包的CBUIC算法与BBR算法的分析&quot;&gt;&lt;/a&gt;TCP基于丢包的CBUIC算</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://blog.lthero.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP" scheme="https://blog.lthero.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP/"/>
    
    
    <category term="计算机网络" scheme="https://blog.lthero.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP" scheme="https://blog.lthero.cn/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】进程互斥访问&amp;同步问题综合</title>
    <link href="https://blog.lthero.cn/2022/11/06/semaphore-problems/"/>
    <id>https://blog.lthero.cn/2022/11/06/semaphore-problems/</id>
    <published>2022-11-06T14:40:19.000Z</published>
    <updated>2022-11-06T14:42:23.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程互斥访问-amp-同步问题综合"><a href="#进程互斥访问-amp-同步问题综合" class="headerlink" title="进程互斥访问&amp;同步问题综合"></a>进程互斥访问&amp;同步问题综合</h1><h2 id="1窗口n客人叫号"><a href="#1窗口n客人叫号" class="headerlink" title="1窗口n客人叫号"></a>1窗口n客人叫号</h2><p>面包师有很多面包，由n名销售人员卖。每个客人进店后取号，并等待叫号。当一名销售人员空闲，就叫下一个号。</p><blockquote><p>n个销售【服务窗口】，n个客人</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> waitnum=<span class="number">0</span>;<span class="comment">//取号值</span></span><br><span class="line"><span class="type">int</span> servernum=<span class="number">0</span>;<span class="comment">//叫号值</span></span><br><span class="line">semaphore mutex_waitnum=<span class="number">1</span>,mutex_servernum=<span class="number">1</span>;<span class="comment">//用来保证修改num过程是原子性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mutex_waitnum和mutex_servernum只是锁</span></span><br><span class="line"><span class="comment">//waitnum作为状态变量</span></span><br><span class="line">customer&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(mutex_waitnum);</span><br><span class="line">        <span class="comment">//取号</span></span><br><span class="line">        waitnum+=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">V</span>(mutex_waitnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(mutex_servernum);</span><br><span class="line">        <span class="keyword">if</span>(waitnum&lt;servernum)&#123;</span><br><span class="line">            servernum+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">V</span>(mutex_servernum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：完全使用PV操作</span></span><br><span class="line">semaphore mutex=<span class="number">1</span>;<span class="comment">//锁：锁取号机</span></span><br><span class="line">customer&#123;</span><br><span class="line">    <span class="built_in">P</span>(mutex);</span><br><span class="line">    取号</span><br><span class="line">    <span class="built_in">V</span>(mutex);</span><br><span class="line">    <span class="built_in">V</span>(customer);<span class="comment">//告诉服务人员，来人了</span></span><br><span class="line">    <span class="built_in">P</span>(server);<span class="comment">//等待服务</span></span><br><span class="line">    被服务函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="built_in">P</span>(customer);<span class="comment">//消耗一个客人</span></span><br><span class="line">    <span class="built_in">V</span>(server);<span class="comment">//提供服务</span></span><br><span class="line">    服务函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1窗口n客人M椅子，人会离开"><a href="#1窗口n客人M椅子，人会离开" class="headerlink" title="1窗口n客人M椅子，人会离开"></a>1窗口n客人M椅子，人会离开</h2><p>理发店里面一位理发师，一把理发椅子和n个等待时椅子。若没有客人，理发师在理发椅子上睡觉。若有客人，客人要叫醒理发师，若理发师在理发又有客人来，若椅子有空，客人在椅子上等待，椅子不空就离开。使用PV操作</p><blockquote><p>本题中，椅子不空就离开。说明不是进程不是一直等待下去，不能直接用P操作，因为P操作会一直等待。需要用状态变量+锁的方式完成</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> wait=<span class="number">0</span>,chair=n;</span><br><span class="line">semaphore mutex_wait=<span class="number">1</span>;<span class="comment">//锁</span></span><br><span class="line">semaphore server=<span class="number">0</span>;<span class="comment">//表示需要服务数</span></span><br><span class="line">semaphore customer=<span class="number">0</span>;<span class="comment">//表示客人数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//和第一题方法2相似</span></span><br><span class="line">customer&#123;</span><br><span class="line"><span class="built_in">P</span>(mutex_wait);</span><br><span class="line"><span class="keyword">if</span>(wait&lt;chair)&#123;</span><br><span class="line">wait+=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">V</span>(customer);<span class="comment">//告诉服务人员，来人了</span></span><br><span class="line"><span class="built_in">V</span>(mutex);</span><br><span class="line"><span class="built_in">P</span>(server);<span class="comment">//等待服务</span></span><br><span class="line">        被理发函数</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">V</span>(mutex_wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">barber&#123;</span><br><span class="line">    <span class="built_in">P</span>(customer);<span class="comment">//如果有客人就提供服务,没有就睡觉</span></span><br><span class="line">    <span class="built_in">P</span>(mutex_wait);</span><br><span class="line">    wait-=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">V</span>(server);<span class="comment">//理发师醒了</span></span><br><span class="line">    <span class="built_in">V</span>(mutex_wait);</span><br><span class="line">    理发函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1窗口n客人M椅子，人不离开"><a href="#1窗口n客人M椅子，人不离开" class="headerlink" title="1窗口n客人M椅子，人不离开"></a>1窗口n客人M椅子，人不离开</h2><p>银行提供一个服务窗口和10个等待座位。客人到达银行时，若有空位，则到取号机拿号并坐下等待。否则就一直等待空座位再拿号。取号机每次仅允许一个人使用。营业员空闲时，叫号一个客人并服务。</p><blockquote><p>本题中，椅子不空就等待，可以使用PV</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">semaphore chair=<span class="number">10</span>;<span class="comment">//固定资源</span></span><br><span class="line">semaphore mutex=<span class="number">1</span>;<span class="comment">//锁</span></span><br><span class="line">semaphore customer=<span class="number">0</span>;</span><br><span class="line">semaphore server=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">customer&#123;</span><br><span class="line"><span class="built_in">P</span>(chair);<span class="comment">//有椅子就拿号，没椅子就等。不像第二题会走</span></span><br><span class="line"><span class="built_in">P</span>(mutex);<span class="comment">//叫号机上锁</span></span><br><span class="line">取号函数</span><br><span class="line"><span class="built_in">V</span>(mutex);</span><br><span class="line">    <span class="built_in">V</span>(customer);<span class="comment">//告诉服务人员，来人了</span></span><br><span class="line">    <span class="built_in">P</span>(server);<span class="comment">//等待服务</span></span><br><span class="line">    被服务函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="built_in">P</span>(customer);<span class="comment">//消耗一个客人</span></span><br><span class="line">    <span class="built_in">V</span>(chair);<span class="comment">//空出一个椅子</span></span><br><span class="line">    <span class="built_in">V</span>(server);<span class="comment">//提供服务</span></span><br><span class="line">    服务函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双资源生产者问题"><a href="#双资源生产者问题" class="headerlink" title="双资源生产者问题"></a>双资源生产者问题</h2><p>小和尚，老和尚若干。有一个水缸，只能小和尚提水给老和尚用。水缸可以容10桶水，水取自同一个水井。水井每次只能由一桶水，一共有3个水桶。水缸一次只能入一桶水。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex_shaft=<span class="number">1</span>;<span class="comment">//水井</span></span><br><span class="line">semaphore mutex_tank=<span class="number">1</span>;<span class="comment">//水缸</span></span><br><span class="line">semaphore bucket=<span class="number">3</span>;<span class="comment">//资源</span></span><br><span class="line">semaphore tank_empty=<span class="number">10</span>;<span class="comment">//经典生产者和消费者的条件变量</span></span><br><span class="line">semaphore tank_full=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">老&#123;</span><br><span class="line">    <span class="built_in">P</span>(tank_full);</span><br><span class="line">    <span class="built_in">P</span>(bucket);</span><br><span class="line">    <span class="built_in">P</span>(mutex_tank);</span><br><span class="line">    取水</span><br><span class="line">    <span class="built_in">V</span>(mutex_tank);</span><br><span class="line">    <span class="built_in">V</span>(bucket);</span><br><span class="line">    <span class="built_in">V</span>(tank_empty);<span class="comment">//提醒生产者生产</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">小&#123;</span><br><span class="line"><span class="built_in">P</span>(tank_empty);</span><br><span class="line">    <span class="built_in">P</span>(bucket);</span><br><span class="line">    <span class="built_in">P</span>(mutex_shaft);</span><br><span class="line">    从水井打水</span><br><span class="line">    <span class="built_in">V</span>(mutex_shaft);</span><br><span class="line">    <span class="comment">//再向水缸放水</span></span><br><span class="line">    <span class="built_in">P</span>(mutex_tank);</span><br><span class="line">    放水</span><br><span class="line">    <span class="built_in">V</span>(mutex_tank);</span><br><span class="line">    <span class="built_in">V</span>(bucket);</span><br><span class="line">    <span class="built_in">V</span>(tank_full);<span class="comment">//提醒消费者消费</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多进程同步问题"><a href="#多进程同步问题" class="headerlink" title="多进程同步问题"></a>多进程同步问题</h2><p>三个合作进程P1,P2,P3。者通过同一个设备输入各自的数据a,b,c。输入设备互斥使用。a为第一个输入必须由P1读取。b为第二个输入必须由P2读取。c为第二个输入必须由P3读取。然后进行以下运算</p><p>P1:x&#x3D;a+b;</p><p>P2:y&#x3D;a*b;</p><p>P3:z&#x3D;y+c-a;</p><p>最后，由P1通过打印机将x,y,z打印出来。</p><blockquote><p>因为规定了P1先取a，P2再取b,P3最后取C。设置fetch_a&#x3D;1;fetch_b&#x3D;0;fetch_c&#x3D;0;表示a可以取</p><p>P1需要等待P2读取b，则有个信号量b_done</p><p>P3需要等待P2计算出y，则有个信号量y_done</p><p>P1最后需要等待P3计算出z，则有个信号量z_done</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">semaphore fetch_a=<span class="number">1</span>;</span><br><span class="line">semaphore fetch_b=<span class="number">1</span>;</span><br><span class="line">semaphore fetch_c=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P1&#123;</span><br><span class="line"><span class="built_in">P</span>(fetch_a);</span><br><span class="line">取a数据</span><br><span class="line"><span class="built_in">V</span>(fetch_b);<span class="comment">//允许P2读取b</span></span><br><span class="line"><span class="built_in">P</span>(b_done);<span class="comment">//在P2得到b之前,P1要等待</span></span><br><span class="line">x=a+b;</span><br><span class="line"><span class="built_in">P</span>(z_done);<span class="comment">//在P3得到z之前，P1要等</span></span><br><span class="line">打印x,y,z<span class="comment">//因为z也需要y，所以P1不用等y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2&#123;</span><br><span class="line"><span class="built_in">P</span>(fetch_b);</span><br><span class="line">取b数据</span><br><span class="line"><span class="built_in">V</span>(fetch_c);<span class="comment">//允许P3读取c</span></span><br><span class="line">y=a*b;</span><br><span class="line"><span class="built_in">V</span>(y_done);<span class="comment">//唤醒等待y的进程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P3&#123;</span><br><span class="line"><span class="built_in">P</span>(fetch_c);</span><br><span class="line">取c数据</span><br><span class="line"><span class="built_in">P</span>(y_done);<span class="comment">//等待y</span></span><br><span class="line">z=y+c-a;</span><br><span class="line"><span class="built_in">V</span>(z_done);<span class="comment">//唤醒等待z的进程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程互斥访问-amp-同步问题综合&quot;&gt;&lt;a href=&quot;#进程互斥访问-amp-同步问题综合&quot; class=&quot;headerlink&quot; title=&quot;进程互斥访问&amp;amp;同步问题综合&quot;&gt;&lt;/a&gt;进程互斥访问&amp;amp;同步问题综合&lt;/h1&gt;&lt;h2 id=&quot;1窗口n客</summary>
      
    
    
    
    <category term="操作系统" scheme="https://blog.lthero.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://blog.lthero.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【树莓派脸部追踪】</title>
    <link href="https://blog.lthero.cn/2022/10/12/raspi4B-face-tracking/"/>
    <id>https://blog.lthero.cn/2022/10/12/raspi4B-face-tracking/</id>
    <published>2022-10-12T10:50:15.000Z</published>
    <updated>2022-10-12T11:16:08.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派脸部追踪"><a href="#树莓派脸部追踪" class="headerlink" title="树莓派脸部追踪"></a>树莓派脸部追踪</h1><h2 id="硬件材料"><a href="#硬件材料" class="headerlink" title="硬件材料"></a>硬件材料</h2><p>树莓派4B、云台、摄像头</p><p><img src="https://cdn.lthero.cn/post_images/course/Cryptography/image-20221012191549696.png" alt="成品展示"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、电脑上显示摄像头拍摄的视频，并得到人脸坐标，将人脸坐标发给树莓派。</p><p>2、树莓派来控制舵机旋转</p><p>3、电脑和树莓派之间和socket通信</p><p>4、树莓派上使用motion将摄像头内容输出到“192.168.6.179:8081”，从而让电脑获取视频源【192.168.6.179是树莓派地址】</p><p>注意：</p><p>1、树莓派可能需要关掉防火墙：ufw disable</p><p>2、树莓派要先启动motion：sudo motion【只用启动一次即可，一直在后台运行】</p><h2 id="人脸跟踪的算法"><a href="#人脸跟踪的算法" class="headerlink" title="人脸跟踪的算法"></a>人脸跟踪的算法</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>获得人脸矩阵中心点坐标【x,y】，再获得视频中心坐标，计算两者误差，从而让摄像头旋转相应角度，旋转时要尽量一度一度的转，不要过激，否则容易让抖动。</p><p>当然，我写的只是简单的计算两个中心误差再旋转，缺点是旋转不平滑，改进方式是用PID算法</p><p>PID算法参考1：<a href="https://pyimagesearch.com/2019/04/01/pan-tilt-face-tracking-with-a-raspberry-pi-and-opencv/">https://pyimagesearch.com/2019/04/01/pan-tilt-face-tracking-with-a-raspberry-pi-and-opencv/</a></p><p>PID算法参考2：<a href="https://bcxiaobai.eu.org/post/383.html">https://bcxiaobai.eu.org/post/383.html</a></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>参考：<a href="https://blog.csdn.net/rikeilong/article/details/126446567">https://blog.csdn.net/rikeilong/article/details/126446567</a></p><p>当人脸矩阵左边或右边快要超出视频边界时再旋转，也是要尽量一度一度的转</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="电脑上"><a href="#电脑上" class="headerlink" title="电脑上"></a>电脑上</h3><p>电脑上client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">connect_Raspberry</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;客户端开启&quot;</span>)</span><br><span class="line">        <span class="comment"># 套接字接口</span></span><br><span class="line">        self.mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 设置ip和端口</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.mySocket.connect((host, port))  <span class="comment">#连接到服务器</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;连接到服务器&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:  <span class="comment">#连接不成功，运行最初的ip</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;连接RASP不成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, words</span>):</span><br><span class="line">        <span class="comment"># 发送消息</span></span><br><span class="line">        msg = words</span><br><span class="line">        <span class="comment"># 编码发送</span></span><br><span class="line">        self.mySocket.send(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="comment"># print(&quot;成功发送消息&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.mySocket.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与树莓派丽连接中断\n&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>电脑上main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测脸部</span></span><br><span class="line">mp_face_detection = mp.solutions.face_detection</span><br><span class="line">mp_drawing = mp.solutions.drawing_utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通信传输</span></span><br><span class="line">myRaspConnection = client.connect_Raspberry(<span class="string">&#x27;192.168.6.179&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    capture = cv2.VideoCapture(<span class="string">&quot;http://192.168.6.179:8081&quot;</span>)</span><br><span class="line">    ref, frame = capture.read()</span><br><span class="line">    fps = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        ref, frame = capture.read()</span><br><span class="line">        h, w, _ = np.shape(frame)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ref:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 脸部检测</span></span><br><span class="line">        <span class="keyword">with</span> mp_face_detection.FaceDetection(model_selection=<span class="number">0</span>, min_detection_confidence=<span class="number">0.8</span>) <span class="keyword">as</span> face_detection:</span><br><span class="line">            results = face_detection.process(image)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> results.detections:</span><br><span class="line">                <span class="keyword">for</span> detection <span class="keyword">in</span> results.detections:</span><br><span class="line">                    box = detection.location_data.relative_bounding_box</span><br><span class="line">                    <span class="comment"># cx,cy,cw,ch=box</span></span><br><span class="line">                    cx = box.xmin</span><br><span class="line">                    cy = box.ymin</span><br><span class="line">                    cw = box.width</span><br><span class="line">                    ch = box.height</span><br><span class="line"></span><br><span class="line">                    cv2.rectangle(image, (<span class="built_in">int</span>(cx * w), <span class="built_in">int</span>(cy * h)), (<span class="built_in">int</span>((cx + cw) * w), <span class="built_in">int</span>((cy + ch) * h)),</span><br><span class="line">                                  (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                <span class="comment"># 控制云台</span></span><br><span class="line">                msg = <span class="built_in">str</span>(<span class="built_in">abs</span>(<span class="built_in">int</span>(cx * w))) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(<span class="built_in">abs</span>(<span class="built_in">int</span>(cy * h))) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(<span class="built_in">abs</span>(<span class="built_in">int</span>((cx + cw) * w))) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">                    <span class="built_in">abs</span>(<span class="built_in">int</span>((cy + ch) * h)))</span><br><span class="line">                <span class="built_in">print</span>(msg)</span><br><span class="line">                myRaspConnection.send(msg)</span><br><span class="line"></span><br><span class="line">        frame = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)</span><br><span class="line">        <span class="comment"># cv2.rectangle(frame, (int(cx*w) , int(cy*h)), (int((cx+cw)*w) , int((cy+ch)*h)),(0, 255, 0), 2)</span></span><br><span class="line"></span><br><span class="line">        cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line">        c = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">27</span>:</span><br><span class="line">            capture.release()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Video Detection Done!&quot;</span>)</span><br><span class="line">    capture.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="树莓派上"><a href="#树莓派上" class="headerlink" title="树莓派上"></a>树莓派上</h3><p>树莓派上sever.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;服务开启&quot;</span>)</span><br><span class="line">mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host = <span class="string">&quot;192.168.6.179&quot;</span></span><br><span class="line">port = <span class="number">8888</span> <span class="comment">#自己定义的端口号</span></span><br><span class="line"></span><br><span class="line">mySocket.bind((host, port))</span><br><span class="line">mySocket.listen(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>树莓派上main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sever</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">from</span> PCA9685 <span class="keyword">import</span> PCA9685</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">pwm=PCA9685()</span><br><span class="line">pwm.setPWMFreq(<span class="number">50</span>)</span><br><span class="line">pwm.setRotationAngle(<span class="number">5</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pid_X_P=<span class="number">0</span></span><br><span class="line">    pid_Y_P=<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等待连接&quot;</span>)</span><br><span class="line">    client,address = sever.mySocket.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;新连接&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IP is %s&quot;</span> % address[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;port is %d\n&quot;</span> % address[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    beangle = <span class="number">90</span> <span class="comment">#每个人的初始角度不同，建议先自己测试好角度</span></span><br><span class="line">    beangle0 = <span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#舵机插的通道口</span></span><br><span class="line">    channel1 = <span class="number">4</span> <span class="comment">#上下</span></span><br><span class="line">    channel2 = <span class="number">8</span> <span class="comment">#左右</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变化幅度（这个越大，舵机动的幅度就越大）</span></span><br><span class="line">    angleFreq = <span class="number">1</span></span><br><span class="line"><span class="comment">#超出屏幕范围（这个调大后，脸部离视频边界检测更灵敏）</span></span><br><span class="line">    changeFreqX = <span class="number">100</span></span><br><span class="line">    changeFreqY = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    error_x=<span class="number">500</span>            <span class="comment">#当前误差值</span></span><br><span class="line">    last_error_x=<span class="number">100</span>       <span class="comment">#上一次误差值</span></span><br><span class="line">    error_y=<span class="number">250</span></span><br><span class="line">    last_error_y=<span class="number">50</span></span><br><span class="line">    wight=<span class="number">900</span></span><br><span class="line">    height=<span class="number">480</span></span><br><span class="line">    piv_x=<span class="number">90</span></span><br><span class="line">    piv_y=<span class="number">45</span></span><br><span class="line"></span><br><span class="line">    step=<span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            msg = client.recv(<span class="number">1024</span>)</span><br><span class="line">            msg = msg.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> msg != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                mess = msg.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                </span><br><span class="line">                x0 = <span class="built_in">int</span>(mess[<span class="number">0</span>])<span class="comment">#左上角x</span></span><br><span class="line">                y0 = <span class="built_in">int</span>(mess[<span class="number">1</span>])<span class="comment">#左上角y</span></span><br><span class="line">                x1 = <span class="built_in">int</span>(mess[<span class="number">2</span>])<span class="comment">#右下角x</span></span><br><span class="line">                y1 = <span class="built_in">int</span>(mess[<span class="number">3</span>])<span class="comment">#右下角y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：超出中间就偏转</span></span><br><span class="line">                x_mean=<span class="built_in">int</span>((x0+x1)/<span class="number">2</span>)</span><br><span class="line">                y_mean=<span class="built_in">int</span>((y0+y1)/<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;x_mean&quot;</span>,x_mean,<span class="string">&quot;y_mean&quot;</span>,y_mean)</span><br><span class="line">                error_x=<span class="built_in">int</span>(x_mean-wight/<span class="number">2</span>)</span><br><span class="line">                error_y=<span class="built_in">int</span>(y_mean-height/<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;error_x&quot;</span>,error_x,<span class="string">&quot;error_y&quot;</span>,error_y)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 误差大于100,要向左偏</span></span><br><span class="line">                <span class="keyword">if</span> error_x&lt;<span class="number">0</span>  <span class="keyword">and</span> <span class="built_in">abs</span>(error_x)&gt;<span class="number">100</span>:</span><br><span class="line">                    <span class="comment"># temp_x=abs(error_x)/(wight/2)*45</span></span><br><span class="line">                   </span><br><span class="line">                    step_x=math.exp(<span class="built_in">abs</span>(error_x)/(wight/<span class="number">2</span>))</span><br><span class="line">                    <span class="built_in">print</span>(step_x)</span><br><span class="line">                    beangle+=step</span><br><span class="line">                    <span class="keyword">if</span> beangle &gt;= <span class="number">180</span>:</span><br><span class="line">                        beangle = <span class="number">180</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向左偏&quot;</span>,beangle)</span><br><span class="line">                    pwm.setRotationAngle(<span class="number">1</span>,beangle)</span><br><span class="line">                <span class="comment"># 向右偏</span></span><br><span class="line">                <span class="keyword">if</span> error_x&gt;<span class="number">0</span>  <span class="keyword">and</span> <span class="built_in">abs</span>(error_x)&gt;<span class="number">100</span>:</span><br><span class="line">                    step_x=math.exp(<span class="built_in">abs</span>(error_x)/(wight/<span class="number">2</span>))</span><br><span class="line">                    <span class="built_in">print</span>(step_x)</span><br><span class="line">                    beangle-=step</span><br><span class="line">                    <span class="keyword">if</span> beangle &lt;=<span class="number">10</span>:</span><br><span class="line">                        beangle = <span class="number">10</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向右偏&quot;</span>,beangle)</span><br><span class="line">                    pwm.setRotationAngle(<span class="number">1</span>,beangle)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 误差大于50,要向上偏</span></span><br><span class="line">                <span class="keyword">if</span> error_y&lt;<span class="number">0</span>  <span class="keyword">and</span> <span class="built_in">abs</span>(error_y)&gt;<span class="number">70</span>:</span><br><span class="line">                    <span class="comment"># if abs(error_y)&gt;=100:</span></span><br><span class="line">                    <span class="comment">#     error_y=100</span></span><br><span class="line">                    <span class="comment"># temp_x=abs(error_x)/(wight/2)*45</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        step_y=math.exp(<span class="built_in">abs</span>(error_y)/(height/<span class="number">2</span>))</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        step_y=<span class="number">2</span></span><br><span class="line">                    <span class="built_in">print</span>(step_y)</span><br><span class="line">                    beangle0-=step</span><br><span class="line">                    <span class="keyword">if</span> beangle0 &lt;=<span class="number">10</span>:</span><br><span class="line">                        beangle0 = <span class="number">10</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向上偏&quot;</span>,beangle0)</span><br><span class="line">                    pwm.setRotationAngle(<span class="number">0</span>,beangle0)</span><br><span class="line">                <span class="comment"># 向下偏</span></span><br><span class="line">                <span class="keyword">if</span> error_y&gt;<span class="number">0</span>  <span class="keyword">and</span> <span class="built_in">abs</span>(error_y)&gt;<span class="number">70</span>:</span><br><span class="line">                    <span class="comment"># if abs(error_y)&gt;=100:</span></span><br><span class="line">                    <span class="comment">#     error_y=100</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        step_y=math.exp(<span class="built_in">abs</span>(error_y)/(height/<span class="number">2</span>))</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        step_y=<span class="number">2</span></span><br><span class="line">                    <span class="built_in">print</span>(step_y)</span><br><span class="line">                    beangle0+=step</span><br><span class="line">                    <span class="keyword">if</span> beangle0 &gt;= <span class="number">85</span>:</span><br><span class="line">                        beangle0 = <span class="number">95</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;向下偏&quot;</span>,beangle0)</span><br><span class="line">                    pwm.setRotationAngle(<span class="number">0</span>,beangle0)</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 方法2：快超出屏幕时再旋转</span></span><br><span class="line">                <span class="comment"># if x0 &lt; changeFreqX:</span></span><br><span class="line">                <span class="comment">#     beangle += angleFreq</span></span><br><span class="line">                <span class="comment">#     if beangle &gt;= 180:</span></span><br><span class="line">                <span class="comment">#         beangle = 180</span></span><br><span class="line">                <span class="comment">#     pwm.setRotationAngle(1,beangle)</span></span><br><span class="line">                <span class="comment">#     #set_servo_angle(channel1,beangle)</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># if y0 &lt; changeFreqY:</span></span><br><span class="line">                <span class="comment">#     beangle0 -= angleFreq</span></span><br><span class="line">                <span class="comment">#     if beangle0 &lt;= 10:</span></span><br><span class="line">                <span class="comment">#         beangle0 = 10</span></span><br><span class="line">                <span class="comment">#     pwm.setRotationAngle(0,beangle0)</span></span><br><span class="line">                <span class="comment">#     #set_servo_angle(channel2,beangle0)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># if x1 &gt; 640 - changeFreqX: #窗口宽为640</span></span><br><span class="line">                <span class="comment">#     beangle -= angleFreq</span></span><br><span class="line">                <span class="comment">#     if beangle &lt;= 10:</span></span><br><span class="line">                <span class="comment">#         beangle = 10</span></span><br><span class="line">                <span class="comment">#     pwm.setRotationAngle(1,beangle)</span></span><br><span class="line">                <span class="comment">#     #set_servo_angle(channel1,beangle)</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># if y1 &gt; 480 - changeFreqY: #窗口高为480</span></span><br><span class="line">                <span class="comment">#     beangle0 += angleFreq</span></span><br><span class="line">                <span class="comment">#     if beangle0 &gt;= 85:</span></span><br><span class="line">                <span class="comment">#         beangle0 = 85</span></span><br><span class="line">                <span class="comment">#     pwm.setRotationAngle(0,beangle0)</span></span><br><span class="line">                <span class="comment">#     set_servo_angle(channel2,beangle0)</span></span><br><span class="line">                <span class="comment"># print(&quot;beangle&quot;,beangle,&quot;beangle0:&quot;,beangle0)</span></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        pwm.exit_PCA9685()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>1、树莓派上先运行main.py</p><p>2、电脑上再运行main.py，电脑上可见一个视频窗口，此时摄像头开始追踪人脸</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>PID算法：<a href="https://pyimagesearch.com/2019/04/01/pan-tilt-face-tracking-with-a-raspberry-pi-and-opencv/">https://pyimagesearch.com/2019/04/01/pan-tilt-face-tracking-with-a-raspberry-pi-and-opencv/</a></p><p>思路：<a href="https://blog.csdn.net/rikeilong/article/details/126446567?spm=1001.2014.3001.5502">https://blog.csdn.net/rikeilong/article/details/126446567?spm=1001.2014.3001.5502</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树莓派脸部追踪&quot;&gt;&lt;a href=&quot;#树莓派脸部追踪&quot; class=&quot;headerlink&quot; title=&quot;树莓派脸部追踪&quot;&gt;&lt;/a&gt;树莓派脸部追踪&lt;/h1&gt;&lt;h2 id=&quot;硬件材料&quot;&gt;&lt;a href=&quot;#硬件材料&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.lthero.cn/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="折腾" scheme="https://blog.lthero.cn/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.lthero.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>【lthero邮箱接口】调用</title>
    <link href="https://blog.lthero.cn/2022/09/25/ltheroMail-api/"/>
    <id>https://blog.lthero.cn/2022/09/25/ltheroMail-api/</id>
    <published>2022-09-25T04:35:01.000Z</published>
    <updated>2022-09-25T11:18:08.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lthero邮箱接口调用"><a href="#lthero邮箱接口调用" class="headerlink" title="lthero邮箱接口调用"></a>lthero邮箱接口调用</h1><blockquote><p>每天最多100封邮件发送量</p></blockquote><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接收方</span></span><br><span class="line">receiver=<span class="string">&#x27;111111@qq.com&#x27;</span></span><br><span class="line"><span class="comment">#内容</span></span><br><span class="line">content=<span class="string">&#x27;testtesttesttesttest&#x27;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;reciever&#x27;</span>: receiver,</span><br><span class="line">    <span class="comment">#邮件标题</span></span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">f&#x27;邮件标题&#x27;</span>,</span><br><span class="line">    <span class="comment">#主要内容</span></span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:content,</span><br><span class="line">    <span class="comment">#内部大标题</span></span><br><span class="line">    <span class="string">&#x27;innerTitle&#x27;</span>: <span class="string">f&#x27;内置标题&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=<span class="string">&#x27;http://mailapi.lthero.cn/&#x27;</span>, data=params)</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.lthero.cn/post_images/course/Cryptography/image-20220925123952216.png" alt="image-20220925123952216"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lthero邮箱接口调用&quot;&gt;&lt;a href=&quot;#lthero邮箱接口调用&quot; class=&quot;headerlink&quot; title=&quot;lthero邮箱接口调用&quot;&gt;&lt;/a&gt;lthero邮箱接口调用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;每天最多100封邮件发送量&lt;/p&gt;</summary>
      
    
    
    
    <category term="邮箱接口" scheme="https://blog.lthero.cn/categories/%E9%82%AE%E7%AE%B1%E6%8E%A5%E5%8F%A3/"/>
    
    
    <category term="邮箱接口" scheme="https://blog.lthero.cn/tags/%E9%82%AE%E7%AE%B1%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>浙江青年大学习自动打卡</title>
    <link href="https://blog.lthero.cn/2022/09/23/WeLearnAutoSign/"/>
    <id>https://blog.lthero.cn/2022/09/23/WeLearnAutoSign/</id>
    <published>2022-09-23T08:03:11.000Z</published>
    <updated>2022-09-25T11:12:02.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浙江青年大学习自动打卡"><a href="#浙江青年大学习自动打卡" class="headerlink" title="浙江青年大学习自动打卡"></a>浙江青年大学习自动打卡</h1><blockquote><p>一键打卡工具：<a href="https://sign.lthero.cn/">https://sign.lthero.cn/</a></p></blockquote><p>代码思路：</p><ul><li>每个微信账号有唯一的<strong>openid</strong></li><li>在每次打开青年大学习网页时，后台会根据openid生成<strong>accessToken</strong></li><li>后续的所有与服务器交互的信息，都需要用<strong>accessToken</strong>才能拿到</li><li>只要拿到<strong>个人信息</strong>，再将<strong>个人信息</strong>和<strong>accessToken</strong>提交即可打卡完成</li></ul><p>​     </p><p>为什么这样想？</p><ul><li>根据<strong>服务器发来的js文件</strong>推测出的</li></ul><p>​    </p><p>安卓获得openid教程【部分手机不可用】：</p><ul><li><p>安卓下载抓包软件 <a href="https://file-1305871479.cos.ap-nanjing.myqcloud.com/file/HttpCanary.apk">httpcanary</a>，安装完成后，1、同意条款  2、允许安装证书  3、root可以跳过</p></li><li><p>微信：打开大学习</p></li><li><p>软件httpcanary：点击右下角小飞机图标开始抓包</p></li><li><p>微信：点击“立即参与”-&gt;点击“去学习”。随后切到httpcanary，再点击右下角小飞机图标停止抓包。</p></li><li><p>软件httpcanary：点击右上角，找到“搜索”，直接搜索“openId”，注意：只要url是qczj.h5yunban.com的包。一般可以在包名为“qczj.h5yunban.com&#x2F;qczj-youth-learning&#x2F;cgi-bin&#x2F;user-api&#x2F;course&#x2F;last-info”的响应中，在响应的文本(text)中找到openId，这是我们所需的参数！</p></li><li><p>记录openId，因为以后没必要再次抓包！！！</p></li></ul><p>​    </p><p>PC获得openid教程</p><p>需要的软件：Fiddler、电脑版微信</p><p>1、打开Fiddler，安装证书</p><p>2、切换到微信，点击大学习，此时弹窗需要授权，点击“同意”。</p><p>3、点击“同意”后，切换到Fiddler，按“ctrl+f”，搜索openid，双击标黄处的包，并点击“WebForms”，在里面找到openid即可</p><p>注意：如果没有需要第2步授权步骤，而是直接进入大学习页面，则无法获得openid。</p><p>需要彻底关掉微信，并重新打开微信，再尝试。</p><p>如果实现得不到openid，需要点击“开始学习”进入到选择省市的选项。再切到Fiddler，按“ctrl+f”，搜索accessToken。得到accessToken后，</p><p>比如accessToken为xxxx-xxxx-xxxx-xxxx，将其合并到下面的链接</p><p><a href="https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/user-api/info?accessToken=xxxx-xxxx-xxxx-xxxx">https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/user-api/info?accessToken=xxxx-xxxx-xxxx-xxxx</a></p><p>替换上面的xxxx-xxxx-xxxx-xxxx。</p><p>随后进行访问此链接，可以在返回的结果里面，找到openid</p><p>文件：config.yml</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">users<span class="punctuation">:</span></span><br><span class="line">  - user<span class="punctuation">:</span></span><br><span class="line">      name<span class="punctuation">:</span> &#x27;张三&#x27;</span><br><span class="line">      openid<span class="punctuation">:</span> &#x27;oO-a2tabkGObaWbIOd4U1Bpaf1l0&#x27;</span><br><span class="line">  - user<span class="punctuation">:</span></span><br><span class="line">      name<span class="punctuation">:</span> &#x27;李四&#x27;</span><br><span class="line">      openid<span class="punctuation">:</span> &#x27;oO-a2t7bkGhdaWbIOd4U1Bpaf1l0&#x27;</span><br></pre></td></tr></table></figure><hr><p>文件：index.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">getToken_url = <span class="string">&#x27;https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/login/we-chat/callback&#x27;</span></span><br><span class="line">getUserInfo_url = <span class="string">&#x27;https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/user-api/course/last-info&#x27;</span></span><br><span class="line">getClass_url = <span class="string">&#x27;https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/common-api/course/current&#x27;</span></span><br><span class="line">checkin_url = <span class="string">&#x27;https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/user-api/course/join&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getYmlConfig</span>(<span class="params">yaml_file=<span class="string">&#x27;config.yml&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(yaml_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_data = f.read()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(yaml.load(file_data, Loader=yaml.FullLoader))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getToken</span>(<span class="params">openId</span>):</span><br><span class="line">    <span class="comment"># 根据openId获得token</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        getToken = requests.get(url=getToken_url, params=openId, headers=headers)</span><br><span class="line">        Token_raw = getToken.text</span><br><span class="line">        Token = re.findall(<span class="string">&#x27;[A-Z0-9]&#123;8&#125;[-][A-Z0-9]&#123;4&#125;[-][A-Z0-9]&#123;4&#125;[-][A-Z0-9]&#123;4&#125;[-][A-Z0-9]&#123;12&#125;&#x27;</span>, Token_raw)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取Token为:&#x27;</span> + Token)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取Token失败，请检查openId是否正确&#x27;</span>)</span><br><span class="line">    accessToken = &#123;</span><br><span class="line">        <span class="string">&#x27;accessToken&#x27;</span>: Token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accessToken</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getinfo</span>(<span class="params">accessToken</span>):</span><br><span class="line">    <span class="comment"># 根据accessToken获得用户信息</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        getUserInfo = requests.get(getUserInfo_url, params=accessToken, headers=headers)</span><br><span class="line">        userInfo = getUserInfo.json()</span><br><span class="line">        cardNo = userInfo[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;cardNo&quot;</span>]</span><br><span class="line">        nid = userInfo[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;nid&quot;</span>]</span><br><span class="line">        getClass = requests.get(getClass_url, params=accessToken, headers=headers)</span><br><span class="line">        Class = getClass.json()</span><br><span class="line">        classId = Class[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">        infos: <span class="built_in">list</span> = userInfo[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;nodes&#x27;</span>]</span><br><span class="line">        Faculty = [item[<span class="string">&#x27;title&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> infos]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;签到课程为：&#x27;</span> + classId, <span class="string">&#x27;\n您填写的个人信息为：&#x27;</span> + cardNo, <span class="string">&#x27;\n您的签到所属组织为：&#x27;</span> + <span class="built_in">str</span>(Faculty))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;获取历史信息失败，请您手动打卡：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    checkinData = &#123;</span><br><span class="line">        <span class="string">&#x27;course&#x27;</span>: classId,</span><br><span class="line">        <span class="string">&#x27;subOrg&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;nid&#x27;</span>: nid,</span><br><span class="line">        <span class="string">&#x27;cardNo&#x27;</span>: cardNo</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkinData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">signup</span>(<span class="params">accessToken, checkinData</span>):</span><br><span class="line">    <span class="comment"># 根据token和data完成打卡</span></span><br><span class="line">    checkin = requests.post(checkin_url, params=accessToken, data=json.dumps(checkinData), headers=headers)</span><br><span class="line">    result = checkin.json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&quot;status&quot;</span>] == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;签到成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现错误，错误码：&#x27;</span> + result[<span class="string">&quot;status&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;错误信息：&#x27;</span> + result[<span class="string">&quot;message&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    config = getYmlConfig()</span><br><span class="line">    <span class="keyword">for</span> index, user <span class="keyword">in</span> <span class="built_in">enumerate</span>(config[<span class="string">&#x27;users&#x27;</span>]):</span><br><span class="line">        <span class="built_in">print</span>(user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;openId为 &#x27;</span>, user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;openid&#x27;</span>])</span><br><span class="line">        openid = &#123;</span><br><span class="line">            <span class="string">&#x27;appid&#x27;</span>: <span class="string">&#x27;wx56b888a1409a2920&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;openid&#x27;</span>: user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;openid&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        accesstoken = getToken(openid)</span><br><span class="line">        checkindata = getinfo(accesstoken)</span><br><span class="line">        signup(accesstoken, checkindata)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===========================================&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，使用定时任务crontab即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浙江青年大学习自动打卡&quot;&gt;&lt;a href=&quot;#浙江青年大学习自动打卡&quot; class=&quot;headerlink&quot; title=&quot;浙江青年大学习自动打卡&quot;&gt;&lt;/a&gt;浙江青年大学习自动打卡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一键打卡工具：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="自动打卡" scheme="https://blog.lthero.cn/categories/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="自动打卡" scheme="https://blog.lthero.cn/tags/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1/"/>
    
    <category term="青年大学习" scheme="https://blog.lthero.cn/tags/%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>【马克思】《1844年经济学哲学手稿》</title>
    <link href="https://blog.lthero.cn/2022/09/21/Maxism-01/"/>
    <id>https://blog.lthero.cn/2022/09/21/Maxism-01/</id>
    <published>2022-09-21T14:13:41.000Z</published>
    <updated>2022-09-22T06:06:01.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><h2 id="知乎问题"><a href="#知乎问题" class="headerlink" title="知乎问题"></a>知乎问题</h2><p>突然意识自己曾经引以为豪的编程其实是一种工具，这是一种悲哀吗？</p><p><a href="zhihu.com/question/469223256/answer/2100070901">原回答链接</a></p><h3 id="原回答："><a href="#原回答：" class="headerlink" title="原回答："></a>原回答：</h3><p>这种悲哀感的本质，其实就是马克思在《1844年经济学哲学手稿》中提出的“四个异化”（的前三个）：</p><p>1，工人同自己的劳动产品相异化。</p><p>2，工人同自己的劳动相异化。</p><p>3，人同自己的类本质相异化。</p><p>马克思认为人区别于动物的最大特点，就是人本质上就需要“工作”，既“创造性地改造环境”。马克思所说的工作，其实就是后来“马斯洛需求层次理论”中的“自我实现”需求。</p><p>这也是马克思的牛逼之处，理论精髓之一——人的本质就是需要工作、热爱工作的，工作是人之所以为“人”的重要组成部分。</p><p>但是</p><p>资本主义世界的雇佣关系，将工作这个部分严重扭曲了，以至于将“工作”与“人性”剥离开来。在资本主义世界中，无论是宏观角度还是微观角度，工作都与人性割裂开来，甚至让“工作”与“人性”变成了对立的存在。</p><p>所以人们普遍认为，下班才是人生的开始。</p><p>所以人们才需要丰富的夜生活，才需要各种宣泄和放纵。</p><p>而这，也助长了消费主义。</p><p>但是消费带来的快乐，终究只是隔靴搔痒，甚至是饮鸩止渴。消费并不能真正填补人性被剥离的空虚。</p><p>特别是，被剥离的部分（工作，或者说是自我实现）还是人性最重要、最核心、最高级的那一部分……</p><p>这种人性被剥离的悲哀</p><p>就正是你体会到的悲哀</p><p>你引以为豪的时候，是你以自我实现（工作）角度去看待编程，这是人性最高级的展现，当然值得自豪。</p><p>而你悲哀的，是发现编程如此高级的东西，它并不属于你……不仅编程的成果不属于你，编程的动机也不属于你，编程过程附带的精神回报也不属于你，甚至你的自我实现（工作）需求也不属于你了……编程沦落为一种生产商品的工具，甚至其本身也是一种商品。</p><p>你的自我实现，变成了一种交换生存资料的手段。放到马斯洛三角里，这种悲哀体现的更加直观：</p><p><img src="https://pic1.zhimg.com/v2-74d63b76e8df193b34eb70a8973f1745_r.jpg?source=1940ef5c" alt="img"></p><p>这个过程相当于把最高级的需求（自我实现），直接压低到最低级的生理需求（交换生存资料）层次！甚至，资本主义倾向于让你只能交换到“刚好能活着”的生存资料，多余的价值都会被剥削！甚至的甚至，再观察一下其他那些层次的需求，呵，这些东西在职场中都是要一一被打破的东西（职场pua请大伙卷起来！）。资本就是要把你压到只能获得生理需求的水平！</p><p>这实在是太tm悲哀了啊！</p><p>所以马克思也是深感悲哀，才搞出了共产主义。</p><p>而共产主义最本质、最核心的创新，就是要把资本主义剥离出来的人性还给人类，把工作和人性相统一，把每一个人都变成完整的人。</p><p>两百年前的哲学家，就已经从现象看到本质，抽离出一套理论体系，做出了一堆神准的推演和预言，定位了核心问题，并想出了一套解决方案。</p><h2 id="文章出处"><a href="#文章出处" class="headerlink" title="文章出处"></a>文章出处</h2><p><a href="http://theory.people.com.cn/n/2015/0209/c83850-26533173-3.html">原文章链接</a></p><h3 id="节选："><a href="#节选：" class="headerlink" title="节选："></a>节选：</h3><p>马克思在文本中提到的异化劳动的第一个规定是，从生产的结果看，劳动者的劳动和他的劳动产品相异化，即“物的异化”。这个规定是表示，劳动者同自己的劳动产品处于异己的对象性关系之中。劳动作为人的一种活动，本来表现为对对象的占有，是人将其自身的意志和力量客观化于对象中。由于劳动和资本的分离，工人生产的产品越多，资本家拿走的越多并转化为更多的资本，反过来继续统治他、奴役他，但是，工人占有的对象却越少，并越受其对象（即产品）的奴役和统治。</p><p>“劳动对工人来说是外在的东西，也就是说，不属于他的本质；因此，他在自己的劳动中不是肯定自己，而是否定自己，不是感到幸福，而是感到不幸，不是自由地发挥自己的体力和智力，而是使自己的肉体受折磨、精神遭摧残。……他的劳动不是自愿的劳动，而是被迫的强制劳动。因此，这种劳动不是满足一种需要，而只是满足劳动以外的那些需要的一种手段。……他的活动属于别人，这种活动是他自身的丧失。”</p><p>　　“结果是，人（工人）只有在运用自己的动物机能——吃、喝、生殖，至多还有居住、修饰等等——的时候，才觉得自己在自由活动，而在运用人的机能时，觉得自己不过是动物。动物的东西成为人的东西，而人的东西成为动物的东西。”——马克思《1844年经济学哲学手稿》</p><h2 id="自我理解"><a href="#自我理解" class="headerlink" title="自我理解"></a>自我理解</h2><p>如果理解了“自我实现”与“交换生存资料”的区别，便能理解：<a href="https://www.bilibili.com/video/BV1wP411L7sC">视频</a>，里面司机的行为。他是为了自我实现，而不是单纯为了交换生存资料。</p><p>如果司机生活在共产主义的社会，他可能是更乐意的这份工作，对他自己来说，他的工作实现了自我意义，他乐意劳动，而不是为了交换生存资料而劳动。</p><p>我是偏向以“自我实现”为驱动的人，如果给我一份我没兴趣或不喜欢的任务，我的生产积极性不会高，因为这是建立在我为了交换生存资料为目的的任务，这是所有人的自然共性。</p><p>如果公司一味地认为我是劳动力商品，那相应的，我也会以交换生存资料为目的地完成任务，我不会有归属感和团队文化认同感，我只是在机械地完成任务并拿到薪水。</p><p>如果我有了对团队文化的认同感，我能意识到我是这个任务中关键的一环，这任务与我高度利益相关，那我“自我实现”为驱动的动力，并且生产积极性会变得很高，届时我并不在乎我工作是否为了生存资料，而是以自我实现而劳动。【这也许就是许多公司给员工股份的原因】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;随笔&quot;&gt;&lt;a href=&quot;#随笔&quot; class=&quot;headerlink&quot; title=&quot;随笔&quot;&gt;&lt;/a&gt;随笔&lt;/h1&gt;&lt;h2 id=&quot;知乎问题&quot;&gt;&lt;a href=&quot;#知乎问题&quot; class=&quot;headerlink&quot; title=&quot;知乎问题&quot;&gt;&lt;/a&gt;知乎问题&lt;/h</summary>
      
    
    
    
    <category term="马克思" scheme="https://blog.lthero.cn/categories/%E9%A9%AC%E5%85%8B%E6%80%9D/"/>
    
    
    <category term="马克思" scheme="https://blog.lthero.cn/tags/%E9%A9%AC%E5%85%8B%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>【python爬虫】美拍网图片下载</title>
    <link href="https://blog.lthero.cn/2022/09/12/python-download-meipai/"/>
    <id>https://blog.lthero.cn/2022/09/12/python-download-meipai/</id>
    <published>2022-09-12T12:06:41.000Z</published>
    <updated>2022-10-12T12:40:32.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美拍网图片下载"><a href="#美拍网图片下载" class="headerlink" title="美拍网图片下载"></a>美拍网图片下载</h1><blockquote><p>难度不大，网站对f12和右键有限制，但不是大问题。</p><p>网站没有反爬，至少没有给图片加防盗链，下载的图片并不是最高清，但清晰度还可以。</p></blockquote><ul><li>多线程代码直接复制之前的，其它的也大部分是走流程，固定套路</li><li>网站上图片全部为jpg格式，所以无需考虑png格式下载</li><li>唯一需要注意的是，有些图片src链接并不完整，需要自行判断和补全</li></ul><p>网站：<a href="https://4zipai.net/">https://4zipai.net</a></p><p>使用方式：</p><p>先：输入路径 </p><p>后：输入网址,如：’<a href="https://4zipai.net/selfies/202207/139004.html&#39;">https://4zipai.net/selfies/202207/139004.html&#39;</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;_ga=GA1.2.87052855.1662906879; _gid=GA1.2.106606571.1662906879; twk_idm_key=Szy-fmwxLJBDQNQQ_hKZE; TawkConnectionTime=0; twk_uuid_5e23d8f08e78b86ed8aa0035=%7B%22uuid%22%3A%221.101H94883vBguY180oYHfz0VN3Yrx0pdi2oaeD50URIjcHT13XZdZReDZEMwzt5gW4NEYVHRIUmMAPKTQXzgo0tbdNL6fRa2f2JnkKEdjUC5Me7ZTzLZlaEgUmdlaJJk9PBSm4ORF3UQSw%22%2C%22version%22%3A3%2C%22domain%22%3A%224zipai.net%22%2C%22ts%22%3A1662906990942%7D; __cf_bm=v0FGBMppZPUweg7R0uBuFPrQlE71b0ptig4q4MkaeBU-1662906991-0-AcVALr7cJKi1sMQpzf8Zs1DEJ1PojPDd9mLT8fncCrdyiEBznfws9/awsYksUmTA0dbcUfgPxplYWbTz7LfBSmLvl1dQAD4RU0ni6jxBgdSIvn8SxmBZSJkJCI00EuzjOw==&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, fileName, file_path</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.url = url</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        self.fileName = fileName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_url</span>(<span class="params">self, url</span>):</span><br><span class="line">        response = requests.get(url, headers)</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        img = requests.get(self.url, headers=headers)</span><br><span class="line">        file = self.file_path + <span class="string">&quot;\\&quot;</span> + self.fileName + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Downloading %s&quot;</span> % self.fileName)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;%s/%s.jpg&#x27;</span> % (self.file_path, self.fileName), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(self.file_path + <span class="string">&quot;\\&quot;</span> + self.fileName + <span class="string">&quot; exist&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;https://4zipai.net/selfies/202207/139004.html&#x27;</span></span><br><span class="line">save_path = <span class="built_in">input</span>(<span class="string">&quot;输入要保存的路径文件夹&quot;</span>)</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;输入网址&quot;</span>)</span><br><span class="line">rsp = requests.get(url=url, headers=headers)</span><br><span class="line">rsp.encoding=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">soup = BeautifulSoup(rsp.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># 获得标题名</span></span><br><span class="line">title=soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;item_title&quot;</span>)</span><br><span class="line">save_path=save_path+<span class="string">&#x27;\\&#x27;</span>+ <span class="built_in">str</span>(title.find(<span class="string">&quot;h1&quot;</span>).text).strip(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 创建标题对应目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">    os.makedirs(save_path)</span><br><span class="line">li = soup.find(class_=<span class="string">&#x27;content_left&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li.find_all(<span class="string">&#x27;img&#x27;</span>):</span><br><span class="line">    <span class="comment"># 查找图片链接</span></span><br><span class="line">    each_url=<span class="built_in">str</span>(i.get(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">    judge = each_url[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> judge == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        each_url = <span class="string">&quot;https://4zipai.net/&quot;</span> + each_url</span><br><span class="line">    name = <span class="built_in">str</span>(each_url).split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt;= <span class="number">9</span>:</span><br><span class="line">        thread1 = myThread(each_url, name, save_path)</span><br><span class="line">        thread1.start()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><blockquote><p>&#x2F;selfies&#x2F;202208&#x2F;140912.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142694.html</p><p>&#x2F;selfies&#x2F;201808&#x2F;70879.html</p><p>&#x2F;selfies&#x2F;201804&#x2F;63980.html</p><p>&#x2F;selfies&#x2F;201708&#x2F;48223.html</p><p>&#x2F;selfies&#x2F;201903&#x2F;80767.html</p><p>&#x2F;selfies&#x2F;201804&#x2F;63878.html</p><p>&#x2F;selfies&#x2F;202207&#x2F;139004.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142301.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142402.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142391.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142416.html</p><p>&#x2F;selfies&#x2F;202208&#x2F;142269.html</p><p>&#x2F;selfies&#x2F;202209&#x2F;142317.html</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美拍网图片下载&quot;&gt;&lt;a href=&quot;#美拍网图片下载&quot; class=&quot;headerlink&quot; title=&quot;美拍网图片下载&quot;&gt;&lt;/a&gt;美拍网图片下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;难度不大，网站对f12和右键有限制，但不是大问题。&lt;/p&gt;
&lt;p&gt;网站没有</summary>
      
    
    
    
    <category term="python" scheme="https://blog.lthero.cn/categories/python/"/>
    
    <category term="爬虫" scheme="https://blog.lthero.cn/categories/python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://blog.lthero.cn/tags/python/"/>
    
    <category term="爬虫" scheme="https://blog.lthero.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>【hexo更新到GitHub后博客内容未变】</title>
    <link href="https://blog.lthero.cn/2022/08/07/hexo-cant-update/"/>
    <id>https://blog.lthero.cn/2022/08/07/hexo-cant-update/</id>
    <published>2022-08-07T11:02:23.000Z</published>
    <updated>2022-08-07T11:08:45.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo更新到GitHub后博客内容未变"><a href="#hexo更新到GitHub后博客内容未变" class="headerlink" title="hexo更新到GitHub后博客内容未变"></a>hexo更新到GitHub后博客内容未变</h1><blockquote><p>问题描述：hexo d -g可以将文章上传到github的仓库，但打开网页(<code>github-page</code>)后，<strong>发现内容并未更新</strong></p><p>原因：<strong>github-page对私有仓库不免费</strong></p><p>解决方法：<strong>将仓库设置为公开</strong></p></blockquote><p>过程：我尝试过网上各种方法，清除<code>.deploy_git</code>、<code>hexo clean</code>等，但都无效。我检查了github-pages 的更新状态，一直是 <strong>17 days ago</strong> <code>Active</code>。再联想到“github-page”对私有仓库不是免费的，而我虽然之前一直把项目设置为私有，但我开过github学生包，里面包含免费的私有仓库的权益，但最近学生包过期了，于是就不能使用gihub-page。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo更新到GitHub后博客内容未变&quot;&gt;&lt;a href=&quot;#hexo更新到GitHub后博客内容未变&quot; class=&quot;headerlink&quot; title=&quot;hexo更新到GitHub后博客内容未变&quot;&gt;&lt;/a&gt;hexo更新到GitHub后博客内容未变&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【linux】学习笔记Chap_26_系统进程管理</title>
    <link href="https://blog.lthero.cn/2022/08/02/linux-learningPathChp26/"/>
    <id>https://blog.lthero.cn/2022/08/02/linux-learningPathChp26/</id>
    <published>2022-08-02T13:15:11.000Z</published>
    <updated>2022-08-02T13:15:35.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统进程管理"><a href="#系统进程管理" class="headerlink" title="系统进程管理"></a>系统进程管理</h1><ul><li>在Unix中，所有信息都由某个文件或程序提供，简单来说，文件只是个输入输出对象，而一个进程才是执行的对象</li></ul><h3 id="本章将搞懂-："><a href="#本章将搞懂-：" class="headerlink" title="本章将搞懂 ："></a>本章将搞懂 ：</h3><ul><li>进程从哪来？进程如何被系统控制？如何控制自己的进程？</li></ul><h2 id="系统如何控制进程"><a href="#系统如何控制进程" class="headerlink" title="系统如何控制进程"></a>系统如何控制进程</h2><ul><li>准确说：<strong>进程是一个被装载到内存的程序</strong>，全部的程序数据、信息也会被放入内存中。</li></ul><p>所有的<strong>进程被内核kernel</strong>管理，当一个进程创建时，内核指定一个 Process ID(identification number)给进程，以便追踪进程信息。</p><ul><li><ul><li>内核会管一个<strong>进程信息表</strong>，由<strong>PID和进程名构成，</strong>有了这个表，<strong>内核将掌握控制进程的必要信息。</strong></li></ul></li></ul><blockquote><p>小型Unix系统可以同时执行100多进程，大Unix可达到上千进程。</p></blockquote><h3 id="Cpu-time"><a href="#Cpu-time" class="headerlink" title="Cpu time"></a>Cpu time</h3><p>先介绍Cpu time, 以前电脑只有一个cpu，而单个cpu要面对不同进程任务，为了雨均沾，给每个进程设置一个cputime 如10毫秒。cpu从 等待执行的进程列表中选出一个进程，让其执行10毫秒，时间一到就选出下一个进程，而上一个进程就要记录当前运行的状态，以便下次再继续。</p><h3 id="System-call"><a href="#System-call" class="headerlink" title="System call"></a><strong>System call</strong></h3><p>当一个程序要执行时，要向内核(kernel)发出一条call，让系统准备不同操作</p><ul><li>最重要的system calls 有<strong>fork exec wait exit</strong></li></ul><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>fork 用来创建一个当前进程的复制进程，源进程为父进程，复制的进程为子进程</p><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><p>wait 可以将进程暂停</p><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>exec 可以将当前正在执行的进程改变成其他进程</p><h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><p>exit 退出当前进程(如，对刚登陆的shell使用，则会退出) shell本身也是个进程，也有PID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以用echo $$ 查看当前shell的PID</span><br><span class="line">1509615</span><br></pre></td></tr></table></figure><p>kill 用来结另一个进程</p><h2 id="一个进程如何被执行"><a href="#一个进程如何被执行" class="headerlink" title="一个进程如何被执行"></a>一个进程如何被执行</h2><p>Unix有两种命令 内部和外部命令，内部命令是内置在Unix中的，所以不用创建新的进程</p><p>对于外部命令或外部程序，<strong>以下为Unix执行过程</strong></p><p>在shell中输入一个sl命令</p><p>则Unxi会用<strong>fork</strong>(system call ) 创建一个当前进程的复制进程(子进程) ,</p><ul><li>然后将子进程用<strong>exec</strong>将当前进程改变到要执行的外部命令sl</li><li>同时，将父进程用<strong>wait</strong>暂停执行，直到子进程完成.</li></ul><blockquote><p>进入shell后打开文档进行编辑也是这个过程，父进程将等待到vim退出编辑</p></blockquote><ul><li>在子进程结束后，将执行<strong>exit</strong>，然后转到父进程中。<strong>并将子进程所用的文件、内存全部释放</strong>，让其它进程再使用，此时，像子进程这种已经失效的进程成为<strong>Zombie</strong> ,在进程表中仍然保留其信息，当父进程恢复后，可以查看子进程在进程表的信息，随后系统将自动将信息删除。</li></ul><blockquote><p>Q：上面提到了fork 可以创建一份复制进程和一个父进程，但如何辨识两个进程是父还是子进程？</p><p>A：fork对父进程产生一个返回值(return value) 是进程原PID ,对子进程返回0</p></blockquote><h2 id="最初的进程-init"><a href="#最初的进程-init" class="headerlink" title="最初的进程 init"></a>最初的进程 init</h2><blockquote><p>Q：既然所有进程都由fork创建的子进程，那终极父进程是谁？</p><p>A：init进程</p></blockquote><h4 id="unix启动时"><a href="#unix启动时" class="headerlink" title="unix启动时"></a>unix启动时</h4><p>系统会<strong>”手动“</strong>创建一个<strong>特殊进程</strong>（不用fork创建)，并给一个<strong>PID为0</strong>（**#0）<strong>被称为</strong>”空闲进程“**。</p><ul><li>他执行一些重要功能如初始化数据</li><li>随后**#0进程开始分枝(fork)出进程#1**</li></ul><blockquote><p>#1被#0分支出来的，就是init进程，而<strong>init进程会打开系统的控制台并挂载到根文件系统</strong>。</p><p>然后#1运行&#x2F;etc&#x2F;inittab这里的shell脚本，执行脚本过程中，#1<strong>用fork产生子进程</strong>来执行不同命令，如让用户登陆</p></blockquote><ul><li>随后**#0进入无限循环<strong>但</strong>不做任何事**件(名字由来)</li><li>当目前无任何进程时，系统将进入#0进程，并不做任何事。</li></ul><h4 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h4><blockquote><p>#0这个空闲进程才是真正的终极父进程，#1 init也是个子进程，但考虑到#0完成任务后就消失了(不做任何事，但进程还运行runing)，因此，将#1称为 在活着的(living) 终极父进程</p></blockquote><p>如果某个父进程在子进程结束前先没了，子进程将变成(orphans)<strong>孤儿</strong>，但<strong>init将领养这个孤儿</strong>，让他继续完成未完成的任务。</p><h2 id="前台和后台进程"><a href="#前台和后台进程" class="headerlink" title="前台和后台进程"></a>前台和后台进程</h2><h3 id="后台进程（background）"><a href="#后台进程（background）" class="headerlink" title="后台进程（background）"></a>后台进程（background）</h3><p>让进程自己运行，不用监看他运行，shell将<strong>不会等待</strong>进程完成，就会<strong>提示输入下一条命令</strong></p><p>后台的进程也被称为<strong>自治进程</strong></p><p>如：</p><p>要对一大堆数据排序，要花较长时间，则可以让进程自己运行，人可以再执行一些其它命令。可以用&amp;(ampersan) 实现，告诉进程让他自己运行不用交互。</p><p>在一般命令后添加一个<code>&amp;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort &lt; file &gt; res &amp; </span><br></pre></td></tr></table></figure><p>如果一行有多个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sleep 5;cat /etc/passwd) &amp; #要用括号包起来</span><br></pre></td></tr></table></figure><h3 id="前台进程（foreground）"><a href="#前台进程（foreground）" class="headerlink" title="前台进程（foreground）"></a>前台进程（foreground）</h3><p>shell将<strong>等进程完成后再让输入下一命令</strong></p><h3 id="后台进程注意点"><a href="#后台进程注意点" class="headerlink" title="后台进程注意点"></a>后台进程注意点</h3><ul><li>对于某些需要在进程执行还要输入信息的情况，<strong>如果进程得不到输入，就会一直等待到有输入</strong>，这时可以用：</li></ul><p><code>fg命令</code> 将此<strong>进程移到前台</strong>并输入相关信息</p><ul><li>后台正在的进程会将<strong>输出到监视器</strong>或<strong>指定要某个文件</strong>中(推荐)</li><li>后台进程的<strong>输入会被用&#x2F;dev&#x2F;nul代替</strong>，并且无法用ctrl+c或其它方式中断。当然，可以用<code>kill</code> 来结束后台进程</li></ul><p>当后台进程完成时，shell会发送一条信息如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1] Done ls&gt;temp #表示进程完成</span><br></pre></td></tr></table></figure><p>当然，<strong>shell不会不识相</strong>的突然打断正在进行的工作并发出这条提醒，而在下一次正常提示其它命令信息时<strong>附加这条完成信息</strong></p><ul><li>如<strong>不想要提示信息</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set -o notify 就没了</span><br><span class="line">set +o notify 就有了</span><br></pre></td></tr></table></figure><h2 id="sleep命令-让进程延迟启动"><a href="#sleep命令-让进程延迟启动" class="headerlink" title="sleep命令#让进程延迟启动"></a>sleep命令#让进程延迟启动</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep interval[s|m|h|d]   #interval是延迟时间</span><br></pre></td></tr></table></figure><h4 id="如"><a href="#如" class="headerlink" title="如"></a>如</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sleep 5 5秒（默认以秒为单位）</span><br><span class="line">sleep 5m 5分钟</span><br><span class="line">sleep 20;cat /etc/prasswd &amp;    表示在后台等待20秒，随后将passwd复制到屏幕前</span><br></pre></td></tr></table></figure><h2 id="jobs命令-显示全部的工作-1-x2F-2-x2F-3"><a href="#jobs命令-显示全部的工作-1-x2F-2-x2F-3" class="headerlink" title="jobs命令#显示全部的工作 #1&#x2F;#2&#x2F;#3"></a>jobs命令#显示全部的工作 #1&#x2F;#2&#x2F;#3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps process status #显示全部进程</span><br></pre></td></tr></table></figure><p>ctrl + Z 将当前进程悬挂</p><p>echo $$显示当前shell 的PID</p><p>echo $! 显示上一个被移动到后端的命令</p><h2 id="fg命令-将job移动到前端"><a href="#fg命令-将job移动到前端" class="headerlink" title="fg命令#将job移动到前端"></a>fg命令#将job移动到前端</h2><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><ul><li>fg %[job]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg %num #则为通用方法</span><br></pre></td></tr></table></figure><p>若不添加**[job]**则恢复当前正在执行的job（有+）</p><p>或者可以用某个命令开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg %make / fg %m /fg %?game</span><br></pre></td></tr></table></figure><p>再或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg %+ / fg %-</span><br></pre></td></tr></table></figure><h4 id="常用表"><a href="#常用表" class="headerlink" title="%常用表"></a>%常用表</h4><p>%% 当前job</p><p>%+ 当前job</p><p>%- 之前job</p><p>%n job#n</p><p>%name 用具体名字</p><p>%?name 命令的一部分</p><p>[8]- running make game &gt; res &amp;</p><p>[1]+ running gcc program.c &amp;</p><p>举例：正在执行vim 编辑，突然想查找cal，可以将vim悬挂到后台按ctrl+z，在shell中输入cal 再将vim从后台中fg出来</p><p><code>ctrl+z</code> 后，shell给出一条提示，表示job#1 被停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1]+ Stopped vim testf   #表示testf已经停止</span><br></pre></td></tr></table></figure><p><code>fg %或fg %vim</code> 后可以恢复vim testf</p><h2 id="suspend命令-将当前shell悬挂"><a href="#suspend命令-将当前shell悬挂" class="headerlink" title="suspend命令#将当前shell悬挂"></a>suspend命令#将当前shell悬挂</h2><p>按<code>ctrl+z</code> 可以将job悬挂到后台，除了当前shell。如想将当前shell也悬挂，要用suspend</p><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><ul><li>将当前shell悬挂，可以快速切换不同的身份</li></ul><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><ul><li>suspend [-f]</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul><li>在bash shell下开了tcsh</li><li>在tcsh下，可以用suspend悬挂tcsh并bg到原bash</li></ul><h2 id="多任务同时协作"><a href="#多任务同时协作" class="headerlink" title="多任务同时协作"></a>多任务同时协作</h2><h3 id="jobs展示目前执行的"><a href="#jobs展示目前执行的" class="headerlink" title="jobs展示目前执行的"></a>jobs展示目前执行的</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><ul><li>jobs [-l]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs</span><br><span class="line">[1] Stopped vim testf (被悬挂了)</span><br></pre></td></tr></table></figure><ul><li>jobs -l 可以显示进程PID</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs -l</span><br><span class="line">[1]+ 2288 Stopped vim testf</span><br></pre></td></tr></table></figure><ul><li>其中的+表示，current job正在执行的job</li><li>对应的-表示 之前的job</li></ul><h2 id="bg命令-将job移动到后端"><a href="#bg命令-将job移动到后端" class="headerlink" title="bg命令#将job移动到后端"></a>bg命令#将job移动到后端</h2><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><ul><li>bg [%job]</li></ul><p>用法和fg一样，%后可以接数字、命令、命令部分</p><p>bg一般配合<code>ctrl+z</code> 使用，如<strong>在等待某个程序输出时</strong>，此时不能输入命令，按<code>ctrl+z</code> 将进程悬挂，再输入<code>bg</code> 将进程放入后台。</p><h2 id="ps命令-查看进程信息"><a href="#ps命令-查看进程信息" class="headerlink" title="ps命令#查看进程信息"></a>ps命令#查看进程信息</h2><p>（process status） 查看进程信息</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><ul><li>ps [-aefFly] [-p pid] [-u uid ]</li></ul><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><p>显示哪些文件</p><ul><li>-a 将userid与进程相关</li><li>-e (everything)全部的进程包含系统进程</li><li>-p pid 查找指定PID</li><li>-u uid 查找UID</li><li>-t 只显示系统进程</li></ul><p>显示哪些数据</p><ul><li>默认 PID TTY TIME CMD</li><li>常用 -f UID PID PPID C TTY TIME CMD</li><li>-ly  S UID PID PPID C PRI NI RSS SZ WCHAN TTY TIME CMD</li></ul><p>TTY是终端名</p><p>CMD是正在执行的命令</p><p>TIME是使用cpu时间</p><p>PID是当前进程id</p><p>PPID是父进程id</p><p>WCHAN 等待的状态？有wait&#x2F;finish等值</p><p>S 状态 R runing T suspended S waiting</p><p>SZ 物理大小（占用内存情况）</p><p>ps -ef 常用，可以查看全部的进程并包含UID</p><p>使用ps 查找非系统进程，再显示出PID后再用<code>ps -f -p 1234</code> 显示具体信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">1548435 pts/0 00:00:00 ps</span><br><span class="line">ps -f -p 1548435</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1522200 1522175 0 13:44 pts/0 00:00:00 -bash</span><br></pre></td></tr></table></figure><h2 id="top命令-实时监视系统进程"><a href="#top命令-实时监视系统进程" class="headerlink" title="top命令#实时监视系统进程"></a>top命令#实时监视系统进程</h2><h4 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h4><ul><li>top可以展示系统实时变化的信息</li><li>按h可以查看按键帮助</li></ul><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><ul><li>top -d delay -n count [-p pid[,pid]]</li></ul><h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><ul><li>-d 1 每隔1秒刷新 &#x2F;0.1s</li><li>-p PID 可以显示某个进程详细信息</li><li>-p -d 1 -p 1,2,3,4,5 可以展示多个PID</li></ul><h2 id="pstree命令"><a href="#pstree命令" class="headerlink" title="pstree命令"></a>pstree命令</h2><h4 id="功能：-2"><a href="#功能：-2" class="headerlink" title="功能："></a>功能：</h4><ul><li>展示进程树</li></ul><blockquote><p>上文提到过 ：每个进程都由其它进程复制的，源进程为父，新进程为子，而且子进程也有PID</p><p>#0被手动创建后，fork出子进程#1，再由#1执行各种操作，产生其它进程#3.4.5</p><p>而这些#3,4,5被称为<strong>守护进程</strong>，任务是等待事件发生并做出反馈</p><p>登陆进程会一直等着用户登陆，一旦用户登陆，登陆进程会创建新进程来执行shell</p><p>而shell又会执行命令，创建新进程</p><p>于是，每个进程便有唯一的父进程，整个进程系统可以用一棵树结构表示</p></blockquote><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><ul><li>pstree [-aAcGnpu] [pid|userid]</li></ul><h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><ul><li>-p PID 指定PID&#x2F;UID 将展示属于UID的（全部）进程</li><li>-n 按PID排序</li><li>-a 展示整个命令行</li><li>-u 在子进程与父进程不同UID时标记</li></ul><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><ul><li>用ps或echo $$查出当前shell的PID，再用pstree -p PID查出当前sh的结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $$</span><br><span class="line">1539825</span><br><span class="line">pstree -p 1539825</span><br><span class="line">bash(1522200)---vim(1528516)---bash(1528529)---pstree(1528530)</span><br><span class="line">#可以看到 当前bash下开的命令 vim 后面的bash说明在进行vim后又打开了一个bash</span><br></pre></td></tr></table></figure><h2 id="Unix如何管理文件和进程"><a href="#Unix如何管理文件和进程" class="headerlink" title="Unix如何管理文件和进程"></a>Unix如何管理文件和进程</h2><ul><li>文件有文件系统，有文件树，根是root&#x2F; 每个文件有I-number 查看文件信息时，用ls 只要查看文件的I-node就行</li><li>进程有进程系统，进程树，根是#1 init 每个进程有PID 查看进程时，用ps&#x2F;top 要在进程所在的&#x2F;proc目录下，找到进程对应文件，再从文件中读取出信息</li></ul><blockquote><p>Q:那有什么命令可以打通文件与进程的关系吗？<code>fuser</code></p><p>A:可以列出每个<strong>进程所用到的文件</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name &#x27;*.mp3&#x27; &gt;bar 2&gt;/dev/null &amp;   #让find在后台查找全部的mp3 把输出给bar</span><br><span class="line">[1] 2233        #表示当前进程PID</span><br><span class="line">fuser bar       #查询bar文件，可以得到</span><br><span class="line">bar:2233        #说明当前文件被2233进程使用</span><br></pre></td></tr></table></figure><h2 id="kill命令-给job发送一个信号"><a href="#kill命令-给job发送一个信号" class="headerlink" title="kill命令#给job发送一个信号"></a>kill命令#给job发送一个信号</h2><ul><li>给其它进程发送信号</li><li>停止一个进程 对某些进程不能用ctrl+c停止时（如后台进程）</li></ul><h3 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h3><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><ul><li>kill [-9] PID | jobid</li></ul><h4 id="如-1"><a href="#如-1" class="headerlink" title="如"></a>如</h4><ul><li>kill 2233或像fg&#x2F;bg一样</li><li>kill %vim</li><li>kill %+ 停止当前运行进程</li></ul><p>如果kill也失效 <strong>-9 强制停止</strong>，保证一定会停止</p><p>kill -9 2233 —-但此方法<strong>不会让进程释放使用的资源</strong>，可能会导致文件错误关闭，<strong>要少用</strong></p><h3 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h3><p>kill本来是用于给不同进程发送信号的，但默认下发送结束进程信号，所以被叫做kill</p><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><ul><li>kill [-signal] pid | jobid</li></ul><p>使用kill -l可以查看全部的信号</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统进程管理&quot;&gt;&lt;a href=&quot;#系统进程管理&quot; class=&quot;headerlink&quot; title=&quot;系统进程管理&quot;&gt;&lt;/a&gt;系统进程管理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Unix中，所有信息都由某个文件或程序提供，简单来说，文件只是个输入输出对象，而一个进程才是执</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【linux】学习笔记Chap_13_Shell_variable</title>
    <link href="https://blog.lthero.cn/2022/08/02/linux-learningPathChp13/"/>
    <id>https://blog.lthero.cn/2022/08/02/linux-learningPathChp13/</id>
    <published>2022-08-02T13:13:32.000Z</published>
    <updated>2022-08-02T13:14:04.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【linux】学习笔记Chap-13-Shell-variable"><a href="#【linux】学习笔记Chap-13-Shell-variable" class="headerlink" title="【linux】学习笔记Chap_13_Shell_variable"></a>【linux】学习笔记Chap_13_Shell_variable</h1><h2 id="子进程或子shell"><a href="#子进程或子shell" class="headerlink" title="子进程或子shell"></a>子进程或子shell</h2><p>在登陆后的shell可以作为父shell</p><p>如果输入vi 命令 进入 另一个进程 则称为子进程</p><p>如果输入 bash 也可以创建一个新的shell 也是子sell</p><h3 id="global-and-local-变量"><a href="#global-and-local-变量" class="headerlink" title="global and local 变量"></a>global and local 变量</h3><p>像IGNOREEOF就是全局变量，他们可以用于任何进程 而且变量唯一</p><p>环境变量全部用<strong>大写表示</strong> 一般以<strong>小写命令局部变量</strong>（shell）变量</p><p>全部变量<strong>既是shell 也是 environment 变量</strong>不存在单纯的环境变量</p><p>想比较<strong>单纯shell变量</strong>和<strong>全部变量</strong>可以使用<strong>env</strong></p><p><strong>若只在set中</strong>,<strong>不在env中</strong>就是纯shell变量 （set中变量也比env多）</p><p><strong>两者都在的就是全部变量</strong></p><p>默认创建的变量都是shell变量</p><h2 id="创建环境变量—–export"><a href="#创建环境变量—–export" class="headerlink" title="创建环境变量—–export"></a>创建环境变量—–export</h2><p>export 来创建一个shell + environment 变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lthero=smart</span><br><span class="line">export lthero</span><br></pre></td></tr></table></figure><p>即可生效</p><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lthero=smart;export lthero</span><br></pre></td></tr></table></figure><p>又或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export lthero=smart HOME=&quot;/etc/home&quot;....</span><br></pre></td></tr></table></figure><h2 id="查看环境变量—–env"><a href="#查看环境变量—–env" class="headerlink" title="查看环境变量—–env"></a>查看环境变量—–env</h2><p>env 可以查看全部的默认变量(环境变量)</p><p>用set 可以查看全部的shell 变量</p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>unset 删除一个变量</p><p>unset lthero HOME 只能用unset or un-export 删除shell&amp;环境变量</p><h2 id="echo-引号用法"><a href="#echo-引号用法" class="headerlink" title="echo 引号用法"></a>echo 引号用法</h2><p>echo ‘……’单引号内容的$会失效，将只输出$</p><p>“……”双引号内$() 可以起作用 $()表达执行某个命令</p><h3 id="用-连接长内容"><a href="#用-连接长内容" class="headerlink" title="用\连接长内容"></a>用\连接长内容</h3><p>echo test stetz stet \</p><p>test test ……….. \</p><p>可以换行 但内容是相连的，输出<strong>不会有换行</strong></p><h3 id="用引号连接长内容"><a href="#用引号连接长内容" class="headerlink" title="用引号连接长内容"></a>用引号连接长内容</h3><p>echo **’**test stets stet</p><p>etste**’**</p><p>或者用”” 内容会保留输入格式 即<strong>有换行</strong></p><h2 id="命令分类"><a href="#命令分类" class="headerlink" title="命令分类"></a>命令分类</h2><h3 id="internal-builtin）内部原生命令"><a href="#internal-builtin）内部原生命令" class="headerlink" title="internal(builtin）内部原生命令"></a>internal(builtin）内部原生命令</h3><p>shell会查找命令的程序位置再执行</p><h3 id="external外部命令"><a href="#external外部命令" class="headerlink" title="external外部命令"></a>external外部命令</h3><p>shell 会在 PATH这个环境变量中，优先查找外部命令程序位置</p><p>echo $PATH 可以查看全部外部命令存入位置 可以自己再添加 &#x2F;bin:&#x2F;usr&#x2F;bin: …. 用冒号分隔</p><h3 id="type检测命令类型"><a href="#type检测命令类型" class="headerlink" title="type检测命令类型"></a>type检测命令类型</h3><p>可以用type 检测所用命令是否为原生命令</p><p><code>type date time set</code> 一次查三个</p><p>date is &#x2F;bin&#x2F;date</p><p>time is a shell keyword  &#x2F;&#x2F;<strong>time 是keyword</strong> 也是原生在shell<strong>内部的命令</strong></p><p>set is a shell builtin   &#x2F;&#x2F;<strong>原生命令</strong></p><h3 id="命令help"><a href="#命令help" class="headerlink" title="命令help"></a>命令help</h3><p>help 可以列出全部的builtin命令 其中 help也是builtin命令</p><p>对于<strong>内置命令</strong>，可以查看<strong>基本用法</strong></p><p>” help 命令“ 和“命令 –help”一样</p><p>help -s pwd 将只显示其选项 参数</p><p>对于<strong>外置命令，用</strong></p><p>“命令 –help”</p><h2 id="export—-添加自定义路径"><a href="#export—-添加自定义路径" class="headerlink" title="export—-添加自定义路径"></a>export—-添加自定义路径</h2><p>对于已经设置好的PATH 可以用export 添加自己的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exprot PATH=&quot;$PATH:/usr/bin/myfile&quot;</span><br></pre></td></tr></table></figure><p>其中 myfile 里面可以放入自定义的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exprot PATH=&quot;/usr/bin/myfile:$PATH&quot;</span><br></pre></td></tr></table></figure><p>此用法将自定义路径<strong>添加到前面</strong></p><p>添加到前面后，如果自己有同名的内置sh文件，shell 会<strong>优先执行自定义</strong>的，再执行内置的</p><h3 id="设置PATH"><a href="#设置PATH" class="headerlink" title="设置PATH"></a>设置PATH</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exprot PATH=&quot;/bin:/usr/bin:/usr/local/bin&quot;....</span><br></pre></td></tr></table></figure><h3 id="设置终端命令符号"><a href="#设置终端命令符号" class="headerlink" title="设置终端命令符号"></a>设置终端命令符号</h3><p>在<code>/root/.bashrc</code> 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&quot;\[\e[33;1m\]\u@\h:\w# \[\e[0m\]&quot;</span><br></pre></td></tr></table></figure><p>32是绿色 33淡黄色</p><p>可以设置命令提示符 成为绿色 \u 命令 user \h hostname \w 是当前全路径 \W 只显示当前路径</p><p><strong>修改后立即生效source &#x2F;etc&#x2F;profile</strong></p><p><a href="https://www.cnblogs.com/kevingrace/p/5985970.html">详细</a></p><p>另外：</p><ul><li><code>vim /etc/motd</code> 可以修改连接上linux对话</li></ul><p>如：Hello,Welcome to Linux!</p><ul><li><code>/etc/profile.d</code> 目录下添加自定义sh脚本将连接到linux时执行</li></ul><h4 id="上面PS1中的用法是一种特殊写法"><a href="#上面PS1中的用法是一种特殊写法" class="headerlink" title="上面PS1中的用法是一种特殊写法"></a>上面PS1中的用法是一种特殊写法</h4><p>\u代表 $USER(环境变量) 当前用户</p><p>\w代表$PWD 当前路径</p><p>\h代表$(hostaname) 主机名</p><p>\d代表date 时间</p><p>@代表time  运行时间</p><p>!代表历史命令</p><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history 将展示全部的历史记录 如果想要运行某条 num是命令编号</p><p>可以<code>!num</code> 将执行那条命令， <code>!!</code> 将自动执行上一条命令</p><h3 id="fc"><a href="#fc" class="headerlink" title="fc"></a>fc</h3><p>fc 将自动调用vim 编辑器修改命令 修改完成并自动r执行</p><p>fc -l 显示历史近20条命令</p><p><code>fc -s num</code> 和 <code>! num</code> 一样 执行指定命令</p><p><code>fc num</code> 将编辑此命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【linux】学习笔记Chap-13-Shell-variable&quot;&gt;&lt;a href=&quot;#【linux】学习笔记Chap-13-Shell-variable&quot; class=&quot;headerlink&quot; title=&quot;【linux】学习笔记Chap_13_Shell_v</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【linux】学习笔记Chap_14_Init_file</title>
    <link href="https://blog.lthero.cn/2022/08/02/linux-learningPathChp14/"/>
    <id>https://blog.lthero.cn/2022/08/02/linux-learningPathChp14/</id>
    <published>2022-08-02T13:12:05.000Z</published>
    <updated>2022-08-07T10:36:17.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Init-file"><a href="#Init-file" class="headerlink" title="Init_file"></a>Init_file</h1><blockquote><p>初始文件</p></blockquote><h3 id="命令习惯rc"><a href="#命令习惯rc" class="headerlink" title="命令习惯rc"></a>命令习惯rc</h3><p>run commonds 是一种配置文件，如 .bashrc .exrc</p><p>这些命令后在某个程序启动时自动运行</p><p>作为一个命名习惯， 如 我写了个foo 的程序 那么将<strong>初始化文件</strong></p><p>写作为 <strong>.foorc</strong> (foo 只是随便哪个名字)</p><h2 id="文档编辑器"><a href="#文档编辑器" class="headerlink" title="文档编辑器"></a>文档编辑器</h2><h3 id="nano-和-pico-和-vi"><a href="#nano-和-pico-和-vi" class="headerlink" title="nano 和 pico 和 vi"></a>nano 和 pico 和 vi</h3><p>vi 常用于 CLI 命令行接口</p><p>nano 和 pico 常用于GUI 图形化接口</p><h2 id="Shell-几种形式"><a href="#Shell-几种形式" class="headerlink" title="Shell 几种形式"></a>Shell 几种形式</h2><p>shell 的几种形式 login shell &amp;&amp; non login shell</p><p>交互的划分 interactive shell &amp;&amp; non-interactive shell</p><h3 id="login-shell"><a href="#login-shell" class="headerlink" title="login shell"></a>login shell</h3><p>login 需要用户名密码进入 ，一般的 ssh (secure shell) 登陆都用login shell</p><p>login shell 初始化，会执行 login file 和 环境 file ，顺序如下</p><ol><li>&#x2F;etc&#x2F;profile 这个是全局的配置 不管哪个用户登陆都会读取</li><li>&#x2F;etc&#x2F;profile里面会执行<strong>profile.d文件夹内</strong>的所有sh文件</li><li>&#x2F;root&#x2F;.bash_profile或 &#x2F;root&#x2F;.profile 或 &#x2F;root&#x2F;.bash_login 按顺序找到哪个，就执行哪个，只执行一个<br>这三个文件都会读取 &#x2F;root&#x2F;.bashrc (环境变量文件)</li></ol><h3 id="non-login-shell"><a href="#non-login-shell" class="headerlink" title="non-login shell"></a>non-login shell</h3><p>开non-login shell，例如，在login shell 中</p><ol><li>输入<strong>bash开的新shell</strong></li><li>通过 <strong>su username 开的 shell</strong></li></ol><p>su -username 可以开login shell 不加-开的就是non login shelll</p><h3 id="interactive-shell"><a href="#interactive-shell" class="headerlink" title="interactive shell"></a>interactive shell</h3><p>有交互的 shell 即 等待输入命令并解释执行命令 等待下一个命令</p><h3 id="non-interactive-shell"><a href="#non-interactive-shell" class="headerlink" title="non interactive shell"></a>non interactive shell</h3><p>一般的shell 脚本执行 如 bash hello.sh 即 <strong>不与用户交互 一次性执行脚本,<strong>哪怕sh中</strong>有让用户输入的过程也不是可交互脚本</strong></p><h3 id="echo-查看Shell类型"><a href="#echo-查看Shell类型" class="headerlink" title="echo $-查看Shell类型"></a>echo $-查看Shell类型</h3><p><code>echo $-</code> 可以查看当前是否为交互shell</p><p>输出有“himBH”就是交互shell</p><p>在写shell脚本头部时：</p><p><code>#!bin/bash</code>        是 non login &amp; non interactive shell</p><p><code>#!bin/bash --login</code> 是login non &amp; interactive shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Init-file&quot;&gt;&lt;a href=&quot;#Init-file&quot; class=&quot;headerlink&quot; title=&quot;Init_file&quot;&gt;&lt;/a&gt;Init_file&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;初始文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【linux】学习笔记Chap_15_I/O</title>
    <link href="https://blog.lthero.cn/2022/08/02/linux-learningPathChp15/"/>
    <id>https://blog.lthero.cn/2022/08/02/linux-learningPathChp15/</id>
    <published>2022-08-02T13:10:46.000Z</published>
    <updated>2022-08-02T13:11:29.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><h2 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h2><p>一旦登陆 系统就设置一个标准输入（从键盘） 标准输出和标准错误到屏幕</p><p>如果想将输出写入文件中</p><h3 id="gt-覆盖写入"><a href="#gt-覆盖写入" class="headerlink" title="&gt;覆盖写入"></a>&gt;覆盖写入</h3><p>用 “ &gt; “符号，如： sort nums &gt; file 这是覆盖写入 如果文件不存在就创建 如果存在就覆盖</p><h3 id="gt-gt-追加写入"><a href="#gt-gt-追加写入" class="headerlink" title="&gt;&gt;追加写入"></a>&gt;&gt;追加写入</h3><p>用 “&gt;&gt;” ，如： sort nums &gt;&gt; file 追加写入 如果不存在就创建 存在就追加</p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>如果 <strong>不想直接用“&gt;”覆盖</strong> 可以设置<strong>变量“</strong>noclobber”让覆盖写入变成 <strong>“&gt;|”，可以防止误触</strong></p><p><code>set -o noclobber</code> 则生效</p><p>写入 <code>/root/.bashrc</code> 中永远生效</p><h2 id="从文件中读入数据"><a href="#从文件中读入数据" class="headerlink" title="从文件中读入数据"></a>从文件中读入数据</h2><h3 id="lt-读入"><a href="#lt-读入" class="headerlink" title="&lt;读入"></a>&lt;读入</h3><p><code>&lt; file</code>  将file文件输出到某个指令或<code>sort &lt;/etc/passwd</code>  将密码排序后输出到屏幕中</p><p><strong>可以同时读入和写入</strong></p><p><code>sort &lt; rawdata &gt;report</code> 从<strong>rawdata</strong> 读入到sort 再将 sort 的结果 写入到<strong>report</strong></p><p><strong>但读入文件和保存文件不能同一个，否则文件内容清空</strong></p><p>因为，保存时按<strong>覆盖保存，先将文件”A”清空，再将文件”A”（空的）复制到文件”A”中</strong></p><p>sort 命令是原生的 可以对文件内容排序 按数值或字母</p><h2 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h2><p>有两种输出 shell 分为方便用户使用 可以将两种输出分开</p><h3 id="stand-out-amp-amp-stand-error"><a href="#stand-out-amp-amp-stand-error" class="headerlink" title="stand out &amp;&amp; stand error"></a>stand out &amp;&amp; stand error</h3><p><code>sort 1 &gt; res_out</code> 代表输出<strong>正确结果</strong> 和 默认 <code>sort &gt; res_out</code> 一样</p><p><code>sort 2 &gt; res_error</code> 输出<strong>错误结果</strong></p><p><code>sort 2 &gt;&gt; res_error</code><strong>追加</strong>写入<strong>错误结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort 0 &lt; res` 就是 stand in 默认用 `sort &lt; res</span><br></pre></td></tr></table></figure><h3 id="“2-gt-amp-1“同时写入正确-amp-错误信息"><a href="#“2-gt-amp-1“同时写入正确-amp-错误信息" class="headerlink" title="“2&gt;&amp;1“同时写入正确&amp;错误信息"></a>“2&gt;&amp;1“同时写入正确&amp;错误信息</h3><p><code>sort 1 &gt;res 2&gt;&amp;1</code> 表示将 正常输出到文件res 中 将错误信息也输出到res中</p><p><code>sort &gt;res 2&gt;&amp;1</code>等同效果</p><p><code>sort &gt;&gt; res 2&gt;&amp;1</code>追加写入</p><p><code>sort &amp;&gt; res</code> 也表示同时写入 <strong>正确和错误输出</strong></p><p><strong>举例</strong></p><ul><li><code>ls Chap_15.txt b &gt; res</code></li></ul><p>b文件不存在，将只会看到 Chap_15的文件消息（只有<strong>正确信息</strong>）</p><ul><li><code>ls Chap_15.txt b &amp;&gt; res</code></li></ul><p>则 res有<strong>Chap_15文件信息</strong>和b文件<strong>不存在的错误信息</strong></p><ul><li><code>ls Chap_15.txt b &gt;res 2 &gt;error</code></li></ul><p>则分开<strong>写入到正确、错误信息</strong></p><h3 id="使用-gt-的例子"><a href="#使用-gt-的例子" class="headerlink" title="使用&gt;的例子"></a>使用&gt;的例子</h3><p>文件名” PEOPLE “包含一些联系人信息</p><p>现在，如果文件包含”Hello” ，就将文件排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep hello people &amp;&amp; sort people &gt; res</span><br></pre></td></tr></table></figure><p>grep “查看内容” “文件名”<strong>成功执行后</strong>再执行 <strong>排序</strong> 再将结果<strong>写入res</strong></p><h2 id="SubSHell"><a href="#SubSHell" class="headerlink" title="SubSHell"></a>SubSHell</h2><h3 id="子shell-amp-amp-父shell"><a href="#子shell-amp-amp-父shell" class="headerlink" title="子shell &amp;&amp; 父shell"></a>子shell &amp;&amp; 父shell</h3><p>当shell 执行一个程序时， shell 是父程序 被执行程序是子程序</p><p>父shell 等着子shell 死亡后 再夺回控制权</p><p>如：在登陆后的shell 中输入 bash 则进入了子shell ,父shell 开始等待</p><p>子shell将继承父shell 的环境，但不会回传出父shell 任何信息，而且不会对父shell 造成影响</p><p><strong>相当于是个虚拟机</strong></p><h3 id="x2F-dev-x2F-null-是个垃圾箱"><a href="#x2F-dev-x2F-null-是个垃圾箱" class="headerlink" title="&#x2F;dev&#x2F;null 是个垃圾箱"></a>&#x2F;dev&#x2F;null 是个垃圾箱</h3><p>如果只要看正常输出，不要错误输出 <code>update 2&gt; /dev/null</code></p><h2 id="Piplines-管道符"><a href="#Piplines-管道符" class="headerlink" title="Piplines 管道符"></a>Piplines 管道符</h2><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li><strong>将命令的标准输出给另一个命令的标准输入</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 | grep hello | wc - l</span><br></pre></td></tr></table></figure><p> 在文件1、2里面<strong>找“hello”</strong>并<strong>统计行数</strong></p><ul><li>但Pipline只将前面的<strong>标准输出</strong>作为后面的<strong>“标准输入”，不能实现参数传递</strong></li></ul><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>cat 命令可以接收文件名作为参数，执行后会显示出文件的内容。但是 cat 命令<strong>不能</strong>直接<strong>从标准输入接收参数</strong>，正如下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#cat后面直接指定china.txt参数, 可以展示china.txt文件的内容</span><br><span class="line">[roc@roclinux ~]$ cat china.txt</span><br><span class="line">hello beijing</span><br><span class="line"> </span><br><span class="line">#我们尝试通过标准输入把参数传给cat, 结果却只是显示了文件名而已</span><br><span class="line">[roc@roclinux ~]$ echo china.txt | cat</span><br><span class="line">china.txt</span><br></pre></td></tr></table></figure><ul><li>但可以用 xargs实现传递参数</li></ul><h2 id="xargs-传递参数"><a href="#xargs-传递参数" class="headerlink" title="xargs 传递参数"></a>xargs 传递参数</h2><ul><li>execute arguments的缩写</li></ul><h3 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h3><ul><li>xargs 会将前一个命令的标准输出转换成命令参数。</li></ul><h3 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[roc@roclinux ~]$ echo china.txt | xargs cat</span><br><span class="line">hello beijing</span><br></pre></td></tr></table></figure><ul><li>xargs 的标准输入中出现的“<strong>换行符、空格、制表符</strong>”都将被<strong>空格</strong>取代。下面来看一个带有换行符的例子：</li></ul><h3 id="空格取代换行符"><a href="#空格取代换行符" class="headerlink" title="空格取代换行符"></a><strong>空格</strong>取代<strong>换行符</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[roc@roclinux ~]$ echo -e &quot;china.txt\njapan.txt&quot;</span><br><span class="line">china.txt</span><br><span class="line">japan.txt</span><br><span class="line"> </span><br><span class="line">#可见, 换行符和空格的作用一样</span><br><span class="line">[roc@roclinux ~]$ echo -e &quot;china.txt\njapan.txt&quot; | xargs cat</span><br><span class="line">hello beijing</span><br><span class="line">hello tokyo</span><br></pre></td></tr></table></figure><ul><li>当命令参数中包含了空格时，情况就会复杂很多，一起来看一个示例。</li></ul><h3 id="参数中包含了空格"><a href="#参数中包含了空格" class="headerlink" title="参数中包含了空格"></a>参数中包含了空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#我们创建了3个日志文件, 且故意让文件名称中都含有空格</span><br><span class="line">[roc@roclinux ~]$ for((i=0;i&lt;3;i++)); do touch &quot;test $&#123;i&#125;.log&quot;;done</span><br><span class="line"> </span><br><span class="line">#我们列出创建的文件</span><br><span class="line">[roc@roclinux ~]$ ls -1F</span><br><span class="line">test 0.log</span><br><span class="line">test 1.log</span><br><span class="line">test 2.log</span><br><span class="line"> </span><br><span class="line">#我们来运行xargs命令, 发现报错了 </span><br><span class="line">#-print 指定分隔符 默认为\n</span><br><span class="line">[roc@roclinux ~]$  find . -name &#x27;*.log&#x27; -print | xargs rm</span><br><span class="line">rm: cannot remove ‘./test’: No such file or directory</span><br><span class="line">rm: cannot remove ‘1.log’: No such file or directory</span><br></pre></td></tr></table></figure><p>我们在当前目录中创建了 3 个文件，文件名中间都含有空格。</p><p>但当 find 命令获取到的文件名经过 xargs 传送给 rm 命令时，文件“.&#x2F;test 1.log”就变成了“.&#x2F;test”和“1.log”两个文件了。</p><p>即原本 <strong>3 个文件名刹那间就变成了 6 个文件名</strong>，而这 6 个文件其实并不存在，从而引发了错误。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>这个错误的根源就在于 xargs 默认的分隔符是空格，如果我们能将 xargs 的分隔符改成其他符号，问题就迎刃而解了！</li></ul><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul><li>xargs 提供了<code>-0</code>选项，允许将 NULL 作为分隔符</li><li>find 命令提供的对应方法是 <code>-print0</code> 选项产生以 NULL 字符作为分隔符的输出</li></ul><p>在文件名之后输出 NULL，而不像 <strong>-print 选项那样输出换行符</strong>（换行符会被 xargs 替换成空格）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@lthero:videos$ find . -name &#x27;*.log&#x27; -print0</span><br><span class="line">./test 1.log./test 0.log./test 2.log</span><br></pre></td></tr></table></figure><p>于是，使用下命令，可以找出包含空格的文件并删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.log&#x27; -print0 | xargs -0 rm</span><br></pre></td></tr></table></figure><h2 id="Tee"><a href="#Tee" class="headerlink" title="Tee"></a>Tee</h2><p>tee 可以<strong>读一个标准输入</strong>并 <strong>同时复制到标准输出</strong> 和 <strong>文件中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 | tee file3 | grep hello</span><br></pre></td></tr></table></figure><p>cat 读取 file1 file2文件 并给tee 保存在file3中，并输出到标准输出，grep又从标准输出收到信息，再搜索”hello”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 file3 | tee file4 file5</span><br></pre></td></tr></table></figure><p>将1\2\3的文件<strong>合并后</strong>复制到4、5中而且内容一样</p><p>默认下 如果文件不在，tee可以创建，存在就覆盖写入</p><p>tee -a 可以追加写入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;I-x2F-O&quot;&gt;&lt;a href=&quot;#I-x2F-O&quot; class=&quot;headerlink&quot; title=&quot;I&amp;#x2F;O&quot;&gt;&lt;/a&gt;I&amp;#x2F;O&lt;/h1&gt;&lt;h2 id=&quot;标准输入&quot;&gt;&lt;a href=&quot;#标准输入&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【linux】学习笔记Chap_22_强大的Vim编程</title>
    <link href="https://blog.lthero.cn/2022/08/02/linux-learningPathChp22/"/>
    <id>https://blog.lthero.cn/2022/08/02/linux-learningPathChp22/</id>
    <published>2022-08-02T13:08:44.000Z</published>
    <updated>2022-08-07T10:34:58.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><h4 id="建议全程使用英语输入法"><a href="#建议全程使用英语输入法" class="headerlink" title="建议全程使用英语输入法"></a><strong>建议全程使用英语输入法</strong></h4><ul><li>简介：vim 即 vi improved，现在已经全面替代vi，如果想用vi ，只能用vim -C 唤出vi模式。</li><li>xxxxxxxxxx10 1# 启动frps2sudo systemctl start frps3# 自启动4sudo systemctl enable frps5# 重启应用6sudo systemctl restart frps7# 停止应用8sudo systemctl stop frps9# 查看应用的日志10sudo systemctl status frpsshell</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim flie    #打开文件 可编写</span><br><span class="line">view file 或 vim -R file  #只读文件</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>vim 打开文件将进入<strong>命令模式</strong>，此时不能直接编辑文档</p><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><ul><li>h 向左移动光标</li><li>l (小写的L)向右移动光标</li><li>j 向下移动光标</li><li>k 向上移动光标</li></ul><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1627286989-Snipaste_2021-07-26_09-18-30.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1627286989-Snipaste_2021-07-26_09-18-30.png" alt="img"></a></p><h3 id="光标跃起"><a href="#光标跃起" class="headerlink" title="光标跃起"></a>光标跃起</h3><p>如果先按一个<strong>数字</strong>，再按<strong>光标移动</strong>对应的四个键，可以指定跳过多少</p><ul><li>0 移动光标到行首</li><li>^ 移动光标到行首</li><li>$ 移动光标到行尾</li><li>w 移动到<strong>下个单词</strong>开始</li><li>e 移动到<strong>下个单词</strong>结尾</li><li>b 移动到<strong>上个单词</strong>开始</li></ul><h3 id="文章跳转"><a href="#文章跳转" class="headerlink" title="文章跳转"></a>文章跳转</h3><ul><li>gg 跳转到文章第一行</li><li>G 跳转到文章最后一行</li><li>10G 转到第10行，numG是第num行</li><li><strong>:10</strong> 也是转到第10行，先使用 <code>：set number</code> 唤出编号（下面有提到）</li></ul><h3 id="文章翻页"><a href="#文章翻页" class="headerlink" title="文章翻页"></a>文章翻页</h3><ul><li>^F 向下 翻页 ctrl+f</li><li>^B 向上 翻页 ctrl+b</li><li>^U 向上 翻半页 ctrl+u</li><li>^D 向下 翻半页 ctrl+d</li></ul><h3 id="设置行号"><a href="#设置行号" class="headerlink" title="设置行号"></a>设置行号</h3><ul><li>：set number 标出行号</li><li>：set nonumber 取消行号</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>&#x2F; pattern <strong>向下</strong>查找内容（pattern是要查找的文本，以下类同）</li></ul><p>在<strong>命令模式</strong>下，按**&#x2F;<strong>键后：命令行（</strong>屏幕底部<strong>）会显示一个</strong>&#x2F;**字符，随后可以键入想查找的文本，再按回车，vim就会查找下一个匹配的文本。</p><p><strong>如：</strong></p><p><code>/lthero</code> 按下回车后，光标就会跳转到该文本上。此时按<strong>n</strong>就会跳到<strong>下一个</strong>匹配的文本，按<strong>N</strong>会跳到<strong>上一个</strong>匹配的文本。</p><ul><li>? pattern <strong>向上</strong>查找内容（pattern)</li></ul><h3 id="替换与复制"><a href="#替换与复制" class="headerlink" title="替换与复制"></a>替换与复制</h3><ul><li>yy <strong>复制光标所在行</strong></li><li>p <strong>粘贴</strong>剪切版的内容</li></ul><p><strong>全文复制：</strong></p><ul><li>ggyG：将光标移动到文章开头，复制到文章末尾</li><li>Gygg：将光标移动到文章末尾，复制到文章开头</li></ul><p><strong>替换</strong></p><ul><li>r 替换一个字符 。按一个r 替换一个字符</li><li>R 进入<strong>替换模式，将一直替换，</strong>直到按^C退出</li></ul><p><strong>指定行替换(进入输入命令的模式，按shift+:)</strong></p><ul><li><strong>:s&#x2F;pattern&#x2F;replace&#x2F;</strong> 可将光标所在行的<strong>pattern</strong>替换成指定内容(<strong>replace</strong>)，只替换从第一行中的第一个匹配项、</li><li><strong>:s?pattern?replace 则从最后一行开始，</strong>替换<strong>这行第一个</strong>匹配项</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:Linux Linux Linux</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">:s/Linux/Unix/</span><br><span class="line">#结果</span><br><span class="line">1:Unix Linux Linux</span><br></pre></td></tr></table></figure><ul><li><strong>:<strong>s&#x2F;pattern&#x2F;replace</strong>&#x2F;g</strong> (global) 一整行的pattern全部替换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:Linux Linux Linux </span><br><span class="line">~</span><br><span class="line">~ </span><br><span class="line">:s/Linux/Unix/g</span><br><span class="line">#结果 </span><br><span class="line">1:Unix Unix Unix</span><br></pre></td></tr></table></figure><ul><li><strong>:<strong>s&#x2F;pattern&#x2F;replace</strong>&#x2F;gc</strong> (global confirm) 整行替换 替换之前将咨询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace with Unix (y/n/a/q/l/^E/^Y)?</span><br></pre></td></tr></table></figure><ul><li><strong>: NUM</strong>s&#x2F;pattern&#x2F;replace**&#x2F;g** 将第NUM行，整行的pattern替换**(如果不加&#x2F;g，还是只换一个）**</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10:Linux Linux Linux </span><br><span class="line">~</span><br><span class="line">~ </span><br><span class="line">:10s/Linux/Unix/g</span><br><span class="line">#结果 </span><br><span class="line">10:Unix Unix Unix</span><br></pre></td></tr></table></figure><ul><li><strong>: N,M</strong>s&#x2F;pattern&#x2F;replace**&#x2F;g** 将<strong>N-M</strong>行内进行替换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10:Linux Linux Linux </span><br><span class="line">11:Linux Linux Linux </span><br><span class="line">12:Linux Linux Linux </span><br><span class="line">13:Linux Linux Linux </span><br><span class="line">14:Linux Linux Linux </span><br><span class="line">~</span><br><span class="line">~ </span><br><span class="line">:10,14s/Linux/Unix/g</span><br><span class="line">#结果 </span><br><span class="line">10~14:Unix Unix Unix</span><br></pre></td></tr></table></figure><p><strong>全文替换</strong></p><ul><li>用**.(dote)<strong>代表当前行，</strong>$(dollar)<strong>代表最后一行，</strong>%** 代表在编辑缓存区(已经保存的文章)的<strong>全部行</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:.,$s/pattern/replace/g   全文替换</span><br><span class="line"></span><br><span class="line">:1,.s/pattern/replace/g    第一行到当前行替换</span><br><span class="line"></span><br><span class="line">:1,$s/pattern/replace/g     或者 :%s/pattern/replace/g全文替换</span><br></pre></td></tr></table></figure><h3 id="删除-x2F-剪切"><a href="#删除-x2F-剪切" class="headerlink" title="删除&#x2F;剪切"></a>删除&#x2F;剪切</h3><ul><li>x 删除光标字符，其实会剪切到剪切板上，按p可以恢复(下面有讲到）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heiQnous #将光标放在Q处 </span><br><span class="line">按x</span><br><span class="line">heinous</span><br></pre></td></tr></table></figure><ul><li>X 删除光标左边字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heiQnous #将光标放在n处 </span><br><span class="line">按X</span><br><span class="line">heinous</span><br></pre></td></tr></table></figure><ul><li>D 从<strong>光标处</strong>删除到<strong>行尾</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux Unix PHP MySQL</span><br><span class="line">光标放在H处</span><br><span class="line">按D</span><br><span class="line">Linux Unix P</span><br></pre></td></tr></table></figure><ul><li>dmve (加上方向键<strong>左右</strong>) d左 就等同于X d右 等同于x</li><li>dd 删除（剪切）<strong>一行</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">：10,20d #删除10-20行</span><br><span class="line"> ：1,$d #删除全文</span><br></pre></td></tr></table></figure><ul><li><strong>db</strong> 删除光标前<strong>一个单词</strong></li></ul><p><strong>全文删除：</strong></p><ul><li>ggdG：将光标移动到文章开头，删除到文章末尾</li><li>Gdgg：将光标移动到文章末尾，删除到文章开头</li></ul><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><ul><li>u 撤销一步</li></ul><h3 id="从删除中恢复-x2F-粘贴"><a href="#从删除中恢复-x2F-粘贴" class="headerlink" title="从删除中恢复&#x2F;粘贴"></a>从删除中恢复&#x2F;粘贴</h3><ul><li>p 将<strong>删除内容</strong>或<strong>剪贴板</strong>内容恢复，恢复到光标<strong>下一行</strong></li></ul><p><strong>#1、2：指行号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1:Linux Linux Linux</span><br><span class="line">2:Unix Unix Unix</span><br><span class="line">:1d</span><br><span class="line">#将第一行删除</span><br><span class="line">2：Unix Unix Unix</span><br><span class="line">#光标在第一个U</span><br><span class="line">#按p</span><br><span class="line">1:Unix Unix Unix</span><br><span class="line">2:Linux Linux Linux</span><br></pre></td></tr></table></figure><ul><li>P 恢复到光标<strong>上一行</strong></li></ul><h3 id="复制-amp-移动行"><a href="#复制-amp-移动行" class="headerlink" title="复制&amp;移动行"></a>复制&amp;移动行</h3><ul><li><strong>命令：co</strong>(copy)</li></ul><p><strong>:</strong> 5<strong>co</strong>10 复制第5行，插入到<strong>第10行下面</strong></p><p><strong>:</strong> 5**,<strong>10</strong>co<strong>20 复制</strong>5~10行，一同<strong>插入到</strong>第20行下面**</p><ul><li><strong>命令：m</strong>(move)</li></ul><p><strong>:</strong> 5m10 移动第5行，插入到<strong>第10行下面</strong></p><p><strong>:</strong> 4,8m20 移动<strong>4~8</strong>行，一同到<strong>20行下面</strong></p><p><strong>:</strong> 1,.m$ 第一行~当前移动，插入到最后一行</p><h3 id="合并两行"><a href="#合并两行" class="headerlink" title="合并两行"></a>合并两行</h3><p>按大写<strong>J</strong> 将当前行和下一行合并，在合并处会自动留下一个空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this is a</span><br><span class="line">short sentence</span><br><span class="line">按J</span><br><span class="line">this is a short sentence</span><br></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>进入命令模式后，按冒号，进入执行命令模式</p><p><strong>:!date</strong>，可以在原来的shell中执行命令，并能看到结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[No write since last change]</span><br><span class="line">Mon 26 Jul 2021 03:19:59 PM CST</span><br><span class="line"></span><br><span class="line">Press ENTER or type command to continue  #按return返回</span><br></pre></td></tr></table></figure><p>:!! 执行上一条命令</p><p>:!sh 将暂停vi，打开一个新的shell，<strong>如 !bash</strong></p><h3 id="编辑过程中切换文件"><a href="#编辑过程中切换文件" class="headerlink" title="编辑过程中切换文件"></a>编辑过程中切换文件</h3><ul><li>:e document</li></ul><p>切换新文件时，原先在缓存中的文件就会丢失，所以要保存原文件</p><p>一般地，若未保存，vim不让切换</p><p>用<code>e! document</code> 强制切换</p><h3 id="宏Macros"><a href="#宏Macros" class="headerlink" title="宏Macros"></a>宏Macros</h3><ul><li>:map x commands</li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h4><ul><li>将命令以x代替</li></ul><p>**如:*<em>在每行首添加注释&#x2F;</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:map ^_ I/*&lt;ESC&gt;      #（直接输入&lt;ESC&gt;) 或者 ESC是^[ ，删除是^H</span><br></pre></td></tr></table></figure><p>其中的I是进入到当前行首，</p><p>用unmap取消宏命令</p><ul><li>:unmap x</li></ul><h3 id="将已有文件插入"><a href="#将已有文件插入" class="headerlink" title="将已有文件插入"></a>将已有文件插入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[line]r file    r是read，表示在line行插入file文件内容</span><br></pre></td></tr></table></figure><ul><li>功能：将file整个讲稿并插入到指定行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:10r file  #插入第10行</span><br><span class="line">:0r file    #到第一行</span><br><span class="line">:$r file    #到末尾</span><br><span class="line">:r file     #到光标行</span><br></pre></td></tr></table></figure><ul><li>如果不写数字，vim将自动添加<strong>光标所在行</strong></li></ul><h4 id="结合执行命令"><a href="#结合执行命令" class="headerlink" title="结合执行命令"></a><strong>结合执行命令</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:r !ls    #将 ls 结果添加到当前行</span><br><span class="line">:0r !date  #添加时间到文章开头</span><br><span class="line">:0r !whoami #添加作者</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ul><li>**:**w 写入原文件</li></ul><p>**:**w file 写入新文件</p><ul><li>**:**w! file 覆盖写入已存在文件</li></ul><p>**:**w&gt;&gt; file 追加写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:10,20w &gt;&gt;file 将10到20行追加写入文件中</span><br><span class="line">:wq 保存并退出 效果等同ZZ,但不等同ctrl+z，ctrl+z是挂起当前进程</span><br></pre></td></tr></table></figure><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><ul><li><strong>保存并退出</strong>可以用快捷键<strong>ZZ</strong>，或者**:wq**</li></ul><p>用ZZ为了不误触，导致不小心退出</p><ul><li>注意 强制退出vim</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:q!&lt;Return&gt;</span><br></pre></td></tr></table></figure><ul><li>其中的!（bang）告诉vim <strong>不要管我是否保存了数据</strong>（可能造成丢失）</li></ul><hr><h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><ul><li><strong>按<ESC>将退出输入模式</strong></li></ul><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul><li>按 i 光标处向前插入 I 插入到<strong>行首</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kankakee 在把光标移动到K上面</span><br><span class="line">输入ibbb</span><br><span class="line">bbbKankakee</span><br></pre></td></tr></table></figure><ul><li>o光标下行插入 O光标上行插入</li><li>a光标处后插入 A插入到行尾</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kankakee 在把光标移动到K上面</span><br><span class="line">输入ibbb</span><br><span class="line">Kbbbankakee</span><br></pre></td></tr></table></figure><ul><li>**^W(ctrl+w)**删除一个单词</li><li><strong>^U</strong> <strong>(ctrl+u)<strong>或 ^X</strong>(ctrl+x)</strong> 删除一行 （这是在编辑模式中）</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li>s (substitute) 将<strong>光标处字符删除</strong>并进入编辑模式</li><li>C 将<strong>光标</strong>处字符<strong>到结尾</strong>处字符<strong>全部删除</strong> 进入编辑模式</li><li>S 或 <strong>cc</strong> 将整个行全部剪切，并进入编辑模式，而且光标在原来这行。与dd不同，dd只删除不进入编辑</li></ul><h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>若在编辑模式下长时间未保存，并且vim突然中断，那未保存内容将在<strong>隐藏的</strong><strong>.file.swap文件</strong>中</p><ul><li>如ssh连接突然中止，或者电脑关机</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#用命令</span><br><span class="line">vim -r(recover) file</span><br><span class="line">#</span><br><span class="line">可以恢复原有数据</span><br></pre></td></tr></table></figure><ul><li>如果删除隐藏文件，再打开原文件，数据只会显示到<strong>上次保存位置</strong></li><li>所以，先恢复文件，再rm .swap文件</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>vim 将空行用~代替<br>vim 中不能用(ctrl+c) 如果要输入^C 用ctrl+v ctrl+c 输入^V要输入两次ctrl+v<br>tab键也用ctrl+i代替</p><h2 id="可视区块"><a href="#可视区块" class="headerlink" title="可视区块"></a>可视区块</h2><p>如果想要处理一个区块（以列为单位），如下这种格式：</p><blockquote><p>192.168.1.1 host1.class.net<br>192.168.1.2 host2.class.net<br>192.168.1.3 host3.class.net<br>192.168.1.4 host4.class.net<br>192.168.1.5 host5.class.net<br>192.168.1.6 host6.class.net<br>192.168.1.7 host7.class.net<br>192.168.1.8 host8.class.net<br>192.168.1.9 host9.class.net</p></blockquote><p>如果要把每行的host1再添加到这行末尾，如192.168.1.1 host1.class.net host1，我们可以使用以下命令进行操作</p><p>在一般命令模式下</p><p>v       <strong>字符</strong>选择，会将光标经过的<strong>字符</strong>反白选择</p><p>V       <strong>行</strong>选择，会将光标经过的<strong>行</strong>反白选择</p><p>ctrl+v    块选择，用<strong>矩形方式</strong>选择</p><p>y       将反白选择部分复制</p><p>d       将反白选择部分删除</p><p>p       将复制或删除的部分粘贴</p><p>1、将光标移动太第一行的host1的h上，按ctrl+v ，此时可以看到VISUAL BLOCK的字样<a href="https://cdn.lthero.cn/wp-store/2021/07/1632535027-Snipaste_2021-09-25_09-54-56.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632535027-Snipaste_2021-09-25_09-54-56.png" alt="img"></a></p><p>2、将光标移动到最底部分，光标经过的区域会反色</p><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632535114-Snipaste_2021-09-25_09-58-26.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632535114-Snipaste_2021-09-25_09-58-26.png" alt="img"></a></p><p>3、按y进行复制，按下【y】后，反色的区域会不见</p><p>4、将光标移动到第一行的最右边，进入编辑模式，输入两个空格，再进入命令模式，按下【p】后就会粘贴成功</p><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632535249-Snipaste_2021-09-25_10-00-40.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632535249-Snipaste_2021-09-25_10-00-40.png" alt="img"></a></p><h2 id="多窗口功能"><a href="#多窗口功能" class="headerlink" title="多窗口功能"></a>多窗口功能</h2><p>如果有两个文件需要对照修改，总不能同时打开两个shell吧？vim也有划分窗口的功能！！！</p><p>在命令模式下<code>:sp filename</code></p><p>1、如果要在<strong>新窗口</strong>打开<strong>另一个文件</strong>，就写对应的文件名，如果文件<strong>不存在会自动创建</strong>；</p><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632536380-Snipaste_2021-09-25_10-19-24.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632536380-Snipaste_2021-09-25_10-19-24.png" alt="img"></a></p><p>2、filename也可以不写，如仅输入<code>:sp</code> 会在两个窗口打开<strong>同一个文件，而且会同步修改</strong></p><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632536207-Snipaste_2021-09-25_10-16-13.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632536207-Snipaste_2021-09-25_10-16-13.png" alt="img"></a></p><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632536328-Snipaste_2021-09-25_10-18-38.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632536328-Snipaste_2021-09-25_10-18-38.png" alt="img"></a></p><p>此时，可以利用【ctrl+w+j】移动到下面窗口，【ctrl+w+k】移动到上面的窗口</p><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p>平时在用jetbrain全家桶习惯了自动补全，vim其实也有，而且功能强大。<strong>以下按键全部在编辑模式</strong></p><p>1、以扩展名作为语法补充。注意：文件名后缀一定要改成对应的扩展名，如.html&#x2F;.css&#x2F;.c&#x2F;.py</p><blockquote><p>按键：ctrl+x 再按 ctrl+o</p></blockquote><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632537129-Snipaste_2021-09-25_10-31-11.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632537129-Snipaste_2021-09-25_10-31-11.png" alt="img"></a></p><p>在输入&lt;&#x2F;后按【ctrl+x 】和【ctrl+o】后将补全<code>head&gt;</code></p><p>2、以当前编辑的【文件内容文字】作为关键词，自动补全</p><blockquote><p>按键：ctrl+x 再按 ctrl+n</p></blockquote><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632537335-Snipaste_2021-09-25_10-28-25.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632537335-Snipaste_2021-09-25_10-28-25.png" alt="img"></a></p><p>如，当前有三个变量var11，var22，var33，想要输出时，只用在var后按【ctrl+x】和【ctrl+n】即可出现<strong>补全列表</strong></p><p>3、以当前目录内的【文件名】作为关键词</p><blockquote><p>ctrl+x 再按 ctrl+f</p></blockquote><p><a href="https://cdn.lthero.cn/wp-store/2021/07/1632537471-Snipaste_2021-09-25_10-29-18.png"><img src="https://cdn.lthero.cn/wp-store/2021/07/1632537471-Snipaste_2021-09-25_10-29-18.png" alt="img"></a></p><p>如，输入te后，按【ctrl+x】和【ctrl+f】即可出现<strong>当前目录文件名</strong>补全<strong>列表</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VIM&quot;&gt;&lt;a href=&quot;#VIM&quot; class=&quot;headerlink&quot; title=&quot;VIM&quot;&gt;&lt;/a&gt;VIM&lt;/h1&gt;&lt;h4 id=&quot;建议全程使用英语输入法&quot;&gt;&lt;a href=&quot;#建议全程使用英语输入法&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【Broadcast-Collision】冲突域与广播域</title>
    <link href="https://blog.lthero.cn/2022/07/29/Broadcast-Collision/"/>
    <id>https://blog.lthero.cn/2022/07/29/Broadcast-Collision/</id>
    <published>2022-07-29T06:58:31.000Z</published>
    <updated>2022-07-29T07:06:05.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冲突域与广播域"><a href="#冲突域与广播域" class="headerlink" title="冲突域与广播域"></a>冲突域与广播域</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><ul><li>冲突域（物理层）：<br>同一时间内只能有一台设备发送信息的范围。如果有多台设备同时发送信息，就会产生冲突，故称冲突域。</li><li>广播域（数据链路层）：<br>广播帧所能到达的所有的设备的集合。</li></ul><p>关系：<a href="https://so.csdn.net/so/search?q=%E5%86%B2%E7%AA%81%E5%9F%9F&spm=1001.2101.3001.7020">冲突域</a>的范围<strong>小于等于</strong>广播域的范围，一个广播域由若干个冲突域组成！</p><p>隔离及扩展：<br>1、<a href="https://so.csdn.net/so/search?q=%E7%89%A9%E7%90%86%E5%B1%82&spm=1001.2101.3001.7020">物理层</a>的设备（如集线器Hub，中继器）可以扩大冲突域，而不能隔离冲突域，更不能隔离广播域。<br>2、<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82&spm=1001.2101.3001.7020">数据链路层</a>的设备（如交换机）可以隔离冲突域，扩大广播域。<br>3、网络层的设备（如路由器）可以隔离广播域。</p><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><h3 id="扩大广播域："><a href="#扩大广播域：" class="headerlink" title="扩大广播域："></a>扩大广播域：</h3><p>​假如有二层交换机1号，二层交换机2号。1号交换机光纤连接10台主机，2号交换机光纤连接5台主机。1号交换机与2号交换机用光纤相连。如果1号交换机连接的10台主机中，有一台主机发出广播帧。如果1号交换机没连接2号交换机，那这个广播帧，只能由这10台中的9台收到。现在1号交换机连接了2号交换机，那这个广播帧，可以经过1号交换机转发给2号交换机，2号交换机再转发给它连接的5台主机。于是，这个广播帧可以由9+5&#x3D;14台主机收到。扩大广播域</p><h3 id="隔离冲突域："><a href="#隔离冲突域：" class="headerlink" title="隔离冲突域："></a>隔离冲突域：</h3><p>​目的就是为了“消除碰撞”。还是上面的假设，1号交换机连接了10个主机，而每个主机是通过光纤线直接连接到1号交换机的10个不同的端口。如果这10台主机，用总线方式相连接，一台主机发数据比特，其它的如果也在发，肯定早晚会碰撞，因此才有很多不同的防“碰撞”的协议。而现在，每台主机用线与1号交换机的不同端口连接，相当于每台主机独占了与端口连接的一条线路，每台主机主机随时可以发送数据比特给与这台主机连接的端口。不同主机就算同时发数据比特，也只是同时发给了与它们相连接的不同端口，又因为交换机的每个端口对应一块内存和一个“没有mac地址的网卡”，每块网卡的功能是将收到的数据比特成形成帧，再由交换机查路由转发表将帧转发到其它端口【形成帧后，应该会再形成个队列，交换机按队列次序依次处理每个帧】。隔离冲突域</p><h3 id="隔离广播域："><a href="#隔离广播域：" class="headerlink" title="隔离广播域："></a>隔离广播域：</h3><p>​假设1号交换机再与路由器连接，当路由器的<strong>内网网卡</strong>（接收帧的网卡）收到帧后，会交给网络层模块处理，从中提取出源ip地址、目的ip地址。根据目的ip地址查询路由表，将目的ip与掩码计算后，有两种结果。</p><p>​结果1：若</p><p>​结果2：从<strong>外网网卡</strong>传出去。说明目的ip地址和源ip地址不是同一个子网，比如目的ip是外网web服务器，那路由器才会将根据目的ip查询路由表，找到下一跳的(Gateway)设备ip，再将帧中的目的mac地址改成下一跳的设备对应的mac地址，再从外网网卡传送出去。</p><p>​这就是路由器可以隔离广播域的原因。如果不隔离广播域，那某个子网内某个主机发出的广播帧，会被全球收到（不考虑防火墙等）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冲突域与广播域&quot;&gt;&lt;a href=&quot;#冲突域与广播域&quot; class=&quot;headerlink&quot; title=&quot;冲突域与广播域&quot;&gt;&lt;/a&gt;冲突域与广播域&lt;/h1&gt;&lt;h2 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="网络" scheme="https://blog.lthero.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://blog.lthero.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>【Web-socket】服务器程序</title>
    <link href="https://blog.lthero.cn/2022/07/17/Web-socket-server/"/>
    <id>https://blog.lthero.cn/2022/07/17/Web-socket-server/</id>
    <published>2022-07-17T05:20:54.000Z</published>
    <updated>2022-07-21T06:51:39.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h1><p>linux服务端代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="comment">//手动设置连接台数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNMAX 1000</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *WorkPath;</span><br><span class="line"><span class="type">int</span> listenfd, clients[CONNMAX];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">char</span> *x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startServer</span><span class="params">(<span class="type">char</span> *x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">respond</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> clientaddr;</span><br><span class="line"><span class="type">socklen_t</span> addrlen;</span><br><span class="line"><span class="type">char</span> c, PORT[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//设置当前路径</span></span><br><span class="line">WorkPath = <span class="built_in">getenv</span>(<span class="string">&quot;PWD&quot;</span>);</span><br><span class="line"><span class="comment">//默认端口</span></span><br><span class="line"><span class="built_in">strcpy</span>(PORT,<span class="string">&quot;10000&quot;</span>);</span><br><span class="line"><span class="comment">// 当前socket标识符下标</span></span><br><span class="line"><span class="type">int</span> slot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从命令行接收参数</span></span><br><span class="line"><span class="keyword">while</span> ((c = <span class="built_in">getopt</span> (argc, argv, <span class="string">&quot;p:r:&quot;</span>)) != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">switch</span> (c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">WorkPath = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(optarg));</span><br><span class="line"><span class="built_in">strcpy</span>(WorkPath,optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line"><span class="built_in">strcpy</span>(PORT,optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line"><span class="built_in">fprintf</span>(stderr,<span class="string">&quot;参数错误\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;服务器开放端口 %s 使用 %s 作为当前路径\n&quot;</span>,PORT,WorkPath);</span><br><span class="line"><span class="comment">// 设置所有的套接字标识符的默认值为-1，代表这个套接字标识号没有没有使用</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;CONNMAX; i++)</span><br><span class="line">clients[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//先开启服务，执行流程中的1，2，3</span></span><br><span class="line"><span class="built_in">startServer</span>(PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续接收请求</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//包含addr所指向结构大小的数值，函数返回时包含对等地址(一般为服务器地址)的实际数值</span></span><br><span class="line">addrlen = <span class="built_in">sizeof</span>(clientaddr);</span><br><span class="line"><span class="comment">//4、接收来自客户端的连接请求 accept</span></span><br><span class="line"><span class="comment">//accept函数等待来自客户端的连接请求到达&quot;监听描述符listenfd&quot;----客户端会调用connect函数发送客户端的&quot;套接字地址&quot;【ip:port】</span></span><br><span class="line"><span class="comment">//accpet将客户端的套接字地址填写到clientaddr这个结构中，并返回“已连接描述符connfd”</span></span><br><span class="line">clients[slot] = <span class="built_in">accept</span> (listenfd, (<span class="keyword">struct</span> sockaddr *) &amp;clientaddr, &amp;addrlen);</span><br><span class="line"><span class="comment">//出错返回-1</span></span><br><span class="line"><span class="keyword">if</span> (clients[slot]&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">error</span> (<span class="string">&quot;accept()函数出错，接收失败&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//accept返回“已连接描述符后”，创建子进程，让子程序完成response。父进程继续监听</span></span><br><span class="line"><span class="keyword">if</span> ( fork()==<span class="number">0</span> )&#123;</span><br><span class="line"><span class="comment">//子进程应该关掉监听描述符【因为继续父进程全部变量】，只保留已连接描述符</span></span><br><span class="line"><span class="built_in">close</span>(listenfd);</span><br><span class="line"><span class="comment">//对连接作出响应</span></span><br><span class="line"><span class="built_in">respond</span>(slot);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-1表示当前位置无描述符，这步用来寻找数组中下一个可用的已连接描述符的位置</span></span><br><span class="line"><span class="keyword">while</span> (clients[slot]!=<span class="number">-1</span>) </span><br><span class="line">slot = (slot+<span class="number">1</span>)%CONNMAX;</span><br><span class="line"><span class="comment">//父进程应该关掉已连接描述符</span></span><br><span class="line"><span class="built_in">close</span>(clients[slot]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端进程做的“监听准备”</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startServer</span><span class="params">(<span class="type">char</span> *port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//hits结构可用于提供要产生的套接字类型的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">addrinfo</span> hints, *res, *p;</span><br><span class="line"><span class="comment">// 将hints结构清空</span></span><br><span class="line"><span class="built_in">memset</span> (&amp;hints, <span class="number">0</span>, <span class="built_in">sizeof</span>(hints));</span><br><span class="line"><span class="comment">//使用的协议簇AF_INET=ipv4/AF_INET6=ipv6</span></span><br><span class="line">hints.ai_family = AF_INET;</span><br><span class="line"><span class="comment">//协议类型，设置为流类型</span></span><br><span class="line">hints.ai_socktype = SOCK_STREAM;</span><br><span class="line"><span class="comment">//设置标志为AI_PASSIVE，告诉函数，要产生的套接字，会被服务端当作“监听套接字”。否则默认返回&quot;主动套接字&quot;</span></span><br><span class="line">hints.ai_flags = AI_PASSIVE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将NULL表示得到的套接字地址结构中，ip字段是通配符地址。告诉内核让这个服务器接受发送到此主机的全部请求</span></span><br><span class="line"><span class="comment">//返回结果是个链表，链表包含的是很多套接字地址，存入res中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getaddrinfo</span>( <span class="literal">NULL</span>, port, &amp;hints, &amp;res) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span> (<span class="string">&quot;getaddrinfo() 出错&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建 套接字描述符</span></span><br><span class="line"><span class="comment">// 2、将“套接字描述符”与“套接字地址”绑定</span></span><br><span class="line"><span class="keyword">for</span> (p = res; p!=<span class="literal">NULL</span>; p=p-&gt;ai_next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若成功则返回 套接字描述符，若出错则返回-1</span></span><br><span class="line">listenfd = <span class="built_in">socket</span> (p-&gt;ai_family, p-&gt;ai_socktype, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (listenfd == <span class="number">-1</span>) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//将“套接字描述符”与“套接字地址【ip:port】”绑定</span></span><br><span class="line"><span class="comment">//调用bind的函数之后，通过套接字描述符来读取或发送到套接字地址</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(listenfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class="number">0</span>) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//绑定失败，关掉当前描述符并尝试下一个</span></span><br><span class="line"><span class="built_in">close</span>(listenfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span> (<span class="string">&quot;socket() 或 bind()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放这个链表</span></span><br><span class="line"><span class="built_in">freeaddrinfo</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、转换成监听套接字</span></span><br><span class="line"><span class="comment">// 客户端发起的请求是主动实体，默认情况下，内核会认为socket函数创建的描述符是“主动套接字”，默认存在于客户端。但服务端，需要使用listen函数，</span></span><br><span class="line"><span class="comment">//来告诉内核，这个描述符是给服务端用的。</span></span><br><span class="line"><span class="comment">//listen函数将 这个描述符 从主动套接字，变成“监听套接字”。“监听套接字”可以接受客户端的连接请求。</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">listen</span> (listenfd, <span class="number">1000000</span>) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;listen()函数转换出错&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端的响应</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">respond</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//mesg缓冲区用来存放recv函数接收到的数据</span></span><br><span class="line"><span class="type">char</span> mesg[<span class="number">99999</span>], *reqline[<span class="number">3</span>], data_to_send[<span class="number">1024</span>], path[<span class="number">99999</span>];</span><br><span class="line"><span class="comment">//rcvd用来接收copy的字节数</span></span><br><span class="line"><span class="type">int</span> rcMegLen, file, bytes_read;</span><br><span class="line"><span class="built_in">memset</span>( (<span class="type">void</span>*)mesg, (<span class="type">int</span>)<span class="string">&#x27;\0&#x27;</span>, <span class="number">99999</span> );</span><br><span class="line"><span class="comment">//5、从socket中读取字符</span></span><br><span class="line"><span class="comment">//第一个参数指定接收端套接字描述符</span></span><br><span class="line"><span class="comment">//第二个参数缓冲区用来存放recv函数接收到的数据；</span></span><br><span class="line"><span class="comment">//第三个参数指明缓冲区的长度；</span></span><br><span class="line"><span class="comment">//第四个参数一般置0。</span></span><br><span class="line">rcMegLen=<span class="built_in">recv</span>(clients[n], mesg, <span class="number">99999</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//如果recv在copy时出错，那么它返回SOCKET_ERROR</span></span><br><span class="line"><span class="keyword">if</span> (rcMegLen&lt;<span class="number">0</span>) </span><br><span class="line"><span class="built_in">fprintf</span>(stderr,(<span class="string">&quot;无法接收消息\n&quot;</span>));</span><br><span class="line"><span class="comment">//如果recv函数在等待协议接收数据时网络中断了，那么它返回0。</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rcMegLen==<span class="number">0</span>)    </span><br><span class="line"><span class="built_in">fprintf</span>(stderr,<span class="string">&quot;与客户端的连接意外中断.\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>    <span class="comment">// 接收到消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印客户端请求信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, mesg);</span><br><span class="line"><span class="comment">//按换行进行切分消息</span></span><br><span class="line">reqline[<span class="number">0</span>] = <span class="built_in">strtok</span> (mesg, <span class="string">&quot; \t\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(reqline[<span class="number">0</span>], <span class="string">&quot;GET\0&quot;</span>, <span class="number">4</span>)==<span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">reqline[<span class="number">1</span>] = <span class="built_in">strtok</span> (<span class="literal">NULL</span>, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">reqline[<span class="number">2</span>] = <span class="built_in">strtok</span> (<span class="literal">NULL</span>, <span class="string">&quot; \t\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>( reqline[<span class="number">2</span>], <span class="string">&quot;HTTP/1.0&quot;</span>, <span class="number">8</span>)!=<span class="number">0</span> &amp;&amp; <span class="built_in">strncmp</span>( reqline[<span class="number">2</span>], <span class="string">&quot;HTTP/1.1&quot;</span>, <span class="number">8</span>)!=<span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write</span>(clients[n], <span class="string">&quot;HTTP/1.1 400 Bad Request\n&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果url后面不写任何路径，默认为index.html</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(reqline[<span class="number">1</span>], <span class="string">&quot;/\0&quot;</span>, <span class="number">2</span>)==<span class="number">0</span> )</span><br><span class="line">reqline[<span class="number">1</span>] = <span class="string">&quot;/index.html&quot;</span>;        </span><br><span class="line"><span class="built_in">strcpy</span>(path, WorkPath);</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;path[<span class="built_in">strlen</span>(WorkPath)], reqline[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;向套接字描述符%d号发送了文件: %s\n&quot;</span>,clients[n], path);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================================================\n&quot;</span>);</span><br><span class="line"><span class="comment">//如果文件存在，向客户端发送这个文件，以只读方式打开文件</span></span><br><span class="line"><span class="keyword">if</span> ( (file=<span class="built_in">open</span>(path, O_RDONLY))!=<span class="number">-1</span> )   </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 5.5、向socket写入信息</span></span><br><span class="line"><span class="comment">//第一个参数指定发送端套接字描述符</span></span><br><span class="line">    <span class="comment">//第二个参数指明一个存放应用程序要发送数据的缓冲区</span></span><br><span class="line">    <span class="comment">//第三个参数指明实际要发送的数据的字节数</span></span><br><span class="line">    <span class="comment">//第四个参数一般置0</span></span><br><span class="line"><span class="built_in">send</span>(clients[n], <span class="string">&quot;HTTP/1.1 200 OK\n\n&quot;</span>, <span class="number">17</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//向套接字发送数据</span></span><br><span class="line"><span class="keyword">while</span> ( (bytes_read=<span class="built_in">read</span>(file, data_to_send, <span class="number">1024</span>))&gt;<span class="number">0</span> )</span><br><span class="line"><span class="built_in">write</span> (clients[n], data_to_send, bytes_read);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则提示此文件不存在</span></span><br><span class="line"><span class="keyword">else</span>    <span class="built_in">write</span>(clients[n], <span class="string">&quot;HTTP/1.1 404 Not Found\n&quot;</span>, <span class="number">23</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//来禁止套接字上的输入/输出，使用SHUT_RDWR则将同时无法读取和发送数据</span></span><br><span class="line"><span class="built_in">shutdown</span> (clients[n], SHUT_RDWR);       </span><br><span class="line"><span class="comment">//等到客商退出后才会close  </span></span><br><span class="line"><span class="comment">//6、关闭socket</span></span><br><span class="line"><span class="built_in">close</span>(clients[n]);</span><br><span class="line"><span class="comment">//可以重新使用</span></span><br><span class="line">clients[n]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认返回的index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./bgimage.jpg</span>)no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10%</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">2%</span> <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">2.3</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#20a53a</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>访问成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是默认index.html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;socket编程&quot;&gt;&lt;a href=&quot;#socket编程&quot; class=&quot;headerlink&quot; title=&quot;socket编程&quot;&gt;&lt;/a&gt;socket编程&lt;/h1&gt;&lt;p&gt;linux服务端代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++</summary>
      
    
    
    
    <category term="网络" scheme="https://blog.lthero.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://blog.lthero.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="socket编程" scheme="https://blog.lthero.cn/tags/socket%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>instruction-pointer</title>
    <link href="https://blog.lthero.cn/2022/07/15/instruction-pointer/"/>
    <id>https://blog.lthero.cn/2022/07/15/instruction-pointer/</id>
    <published>2022-07-15T15:17:20.000Z</published>
    <updated>2022-07-15T15:17:36.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个小程序的分析"><a href="#一个小程序的分析" class="headerlink" title="一个小程序的分析"></a>一个小程序的分析</h1><p><img src="https://cdn.lthero.cn/post_images/course/Cryptography/QQ%E6%88%AA%E5%9B%BE20220715152731.png" alt="QQ截图20220715152731"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个小程序的分析&quot;&gt;&lt;a href=&quot;#一个小程序的分析&quot; class=&quot;headerlink&quot; title=&quot;一个小程序的分析&quot;&gt;&lt;/a&gt;一个小程序的分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.lthero.cn/post_images/co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【Cs-Postgraduate】考研资料</title>
    <link href="https://blog.lthero.cn/2022/07/15/CS-postgraduate/"/>
    <id>https://blog.lthero.cn/2022/07/15/CS-postgraduate/</id>
    <published>2022-07-15T12:07:04.000Z</published>
    <updated>2022-07-15T12:24:00.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><blockquote><p>整理一些相关资料，放本地速度慢，放cdn费用太高，于是大部分放到阿里云</p></blockquote><h1 id="408真题"><a href="#408真题" class="headerlink" title="408真题"></a>408真题</h1><p>阿里云网盘：「408真题」<a href="https://www.aliyundrive.com/s/Hiai1YRGv1z">https://www.aliyundrive.com/s/Hiai1YRGv1z</a> 提取码: mj69 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/a&gt;资料&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;整理一些相关资料，放本地速度慢，放cdn费用太高，于是大部分放到阿里云&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1</summary>
      
    
    
    
    <category term="考研" scheme="https://blog.lthero.cn/categories/%E8%80%83%E7%A0%94/"/>
    
    <category term="408" scheme="https://blog.lthero.cn/categories/%E8%80%83%E7%A0%94/408/"/>
    
    
    <category term="考研" scheme="https://blog.lthero.cn/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="408" scheme="https://blog.lthero.cn/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>linux-systemctl-service</title>
    <link href="https://blog.lthero.cn/2022/07/13/linux-systemctl-service/"/>
    <id>https://blog.lthero.cn/2022/07/13/linux-systemctl-service/</id>
    <published>2022-07-13T12:51:08.000Z</published>
    <updated>2022-07-13T12:54:41.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="systemctl创建服务"><a href="#systemctl创建服务" class="headerlink" title="systemctl创建服务"></a>systemctl创建服务</h1><blockquote><p>用frps服务举例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/frps.<span class="property">service</span></span><br></pre></td></tr></table></figure><p>服务内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=fraps service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动服务的命令（此处写你的frps的实际安装目录）</span></span><br><span class="line">ExecStart=/your/path/frps -c /your/path/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动frps</span></span><br><span class="line">sudo systemctl start frps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自启动</span></span><br><span class="line">sudo systemctl enable frps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启应用</span></span><br><span class="line">sudo systemctl restart frps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止应用</span></span><br><span class="line">sudo systemctl stop frps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看应用的日志</span></span><br><span class="line">sudo systemctl status frps</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;systemctl创建服务&quot;&gt;&lt;a href=&quot;#systemctl创建服务&quot; class=&quot;headerlink&quot; title=&quot;systemctl创建服务&quot;&gt;&lt;/a&gt;systemctl创建服务&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用frps服务举例&lt;/p&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.lthero.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.lthero.cn/tags/linux/"/>
    
    <category term="systemctl管理" scheme="https://blog.lthero.cn/tags/systemctl%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
